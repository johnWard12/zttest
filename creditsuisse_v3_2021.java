
// *********************************************************************************************
//
// Automatically Generated Load Test Program
// -----------------------------------------
//
// Source: creditsuisse_v3_2021.java
// Date  : 01 Jul 2021 21:46:27 ECT
// Author: Apica ZebraTester V5.5-Z / automatically generated
//
// Procedure Copyright by Apica
// All Rights Reserved
//
// http://www.apicasystem.com                                         http://www.zebratester.com
// *********************************************************************************************


import java.io.*;
import java.nio.charset.Charset;
import java.util.*;
import java.util.concurrent.atomic.*;
import org.apache.commons.lang3.StringUtils;
import dfischer.utils.AbstractInputFileReader;
import dfischer.utils.Base64Decoder;
import dfischer.utils.Base64Encoder;
import dfischer.utils.ConvertToDoubleNumber;
import dfischer.utils.ContentTokenExtractor;
import dfischer.utils.ContentTokenExtractorItem;
import dfischer.utils.Cookie;
import dfischer.utils.CookieHandler;
import dfischer.utils.DigestAuthContext;
import dfischer.utils.DNSCache;
import dfischer.utils.DNSTranslationTable;
import dfischer.utils.DynamicProtobufContentParser;
import dfischer.utils.ExternalParamFile;
import dfischer.utils.FileCache;
import dfischer.utils.GenericPluginInterface;
import dfischer.utils.GetRealTimeUserInputFieldsInterface;
import dfischer.utils.HtmlContentParser;
import dfischer.utils.HtmlHeaderCookieExtractor;
import dfischer.utils.HttpLoadTest;
import dfischer.utils.HttpLoadTestIncrementUserThread;
import dfischer.utils.HttpLoadTestUserContext;
import dfischer.utils.HttpSocketPool;
import dfischer.utils.HttpTestURL;
import dfischer.utils.HttpTestURLDNSContext;
import dfischer.utils.HttpTestURLThreadHandler;
import dfischer.utils.InlineScriptExecutionException;
import dfischer.utils.InlineScriptExecutor;
import dfischer.utils.InnerLoopContext;
import dfischer.utils.JSONHtmlBasedExtractor;
import dfischer.utils.JSONPathBasedExtractor;
import dfischer.utils.JSONPathBasedExtractorItem;
import dfischer.utils.Lib;
import dfischer.utils.LoadtestInlineScriptContext;
import dfischer.utils.LoadtestInlineScriptVar;
import dfischer.utils.LoadtestPluginClassLoader;
import dfischer.utils.LoadtestPluginContext;
import dfischer.utils.NextProxyConfig;
import dfischer.utils.ParseArgs;
import dfischer.utils.ParseUrl;
import dfischer.utils.PerformanceData;
import dfischer.utils.PerformanceDataTickExtension;
import dfischer.utils.ProtobufFieldAndValueElement;
import dfischer.utils.ProtobufLib;
import dfischer.utils.RealTimeUserInputField;
import dfischer.utils.ScreenshotImage;
import dfischer.utils.SetThreadStepInterface;
import dfischer.utils.SSLInit;
import dfischer.utils.SSLSessionCacheStatistic;
import dfischer.utils.SSLSessionCacheStatisticInterface;
import dfischer.utils.SuspendResumeInterface;
import dfischer.utils.SymmetricEncrypt;
import dfischer.utils.SymmetricEncryptContext;
import dfischer.utils.TextLineTokenExtractor;
import dfischer.utils.TextLineTokenExtractorItem;
import dfischer.utils.ThreadStepInterface;
import dfischer.utils.UserInputField;
import dfischer.utils.UserTransactionContext;
import dfischer.utils.UserTransactionRuntimeHandler;
import dfischer.utils.VarInputFileReader;
import dfischer.utils.VarRandomInputFileReader;
import dfischer.utils.VaryingLoadInterface;
import dfischer.utils.VaryingTestDurationInterface;
import dfischer.utils.XmlContentParser;
import dfischer.utils.XmlDoctypeCommentParser;
import dfischer.utils.ZoneTime;
import dfischer.proxysniffer.ProxySnifferVarSourceInlineScript;
import dfischer.utils.WebSocketPluginInterface;
import dfischer.utils.BoundaryBasedExtractor;
import dfischer.utils.BoundaryBasedExtractorItem;
import dfischer.utils.RegExpBasedExtractor;
import dfischer.utils.RegExpBasedExtractorItem;
import dfischer.utils.XpathBasedExtractor;
import dfischer.utils.XpathBasedExtractorItem;
import dfischer.proxysniffer.WebSocketData;
import dfischer.utils.HttpTestWebsocketContext;
import dfischer.websocket.*;
import dfischer.utils.DataCollectionSequence;
import dfischer.proxysniffer.ProxyDataRecordActionUserDefinedDataPoint;
import replay.ReplaySnapShotsDump;
import dfischer.utils.BrowserCacheStatistic;
import dfischer.generator.ReplaceVarPattern;


/**
 * Automatically generated load test program.
 */
public class creditsuisse_v3_2021 extends HttpLoadTest implements Runnable, ThreadStepInterface, SetThreadStepInterface, SSLSessionCacheStatisticInterface, VaryingLoadInterface, VaryingTestDurationInterface, SuspendResumeInterface, GetRealTimeUserInputFieldsInterface
{
	public static final String prxVersion = "V5.5-Z";
	public static final int    prxCharEncoding = 3;                         // 1 = OS Default, 2 = ISO-8859-1, 3 = UTF-8
	public static final String testDescription = "raw recording";

	public static String USER_AGENT_1 = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:88.0) Gecko/20100101 Firefox/88.0";

	private static final boolean CONTAINS_PARALLEL_EXECUTED_URLS = false;
	private static final int MAX_PARALLEL_THREADS_PER_USER = 6;                       // default value for max. parallel executed URLs per user
	private static int maxParallelThreadsPerUser = MAX_PARALLEL_THREADS_PER_USER;     // configured value for max. parallel executed URLs per user

	private static final boolean CONTAINS_EXTERNAL_RESOURCES = false;       // note: external resources are typically additional Java library files (*.jar files) invoked by self-developed plug-ins. Consider that Input Files and the Main Class of Plug-Ins are NOT external resources in this context because ZebraTester knows already their declarations.

	// --- WebSocket Object ---
	WebSocketData webSocketData = null;                                     // WebSocket Object that contains data of recorded WebSocket frames.
	WebSocketPluginInterface[] webSocketPluginsForURL = null;               // all assiciated web socket plugins for specific URL.

	// --- proxy configuration ---
	private static boolean proxyEnabled = false;                             // if false: do not use a proxy server
	private static boolean proxyCacheDisabled = true;
	private static String  proxyHttpHost = "";
	private static int     proxyHttpPort = -1;
	private static String  proxyHttpsHost = "";
	private static int     proxyHttpsPort = -1;
	private static String  noProxyFor = "";
	private static String  proxyAuthorization = null;
	private static NextProxyConfig commonNextProxyConfig = null;
	private NextProxyConfig userNextProxyConfig = null;
	
	private static int plannedStartupDelay = 200;                           // startup delay between concurrent users in milliseconds, see main argument "-sdelay"
	private static int plannedTestDuration = -1;                            // planned load test duration in seconds, 0 = unlimited, see main argument "-d"
	private static int maxPlannedLoops = 0;  								// maximum planned loops per user, 0 = unlimited, see main argument "-maxloops"
	private static int pacing = 0;  								        // pacing for loops per user, 0 = no pacing, see main argument "-pacing"
	private static int plannedRequestTimeout = 0;                           // planned request timeout in seconds, see main argument "-t"
	private static int plannedConnectTimeout = 0;                           // planned TCP/IP socket connect timeout in seconds (default = use plannedRequestTimeout), see main argument "-tconnect"
	
	private static String defaultTimeZone = "ECT";                          // use main argument -tz <timezone> to alter
	private static char defaultNumberGroupingSeparator = '\'';              // use main argument -dgs a|c to alter
	private static String sslProtocolVersion = "all";                     // applied ssl protocol version: "all" = v3/tls/tls11/tls12/tls13, use main argument -ssl to set a fixed protocol version
	private static boolean sslcmode = false;                                // support of deficient ssl servers, use main argument -sslcmode to enable
	private static boolean sslECC = true;                                   // elliptic curve cryptography (ECC) is enabled by default, use main argument -noECC to disable
	private static boolean sslSNI = true;                                   // server name indication (SNI) is enabled by default, use main argument -nosni to disable
	private static boolean sslSNICirical = false;                           // the SNI TLS extension is by default set as non-critical, use main argument -snicritical to set as critical
	private static boolean useTlsSessionTickets = false;                    // Session Tickets can only be used with TLS, use main argument -tlssessiontickets to set to use
	private static final long loopErrorDelay = 20;                          // error delay (in milliseconds) applied if a loop of a virtual user has failed
	private static final String THREAD_NAME = "T000000";                    // internal
	private static Integer dumpLock = new Integer(0);                       // internal
	private static Integer inputFileLock = new Integer(0);                  // internal
	private volatile int threadStep = ThreadStepInterface.THREAD_NO_STEP;   // internal
	private boolean urlCallPassed = false;                                  // internal
	private String localIpAddress = null;                                   // internal
	private static long downlinkBandwidth = 0;                              // max. downlink bandwidth per user. 0 = unlimited. use main argument -downlink <kbps> to alter
	private static long uplinkBandwidth = 0;                                // max. uplink bandwidth per user. 0 = unlimited. use main argument -uplink <kbps> to alter
	private static boolean dnsPerLoop = false;								// true if main argument "-dnsperloop" is set = perform new DNS resolves for each executed loop. normally false
	private HttpTestURLDNSContext userDNSContext = null;                    // user specific DNS context - normally null when no special DNS servers are used
	
	private static volatile boolean debugFailedLoops = false;               // true if main argument "-dfl" is set
	private static volatile boolean debugLoops = false;                     // true if main argument "-dl" is set
	private static volatile boolean debugHttp = false;                      // true if main argument "-dh" is set
	private static volatile boolean debugContent = false;                   // true if main argument "-dc" is set
	private static volatile boolean debugCookies = false;                   // true if main argument "-dC" is set
	private static volatile boolean debugKeepAlive = false;                 // true if main argument "-dK" is set
	private static volatile boolean debugSsl = false;                       // true if main argument "-dssl" is set
	
	private static String resultFile = null;                                // name of binary test result file or null
	private static String browserLanguage = null;                           // name of browser language, argument -browserlang <text>
	private static boolean replayMode = false;                              // indicated the replay mode of the load test, use main argument -replay to enable it
	
	private final static String httpProtocolVersion = "1.1";      // applied HTTP protocol version V1.1
	
	private static ExternalParamFile externalParamFile = null;                              // used only for very large parameter values (commonly unused)
	private static final String EXTERNAL_PARAM_FILE = "creditsuisse_v3_2021ExtParams.dat";  // input file name for very large parameter values
	private static FileCache requestFileCache = new FileCache();  // file cache for large XML, SOAP and ASCII requests
	
	private int requestTimeout = -1;                              // thread input data from constructor, timeout per url request in seconds
	private boolean checkLoopCount = false;                       // thread input data from constructor, number of loops per thread (optional)
	private int threadNumber = -1;                                // thread input data from constructor, internal thread number
	private int threadLoopCounter = 0;                            // internal loop counter per thread
	private volatile int userResumeStartWaitDelay = 0;            // internal, user specific delay when the load test execution is resumed
	private volatile boolean decrementEndOfLoopFlag = false;	  // internal flag to decrement the simulated user at runtime
	private volatile boolean incrementUserFlag = false;           // internal flag to increment the simulated user at runtime
	private volatile long incrementUserStartTime = -1;            // internal start time when increment the simulated user at runtime
	private static AtomicInteger totalLoopCounter = new AtomicInteger(0);    // internal overall loop counter

	private LoadtestPluginContext userPluginContext = null;       // plug-in context per user
	private LoadtestInlineScriptContext inlineScriptContext = null;          // re-used, scratch, the returned context of an inline script that runs at item or URL exec scope

	private Object sslSessionCache = null;                        // internal ssl session cache per thread
	private SSLSessionCacheStatistic sslStatistic = null;         // internal ssl session cache statistic per thread
	private static int sslSessionCacheTimeout = 300;              // timeout of ssl session cache in seconds, 0 = session cache disabled
	private static int sslHandshakeRandomGeneratorType = -1;      // invalid initial value, use the default secure random generator for SSL handshakes
	private HttpSocketPool socketPool = null;                     // re-used, scratch, internal socket pool per thread and loop
	private CookieHandler cookieHandler = null;                   // re-used, scratch, internal cookie handler per thread and loop

	private HttpTestURL testURL = null;                           // re-used, scratch, http request and response
	private HttpTestURLThreadHandler pageThreadHandler = null;    // re-used, scratch, support for parallel processing of http request within a page
	private int httpStatus = -1;                                  // re-used, scratch, http response status code from webserver
	private HtmlContentParser htmlContentParser = null;           // re-used, scratch, used to extract vars from http response
	private XmlContentParser xmlContentParser = null;             // re-used, scratch, used to extract vars from http response
	private JSONHtmlBasedExtractor jsonHtmlBasedExtractor = null; // re-used, scratch, used to extract vars from http response
	private DynamicProtobufContentParser protobufContentParser = null;  // re-used, scratch, used to extract vars from http response
	private TextLineTokenExtractor textLineTokenExtractor = null; // re-used, scratch, used to extract vars from http response
	private ContentTokenExtractor contentTokenExtractor = null;   // re-used, scratch, used to extract vars from http response
	private BoundaryBasedExtractor boundaryBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	private RegExpBasedExtractor regExpBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	private XpathBasedExtractor xpathBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	private JSONPathBasedExtractor jsonPathBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	
	private volatile UserTransactionRuntimeHandler transactionHandler = new UserTransactionRuntimeHandler();		// re-used, support to manage user-defined transactions
	private Map<String,String> transactionContextMap = new HashMap<>();		// used to correctly measure the user-defined transactions

	private Map<String,String> loopVarMap = new HashMap<>();		// used for loop variables
	private String access_oken = null;                   // var declaration from web admin var handler: scope = per loop
	private String clientId1 = null;                     // var declaration from web admin var handler: scope = per loop
	private String refreshtoken = null;                  // var declaration from web admin var handler: scope = per loop
	
	/**
	 * constructor: called from load test plug-ins (scope = global).
	 */
	public creditsuisse_v3_2021()
	{
		super();
	}


	/**
	 * constructor: called when a user is created (per user).
	 */
	public creditsuisse_v3_2021(int maxLoops, int requestTimeout, int threadNumber)
	{
		super();
		this.requestTimeout = requestTimeout;
		this.remainingLoops = maxLoops;
		this.checkLoopCount = (maxLoops > 0);
		this.threadNumber = threadNumber;
		this.sslSessionCache = SSLInit.getNewSslSessionCache(sslSessionCacheTimeout);
		this.sslStatistic = new SSLSessionCacheStatistic();
		if (isMultihomed() && (!ipPerLoop()))
			this.localIpAddress = getNextMultihomedIpAddress();
		if (dnsCache != null)
			userDNSContext = new HttpTestURLDNSContext(dnsCache, threadNumber);
		
		applyNextProxySettingsFromFileIfExists();
		
		if (commonNextProxyConfig != null)
			// set proxy configuration data per user 
			userNextProxyConfig = new NextProxyConfig(commonNextProxyConfig);
		
		// initialize context for plug-ins which are executed per user
		userPluginContext = new LoadtestPluginContext(prxVersion, prxCharEncoding, this, threadNumber);
		if(replayMode)
		{
			replaySnapShotsDump = new ReplaySnapShotsDump();
		}
	}


	/**
	 * internal method: called when a user starts a loop.
	 * contains the recorded session which is called by users x loops.
	 * 
	 * @param totalLoopCounter total number of loops (0..n-1) counted overall threads. This value is unique per loop.
	 * 
	 * @return  true:  loop successful completed.
	 *          false: loop failed.
	 */
	private boolean execute(int totalLoopCounter) throws Exception
	{
		markStartOfLoop();
		threadStep = 0;                 // internal - start loop at thread step 0
		
		// enable DNS resolves per loop?
		if (dnsPerLoop)
			userDNSContext = new HttpTestURLDNSContext(dnsCache.clone(false), threadNumber);
		
		// debug http headers?
		Object httpLogVectorObject = null;
		if (debugHttp)
			httpLogVectorObject = this;
		
		// create socket pool per loop
		sslSessionCache = SSLInit.getNewSslSessionCache(sslSessionCacheTimeout);		// reset the SSL session cache to get new SSL session IDs for this loop
		socketPool = new HttpSocketPool(this, sslProtocolVersion, sslSessionCache, sslStatistic, sslcmode);
		if (plannedConnectTimeout > 0)
			socketPool.setConnectTimeout(plannedConnectTimeout);
		if (sslHandshakeRandomGeneratorType != -1)
			socketPool.setSslHandshakeRandomGeneratorType(sslHandshakeRandomGeneratorType);
		socketPool.setSupportEllipticCurves(sslECC);
		socketPool.setHintUseSNI(sslSNI);
		socketPool.setSniCritical(sslSNICirical);
		socketPool.setUseTlsSessionTickets(useTlsSessionTickets);
		if (debugKeepAlive)
		{
			socketPool.setlogVectorObject(this);
			if (debugSsl)
				socketPool.enableSslLog();
		}
		
		if (downlinkBandwidth > 0)
			socketPool.setDownlinkBandwidth(downlinkBandwidth);
		if (uplinkBandwidth > 0)
			socketPool.setUplinkBandwidth(uplinkBandwidth);
		
		if (isMultihomed())
		{
			if (ipPerLoop())
				localIpAddress = getNextMultihomedIpAddress();
			socketPool.setClientIpAddress(localIpAddress);
			log();
			log("multihomed client ip address = " + localIpAddress);
		}
		
		if(isNonModularMode())
		{
			// setup cookie handler per loop
			cookieHandler = new CookieHandler();
			if (debugCookies)
				cookieHandler.setLogVectorInterface(this);
		}
		
		// customised vars from web admin var handler: scope = per loop
		htmlContentParser = null;
		xmlContentParser = null;
		jsonHtmlBasedExtractor = null;
		protobufContentParser = null;
		if(isNonModularMode())
			access_oken = null;
		if(isNonModularMode())
			clientId1 = null;
		if(isNonModularMode())
			refreshtoken = null;
		log();
		log("<<< access_oken = " + access_oken);
			loopVarMap.put("access_oken", access_oken);
		log("<<< clientId1 = " + clientId1);
			loopVarMap.put("clientId1", clientId1);
		log("<<< refreshtoken = " + refreshtoken);
			loopVarMap.put("refreshtoken", refreshtoken);
		
		// initialize context for plug-ins which are executed per loop
		LoadtestPluginContext loopPluginContext = new LoadtestPluginContext(prxVersion, prxCharEncoding, this, threadNumber, socketPool, cookieHandler);
		



		// --- VIRTUAL PAGE #0 ---
		if (!executePage_0(totalLoopCounter, loopPluginContext, new InnerLoopContext(), 0,0, httpLogVectorObject))
			return false;



		// --- PAGE BREAK: Test [0] ---
		log();
		log();
		log("# Page #1: Start Page");
		log("# -------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #1: Start Page", 0, 0, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_1_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_1_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_1_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_1_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_1_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_1_6(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_1_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, null, httpLogVectorObject))
		{
			return false;		// execution of page 1 failed
		}
		
		// page 1 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [143] ---
		log();
		log();
		log("# Page #2: Login");
		log("# --------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #2: Login", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_2_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_2_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_2_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_2_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_2_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_2_6(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_2_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_2_8(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_2_9(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, null, httpLogVectorObject))
		{
			return false;		// execution of page 2 failed
		}
		
		// page 2 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [338] ---
		log();
		log();
		log("# Page #3: Auto & Home");
		log("# --------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #3: Auto & Home", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_3_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_3_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_3_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_3_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_3_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, null, httpLogVectorObject))
		{
			return false;		// execution of page 3 failed
		}
		
		// page 3 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [459] ---
		log();
		log();
		log("# Page #4: Pet Insurance");
		log("# ----------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #4: Pet Insurance", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_4_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_4_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_4_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_4_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_4_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, null, httpLogVectorObject))
		{
			return false;		// execution of page 4 failed
		}
		
		// page 4 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [577] ---
		log();
		log();
		log("# Page #5: Log Out");
		log("# ----------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #5: Log Out", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_5_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_5_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_5_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_5_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_5_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, null, httpLogVectorObject))
		{
			return false;		// execution of page 5 failed
		}
		
		// page 5 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);
		
		
		// loop successful done
		// --------------------
		
		markEndOfPage(performanceData);
		
		endOfExecuteLoop(true, null, -1, loopPluginContext);
		log();
		return true;
	}		// end of execute()
		
		
		
	/**
	 * internal method: called when a user has completed a loop.
	 */
	private void endOfExecuteLoop(boolean loopPassed, HttpTestURL testURL, int threadStep, LoadtestPluginContext loopPluginContext) throws Exception
	{
		// log URL if last call has failed
		if ((!loopPassed) && (testURL != null))
			log(testURL);
		
		// create browser cache per loop if simulate user per loop is enabled in the browser cache settings
		createBrowserCachePerLoop();
		
		// update plugin context
		loopPluginContext.setLoopPassed(loopPassed);
		if ((testURL != null) && (loopPluginContext.getHttpTestURL() == null))
			loopPluginContext.setHttpTestURL(testURL);
		if ((threadStep != -1) && (loopPluginContext.getThreadStep() == -1))
			loopPluginContext.setThreadStep(threadStep);
	}


	/**
	 * Recorded http requests of page #0.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_0(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{

		// all http requests of page #0 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #1: Start Page
		// # -------------------



		// --- HTTP REQUEST: Test [1] <- WEB ADMIN Index 1 ---
		String requestProt0001 = "https";
		String requestHost0001 = "www.creditsuisseaddedbenefits.com";
		int    requestPort0001 = 443;
		String requestFile0001 = "/";
		String requestHeader0001 = "GET " + requestFile0001 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: www.creditsuisseaddedbenefits.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0001, requestHost0001, requestPort0001, requestHeader0001, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0001 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 9370
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [1] <- Index 1
		if(replayMode)
		{
			long proxyDataRecordId =1624989921008L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [2] <- WEB ADMIN Index 2 ---
		String requestProt0002 = "https";
		String requestHost0002 = "www.creditsuisseaddedbenefits.com";
		int    requestPort0002 = 443;
		String requestFile0002 = "/SingleWeb.js";
		String requestHeader0002 = "GET " + requestFile0002 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: www.creditsuisseaddedbenefits.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0002, requestHost0002, requestPort0002, requestHeader0002, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0002 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 24296
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [2] <- Index 2
		if(replayMode)
		{
			long proxyDataRecordId =1624989921186L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'clientId1'
		ContentTokenExtractorItem contentTokenExtractorItem0002_1 = new ContentTokenExtractorItem("https://www.creditsuisseaddedbenefits.com/", "\t\n\r '(),={}", -2);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0002_1);

		contentTokenExtractor.extractTokens();
		try
		{
			// extract var 'clientId1'
			clientId1 = contentTokenExtractorItem0002_1.getResultToken();
			log("<<< clientId1 = " + clientId1);
			loopVarMap.put("clientId1", clientId1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && clientId1!= null && clientId1.trim().length() == 0)
			{
				clientId1 = "";
				log("runtime note: the extraction of a new value for the variable 'clientId1' ends up with an empty string - a substitute value was set");
				log("<<< clientId1 = " + clientId1);
				loopVarMap.put("clientId1", clientId1);
			}
		}
		catch (Exception e) { clientId1 = null; log(e); }
		if (clientId1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'clientId1' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [3] <- WEB ADMIN Index 8 ---
		String requestProt0003 = "https";
		String requestHost0003 = "cdn.abcsys.com";
		int    requestPort0003 = 443;
		String requestFile0003 = "/Library/Enterprise/js/angular/Angularjsv1.5.8.js";
		String requestHeader0003 = "GET " + requestFile0003 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0003, requestHost0003, requestPort0003, requestHeader0003, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0003 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 160364
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [3] <- Index 3
		if(replayMode)
		{
			long proxyDataRecordId =1624989922326L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [4] <- WEB ADMIN Index 9 ---
		String requestProt0004 = "https";
		String requestHost0004 = "cdn.abcsys.com";
		int    requestPort0004 = 443;
		String requestFile0004 = "/Library/Enterprise/js/ui-router/angular-ui-router.js";
		String requestHeader0004 = "GET " + requestFile0004 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0004, requestHost0004, requestPort0004, requestHeader0004, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0004 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 131976
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [4] <- Index 4
		if(replayMode)
		{
			long proxyDataRecordId =1624989922356L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [5] <- WEB ADMIN Index 10 ---
		String requestProt0005 = "https";
		String requestHost0005 = "cdn.abcsys.com";
		int    requestPort0005 = 443;
		String requestFile0005 = "/Library/Enterprise/AppLibrary/js/SingleWebURLandConstants.js" +
				"?v=1";
		String requestHeader0005 = "GET " + requestFile0005 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0005, requestHost0005, requestPort0005, requestHeader0005, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0005 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 11295
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [5] <- Index 5
		if(replayMode)
		{
			long proxyDataRecordId =1624989922359L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [6] <- WEB ADMIN Index 11 ---
		String requestProt0006 = "https";
		String requestHost0006 = "cdn.abcsys.com";
		int    requestPort0006 = 443;
		String requestFile0006 = "/Library/Enterprise/js/jquery/jquery-2.2.2.js";
		String requestHeader0006 = "GET " + requestFile0006 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0006, requestHost0006, requestPort0006, requestHeader0006, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0006 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 363714
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [6] <- Index 6
		if(replayMode)
		{
			long proxyDataRecordId =1624989922360L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [7] <- WEB ADMIN Index 12 ---
		String requestProt0007 = "https";
		String requestHost0007 = "cdn.abcsys.com";
		int    requestPort0007 = 443;
		String requestFile0007 = "/Library/Enterprise/js/vendor/angular-sanitize.min.js";
		String requestHeader0007 = "GET " + requestFile0007 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0007, requestHost0007, requestPort0007, requestHeader0007, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0007 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4277
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [7] <- Index 7
		if(replayMode)
		{
			long proxyDataRecordId =1624989922361L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [8] <- WEB ADMIN Index 13 ---
		String requestProt0008 = "https";
		String requestHost0008 = "cdn.abcsys.com";
		int    requestPort0008 = 443;
		String requestFile0008 = "/Library/Enterprise/js/Vendor/url.js";
		String requestHeader0008 = "GET " + requestFile0008 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0008, requestHost0008, requestPort0008, requestHeader0008, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0008 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 7079
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [8] <- Index 8
		if(replayMode)
		{
			long proxyDataRecordId =1624989922362L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [9] <- WEB ADMIN Index 14 ---
		String requestProt0009 = "https";
		String requestHost0009 = "cdn.abcsys.com";
		int    requestPort0009 = 443;
		String requestFile0009 = "/Library/Enterprise/AppLibrary/js/AppScript.js";
		String requestHeader0009 = "GET " + requestFile0009 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0009, requestHost0009, requestPort0009, requestHeader0009, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0009 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 16343
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [9] <- Index 9
		if(replayMode)
		{
			long proxyDataRecordId =1624989922479L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [10] <- WEB ADMIN Index 15 ---
		String requestProt0010 = "https";
		String requestHost0010 = "cdn.abcsys.com";
		int    requestPort0010 = 443;
		String requestFile0010 = "/Library/Enterprise/js/vendor/angular-local-storage.min.js";
		String requestHeader0010 = "GET " + requestFile0010 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0010, requestHost0010, requestPort0010, requestHeader0010, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0010 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5361
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [10] <- Index 10
		if(replayMode)
		{
			long proxyDataRecordId =1624989922482L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [11] <- WEB ADMIN Index 16 ---
		String requestProt0011 = "https";
		String requestHost0011 = "cdn.abcsys.com";
		int    requestPort0011 = 443;
		String requestFile0011 = "/Library/Enterprise/AppLibrary/js/config.js" +
				"?v=1";
		String requestHeader0011 = "GET " + requestFile0011 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0011, requestHost0011, requestPort0011, requestHeader0011, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0011 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 11745
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [11] <- Index 11
		if(replayMode)
		{
			long proxyDataRecordId =1624989922484L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [12] <- WEB ADMIN Index 17 ---
		String requestProt0012 = "https";
		String requestHost0012 = "cdn.abcsys.com";
		int    requestPort0012 = 443;
		String requestFile0012 = "/Library/Enterprise/AppLibrary/js/Services/MainServices.js";
		String requestHeader0012 = "GET " + requestFile0012 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0012, requestHost0012, requestPort0012, requestHeader0012, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0012 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1921
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [12] <- Index 12
		if(replayMode)
		{
			long proxyDataRecordId =1624989922593L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [13] <- WEB ADMIN Index 18 ---
		String requestProt0013 = "https";
		String requestHost0013 = "cdn.abcsys.com";
		int    requestPort0013 = 443;
		String requestFile0013 = "/Library/Enterprise/js/jquery/jquery-ui.js";
		String requestHeader0013 = "GET " + requestFile0013 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0013, requestHost0013, requestPort0013, requestHeader0013, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0013 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 487212
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [13] <- Index 13
		if(replayMode)
		{
			long proxyDataRecordId =1624989922601L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [14] <- WEB ADMIN Index 19 ---
		String requestProt0014 = "https";
		String requestHost0014 = "cdn.abcsys.com";
		int    requestPort0014 = 443;
		String requestFile0014 = "/Library/Enterprise/AppLibrary/js/services.js";
		String requestHeader0014 = "GET " + requestFile0014 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0014, requestHost0014, requestPort0014, requestHeader0014, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0014 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 14383
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [14] <- Index 14
		if(replayMode)
		{
			long proxyDataRecordId =1624989922602L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [15] <- WEB ADMIN Index 20 ---
		String requestProt0015 = "https";
		String requestHost0015 = "cdn.abcsys.com";
		int    requestPort0015 = 443;
		String requestFile0015 = "/Library/Enterprise/js/jquery/lodash.min.js";
		String requestHeader0015 = "GET " + requestFile0015 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0015, requestHost0015, requestPort0015, requestHeader0015, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0015 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 28206
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [15] <- Index 15
		if(replayMode)
		{
			long proxyDataRecordId =1624989922696L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [16] <- WEB ADMIN Index 21 ---
		String requestProt0016 = "https";
		String requestHost0016 = "cdn.abcsys.com";
		int    requestPort0016 = 443;
		String requestFile0016 = "/Library/Enterprise/js/plugins/oclazyload/dist/ocLazyLoad.min.js";
		String requestHeader0016 = "GET " + requestFile0016 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0016, requestHost0016, requestPort0016, requestHeader0016, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0016 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 11582
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [16] <- Index 16
		if(replayMode)
		{
			long proxyDataRecordId =1624989922724L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [17] <- WEB ADMIN Index 22 ---
		String requestProt0017 = "https";
		String requestHost0017 = "cdn.abcsys.com";
		int    requestPort0017 = 443;
		String requestFile0017 = "/Library/Enterprise/js/app/inputmask.js";
		String requestHeader0017 = "GET " + requestFile0017 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0017, requestHost0017, requestPort0017, requestHeader0017, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0017 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 149636
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [17] <- Index 17
		if(replayMode)
		{
			long proxyDataRecordId =1624989922837L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [18] <- WEB ADMIN Index 23 ---
		String requestProt0018 = "https";
		String requestHost0018 = "cdn.abcsys.com";
		int    requestPort0018 = 443;
		String requestFile0018 = "/Library/Enterprise/AppLibrary/js/script.js";
		String requestHeader0018 = "GET " + requestFile0018 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0018, requestHost0018, requestPort0018, requestHeader0018, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0018 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 11810
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [18] <- Index 18
		if(replayMode)
		{
			long proxyDataRecordId =1624989922852L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [19] <- WEB ADMIN Index 24 ---
		String requestProt0019 = "https";
		String requestHost0019 = "cdn.abcsys.com";
		int    requestPort0019 = 443;
		String requestFile0019 = "/Library/Enterprise/AppLibrary/js/directives.js";
		String requestHeader0019 = "GET " + requestFile0019 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0019, requestHost0019, requestPort0019, requestHeader0019, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0019 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8489
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [19] <- Index 19
		if(replayMode)
		{
			long proxyDataRecordId =1624989922874L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [20] <- WEB ADMIN Index 25 ---
		String requestProt0020 = "https";
		String requestHost0020 = "cdn.abcsys.com";
		int    requestPort0020 = 443;
		String requestFile0020 = "/Library/Enterprise/AppLibrary/js/filters.js";
		String requestHeader0020 = "GET " + requestFile0020 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0020, requestHost0020, requestPort0020, requestHeader0020, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0020 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2320
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [20] <- Index 20
		if(replayMode)
		{
			long proxyDataRecordId =1624989922938L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #1 (fragment 2 of 8)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [21] <- WEB ADMIN Index 26 ---
		String requestProt0021 = "https";
		String requestHost0021 = "cdn.abcsys.com";
		int    requestPort0021 = 443;
		String requestFile0021 = "/Library/Enterprise/AppLibrary/js/bluebird.js";
		String requestHeader0021 = "GET " + requestFile0021 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0021, requestHost0021, requestPort0021, requestHeader0021, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0021 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 89360
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [21] <- Index 21
		if(replayMode)
		{
			long proxyDataRecordId =1624989922954L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [22] <- WEB ADMIN Index 27 ---
		String requestProt0022 = "https";
		String requestHost0022 = "cdn.abcsys.com";
		int    requestPort0022 = 443;
		String requestFile0022 = "/Library/Enterprise/Content/App/SingleWeb.css";
		String requestHeader0022 = "GET " + requestFile0022 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0022, requestHost0022, requestPort0022, requestHeader0022, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0022 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 10883
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [22] <- Index 22
		if(replayMode)
		{
			long proxyDataRecordId =1624989922984L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [23] <- WEB ADMIN Index 28 ---
		String requestProt0023 = "https";
		String requestHost0023 = "cdn.abcsys.com";
		int    requestPort0023 = 443;
		String requestFile0023 = "/Library/Enterprise/Content/app.css";
		String requestHeader0023 = "GET " + requestFile0023 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0023, requestHost0023, requestPort0023, requestHeader0023, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0023 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 132702
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [23] <- Index 23
		if(replayMode)
		{
			long proxyDataRecordId =1624989923088L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [24] <- WEB ADMIN Index 29 ---
		String requestProt0024 = "https";
		String requestHost0024 = "cdn.abcsys.com";
		int    requestPort0024 = 443;
		String requestFile0024 = "/Library/Enterprise/AppLibrary/css/Style.css" +
				"?v=1.1";
		String requestHeader0024 = "GET " + requestFile0024 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0024, requestHost0024, requestPort0024, requestHeader0024, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0024 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 126321
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [24] <- Index 24
		if(replayMode)
		{
			long proxyDataRecordId =1624989923094L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [25] <- WEB ADMIN Index 30 ---
		String requestProt0025 = "https";
		String requestHost0025 = "cdn.abcsys.com";
		int    requestPort0025 = 443;
		String requestFile0025 = "/Library/Enterprise/js/jquery/jquery-ui.css";
		String requestHeader0025 = "GET " + requestFile0025 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0025, requestHost0025, requestPort0025, requestHeader0025, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0025 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 36435
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [25] <- Index 25
		if(replayMode)
		{
			long proxyDataRecordId =1624989923205L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [26] <- WEB ADMIN Index 31 ---
		String requestProt0026 = "https";
		String requestHost0026 = "cdn.abcsys.com";
		int    requestPort0026 = 443;
		String requestFile0026 = "/Library/Enterprise/AppLibrary/js/GoogleAnalytics.js";
		String requestHeader0026 = "GET " + requestFile0026 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0026, requestHost0026, requestPort0026, requestHeader0026, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0026 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2933
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [26] <- Index 26
		if(replayMode)
		{
			long proxyDataRecordId =1624989923265L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [27] <- WEB ADMIN Index 32 ---
		String requestProt0027 = "https";
		String requestHost0027 = "cdn.abcsys.com";
		int    requestPort0027 = 443;
		String requestFile0027 = "/Library/Enterprise/AppLibrary/css/font-awesome.css";
		String requestHeader0027 = "GET " + requestFile0027 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://cdn.abcsys.com/Library/Enterprise/AppLibrary/css/Style.css?v=1.1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0027, requestHost0027, requestPort0027, requestHeader0027, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0027 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 28308
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [27] <- Index 27
		if(replayMode)
		{
			long proxyDataRecordId =1624989924008L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [28] <- WEB ADMIN Index 35 ---
		String requestProt0028 = "https";
		String requestHost0028 = "cdn.abcsys.com";
		int    requestPort0028 = 443;
		String requestFile0028 = "/Library/Enterprise/js/angular/angular-animate.js" +
				"?_=1624989923882";
		String requestHeader0028 = "GET " + requestFile0028 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0028, requestHost0028, requestPort0028, requestHeader0028, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0028 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 104195
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [28] <- Index 28
		if(replayMode)
		{
			long proxyDataRecordId =1624989924980L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [29] <- WEB ADMIN Index 36 ---
		String requestProt0029 = "https";
		String requestHost0029 = "cdn.abcsys.com";
		int    requestPort0029 = 443;
		String requestFile0029 = "/Library/Enterprise/js/App/bootstrap.js" +
				"?_=1624989923883";
		String requestHeader0029 = "GET " + requestFile0029 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0029, requestHost0029, requestPort0029, requestHeader0029, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0029 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 77458
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [29] <- Index 29
		if(replayMode)
		{
			long proxyDataRecordId =1624989924984L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [30] <- WEB ADMIN Index 37 ---
		String requestProt0030 = "https";
		String requestHost0030 = "cdn.abcsys.com";
		int    requestPort0030 = 443;
		String requestFile0030 = "/Library/Enterprise/js/App/owl.carousel.min.js" +
				"?_=1624989923884";
		String requestHeader0030 = "GET " + requestFile0030 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0030, requestHost0030, requestPort0030, requestHeader0030, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0030 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15060
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [30] <- Index 30
		if(replayMode)
		{
			long proxyDataRecordId =1624989925000L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [31] <- WEB ADMIN Index 38 ---
		String requestProt0031 = "https";
		String requestHost0031 = "cdn.abcsys.com";
		int    requestPort0031 = 443;
		String requestFile0031 = "/Library/Enterprise/js/App/jquery.parallax-1.1.js" +
				"?_=1624989923885";
		String requestHeader0031 = "GET " + requestFile0031 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0031, requestHost0031, requestPort0031, requestHeader0031, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0031 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2583
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [31] <- Index 31
		if(replayMode)
		{
			long proxyDataRecordId =1624989925001L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [32] <- WEB ADMIN Index 39 ---
		String requestProt0032 = "https";
		String requestHost0032 = "cdn.abcsys.com";
		int    requestPort0032 = 443;
		String requestFile0032 = "/Library/Enterprise/js/inspinia.js" +
				"?_=1624989923887";
		String requestHeader0032 = "GET " + requestFile0032 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0032, requestHost0032, requestPort0032, requestHeader0032, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0032 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1568
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [32] <- Index 32
		if(replayMode)
		{
			long proxyDataRecordId =1624989925014L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [33] <- WEB ADMIN Index 40 ---
		String requestProt0033 = "https";
		String requestHost0033 = "cdn.abcsys.com";
		int    requestPort0033 = 443;
		String requestFile0033 = "/Library/Enterprise/js/app.js" +
				"?_=1624989923886";
		String requestHeader0033 = "GET " + requestFile0033 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0033, requestHost0033, requestPort0033, requestHeader0033, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0033 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 316
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [33] <- Index 33
		if(replayMode)
		{
			long proxyDataRecordId =1624989925015L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [34] <- WEB ADMIN Index 43 ---
		String requestProt0034 = "https";
		String requestHost0034 = "cdn.abcsys.com";
		int    requestPort0034 = 443;
		String requestFile0034 = "/Library/Enterprise/js/App/jquery.cycle2.min.js" +
				"?_=1624989923888";
		String requestHeader0034 = "GET " + requestFile0034 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0034, requestHost0034, requestPort0034, requestHeader0034, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0034 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 22769
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [34] <- Index 34
		if(replayMode)
		{
			long proxyDataRecordId =1624989925232L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [35] <- WEB ADMIN Index 44 ---
		String requestProt0035 = "https";
		String requestHost0035 = "cdn.abcsys.com";
		int    requestPort0035 = 443;
		String requestFile0035 = "/Library/Enterprise/js/App/jquery.easing.1.3.js" +
				"?_=1624989923889";
		String requestHeader0035 = "GET " + requestFile0035 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0035, requestHost0035, requestPort0035, requestHeader0035, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0035 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8301
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [35] <- Index 35
		if(replayMode)
		{
			long proxyDataRecordId =1624989925239L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [36] <- WEB ADMIN Index 45 ---
		String requestProt0036 = "https";
		String requestHost0036 = "cdn.abcsys.com";
		int    requestPort0036 = 443;
		String requestFile0036 = "/Library/Enterprise/js/App/jquery.mousewheel.min.js" +
				"?_=1624989923890";
		String requestHeader0036 = "GET " + requestFile0036 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0036, requestHost0036, requestPort0036, requestHeader0036, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0036 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1392
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [36] <- Index 36
		if(replayMode)
		{
			long proxyDataRecordId =1624989925240L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [37] <- WEB ADMIN Index 46 ---
		String requestProt0037 = "https";
		String requestHost0037 = "cdn.abcsys.com";
		int    requestPort0037 = 443;
		String requestFile0037 = "/Library/Enterprise/js/App/jquery.mCustomScrollbar.js" +
				"?_=1624989923891";
		String requestHeader0037 = "GET " + requestFile0037 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0037, requestHost0037, requestPort0037, requestHeader0037, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0037 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 45599
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [37] <- Index 37
		if(replayMode)
		{
			long proxyDataRecordId =1624989925321L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [38] <- WEB ADMIN Index 47 ---
		String requestProt0038 = "https";
		String requestHost0038 = "cdn.abcsys.com";
		int    requestPort0038 = 443;
		String requestFile0038 = "/Library/Enterprise/js/App/grids.js" +
				"?_=1624989923892";
		String requestHeader0038 = "GET " + requestFile0038 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0038, requestHost0038, requestPort0038, requestHeader0038, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0038 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1891
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [38] <- Index 38
		if(replayMode)
		{
			long proxyDataRecordId =1624989925322L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [39] <- WEB ADMIN Index 48 ---
		String requestProt0039 = "https";
		String requestHost0039 = "cdn.abcsys.com";
		int    requestPort0039 = 443;
		String requestFile0039 = "/Library/Enterprise/js/App/bootstrap.touchspin.js" +
				"?_=1624989923893";
		String requestHeader0039 = "GET " + requestFile0039 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0039, requestHost0039, requestPort0039, requestHeader0039, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0039 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 19011
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [39] <- Index 39
		if(replayMode)
		{
			long proxyDataRecordId =1624989925325L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [40] <- WEB ADMIN Index 49 ---
		String requestProt0040 = "https";
		String requestHost0040 = "cdn.abcsys.com";
		int    requestPort0040 = 443;
		String requestFile0040 = "/Library/Enterprise/AppLibrary/js/Controllers/MainCtrl.js" +
				"?_=1624989923894";
		String requestHeader0040 = "GET " + requestFile0040 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0040, requestHost0040, requestPort0040, requestHeader0040, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0040 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 92216
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [40] <- Index 40
		if(replayMode)
		{
			long proxyDataRecordId =1624989925391L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #1_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #1 (fragment 3 of 8)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [41] <- WEB ADMIN Index 75 ---
		String requestProt0041 = "https";
		String requestHost0041 = "cdn.abcsys.com";
		int    requestPort0041 = 443;
		String requestFile0041 = "/Library/Enterprise/js/angular/angular-animate.js" +
				"?_=1624989925541";
		String requestHeader0041 = "GET " + requestFile0041 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0041, requestHost0041, requestPort0041, requestHeader0041, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0041 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 104195
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [41] <- Index 41
		if(replayMode)
		{
			long proxyDataRecordId =1624989925892L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [42] <- WEB ADMIN Index 76 ---
		String requestProt0042 = "https";
		String requestHost0042 = "cdn.abcsys.com";
		int    requestPort0042 = 443;
		String requestFile0042 = "/Library/Enterprise/js/App/bootstrap.js" +
				"?_=1624989925542";
		String requestHeader0042 = "GET " + requestFile0042 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0042, requestHost0042, requestPort0042, requestHeader0042, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0042 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 77458
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [42] <- Index 42
		if(replayMode)
		{
			long proxyDataRecordId =1624989925928L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [43] <- WEB ADMIN Index 77 ---
		String requestProt0043 = "https";
		String requestHost0043 = "cdn.abcsys.com";
		int    requestPort0043 = 443;
		String requestFile0043 = "/Library/Enterprise/js/App/owl.carousel.min.js" +
				"?_=1624989925543";
		String requestHeader0043 = "GET " + requestFile0043 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0043, requestHost0043, requestPort0043, requestHeader0043, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0043 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15060
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [43] <- Index 43
		if(replayMode)
		{
			long proxyDataRecordId =1624989925953L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [44] <- WEB ADMIN Index 78 ---
		String requestProt0044 = "https";
		String requestHost0044 = "cdn.abcsys.com";
		int    requestPort0044 = 443;
		String requestFile0044 = "/Library/Enterprise/js/App/jquery.parallax-1.1.js" +
				"?_=1624989925544";
		String requestHeader0044 = "GET " + requestFile0044 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0044, requestHost0044, requestPort0044, requestHeader0044, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0044 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2583
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [44] <- Index 44
		if(replayMode)
		{
			long proxyDataRecordId =1624989925961L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [45] <- WEB ADMIN Index 80 ---
		String requestProt0045 = "https";
		String requestHost0045 = "cdn.abcsys.com";
		int    requestPort0045 = 443;
		String requestFile0045 = "/Library/Enterprise/AppLibrary/js/Controllers/controllers.js" +
				"?_=1624989923895";
		String requestHeader0045 = "GET " + requestFile0045 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0045, requestHost0045, requestPort0045, requestHeader0045, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0045 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 12376
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [45] <- Index 45
		if(replayMode)
		{
			long proxyDataRecordId =1624989925974L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [46] <- WEB ADMIN Index 81 ---
		String requestProt0046 = "https";
		String requestHost0046 = "cdn.abcsys.com";
		int    requestPort0046 = 443;
		String requestFile0046 = "/Library/Enterprise/js/app.js" +
				"?_=1624989925545";
		String requestHeader0046 = "GET " + requestFile0046 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0046, requestHost0046, requestPort0046, requestHeader0046, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0046 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 316
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [46] <- Index 46
		if(replayMode)
		{
			long proxyDataRecordId =1624989926078L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [47] <- WEB ADMIN Index 82 ---
		String requestProt0047 = "https";
		String requestHost0047 = "cdn.abcsys.com";
		int    requestPort0047 = 443;
		String requestFile0047 = "/Library/Enterprise/js/inspinia.js" +
				"?_=1624989925546";
		String requestHeader0047 = "GET " + requestFile0047 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0047, requestHost0047, requestPort0047, requestHeader0047, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0047 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1568
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [47] <- Index 47
		if(replayMode)
		{
			long proxyDataRecordId =1624989926080L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [48] <- WEB ADMIN Index 83 ---
		String requestProt0048 = "https";
		String requestHost0048 = "cdn.abcsys.com";
		int    requestPort0048 = 443;
		String requestFile0048 = "/Library/Enterprise/js/App/jquery.cycle2.min.js" +
				"?_=1624989925547";
		String requestHeader0048 = "GET " + requestFile0048 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0048, requestHost0048, requestPort0048, requestHeader0048, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0048 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 22769
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [48] <- Index 48
		if(replayMode)
		{
			long proxyDataRecordId =1624989926083L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [49] <- WEB ADMIN Index 84 ---
		String requestProt0049 = "https";
		String requestHost0049 = "cdn.abcsys.com";
		int    requestPort0049 = 443;
		String requestFile0049 = "/Library/Enterprise/js/App/jquery.easing.1.3.js" +
				"?_=1624989925548";
		String requestHeader0049 = "GET " + requestFile0049 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0049, requestHost0049, requestPort0049, requestHeader0049, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0049 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8301
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [49] <- Index 49
		if(replayMode)
		{
			long proxyDataRecordId =1624989926092L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [50] <- WEB ADMIN Index 85 ---
		String requestProt0050 = "https";
		String requestHost0050 = "cdn.abcsys.com";
		int    requestPort0050 = 443;
		String requestFile0050 = "/Library/Enterprise/js/App/jquery.mousewheel.min.js" +
				"?_=1624989925549";
		String requestHeader0050 = "GET " + requestFile0050 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0050, requestHost0050, requestPort0050, requestHeader0050, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0050 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1392
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [50] <- Index 50
		if(replayMode)
		{
			long proxyDataRecordId =1624989926093L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [51] <- WEB ADMIN Index 86 ---
		String requestProt0051 = "https";
		String requestHost0051 = "cdn.abcsys.com";
		int    requestPort0051 = 443;
		String requestFile0051 = "/Library/Enterprise/js/App/jquery.mCustomScrollbar.js" +
				"?_=1624989925550";
		String requestHeader0051 = "GET " + requestFile0051 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0051, requestHost0051, requestPort0051, requestHeader0051, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0051 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 45599
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [51] <- Index 51
		if(replayMode)
		{
			long proxyDataRecordId =1624989926127L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [52] <- WEB ADMIN Index 87 ---
		String requestProt0052 = "https";
		String requestHost0052 = "cdn.abcsys.com";
		int    requestPort0052 = 443;
		String requestFile0052 = "/Library/Enterprise/js/App/grids.js" +
				"?_=1624989925551";
		String requestHeader0052 = "GET " + requestFile0052 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0052, requestHost0052, requestPort0052, requestHeader0052, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0052 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1891
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [52] <- Index 52
		if(replayMode)
		{
			long proxyDataRecordId =1624989926171L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [53] <- WEB ADMIN Index 88 ---
		String requestProt0053 = "https";
		String requestHost0053 = "cdn.abcsys.com";
		int    requestPort0053 = 443;
		String requestFile0053 = "/Library/Enterprise/js/App/bootstrap.touchspin.js" +
				"?_=1624989925552";
		String requestHeader0053 = "GET " + requestFile0053 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0053, requestHost0053, requestPort0053, requestHeader0053, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0053 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 19011
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [53] <- Index 53
		if(replayMode)
		{
			long proxyDataRecordId =1624989926174L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [54] <- WEB ADMIN Index 89 ---
		String requestProt0054 = "https";
		String requestHost0054 = "cdn.abcsys.com";
		int    requestPort0054 = 443;
		String requestFile0054 = "/Library/Enterprise/AppLibrary/js/Controllers/MainCtrl.js" +
				"?_=1624989925553";
		String requestHeader0054 = "GET " + requestFile0054 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0054, requestHost0054, requestPort0054, requestHeader0054, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0054 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 92216
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [54] <- Index 54
		if(replayMode)
		{
			long proxyDataRecordId =1624989926186L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [55] <- WEB ADMIN Index 90 ---
		String requestProt0055 = "https";
		String requestHost0055 = "cdn.abcsys.com";
		int    requestPort0055 = 443;
		String requestFile0055 = "/Library/Enterprise/AppLibrary/js/Controllers/TrainingVideosCtrl.js" +
				"?_=1624989923896";
		String requestHeader0055 = "GET " + requestFile0055 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0055, requestHost0055, requestPort0055, requestHeader0055, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0055 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3522
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [55] <- Index 55
		if(replayMode)
		{
			long proxyDataRecordId =1624989926191L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [56] <- WEB ADMIN Index 91 ---
		String requestProt0056 = "https";
		String requestHost0056 = "cdn.abcsys.com";
		int    requestPort0056 = 443;
		String requestFile0056 = "/Library/Enterprise/AppLibrary/js/Controllers/AboutCtrl.js" +
				"?_=1624989923897";
		String requestHeader0056 = "GET " + requestFile0056 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0056, requestHost0056, requestPort0056, requestHeader0056, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0056 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 232
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [56] <- Index 56
		if(replayMode)
		{
			long proxyDataRecordId =1624989926289L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [57] <- WEB ADMIN Index 92 ---
		String requestProt0057 = "https";
		String requestHost0057 = "cdn.abcsys.com";
		int    requestPort0057 = 443;
		String requestFile0057 = "/Library/Enterprise/AppLibrary/js/Controllers/CompanyCtrl.js" +
				"?_=1624989923898";
		String requestHeader0057 = "GET " + requestFile0057 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0057, requestHost0057, requestPort0057, requestHeader0057, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0057 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 758
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [57] <- Index 57
		if(replayMode)
		{
			long proxyDataRecordId =1624989926386L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [58] <- WEB ADMIN Index 93 ---
		String requestProt0058 = "https";
		String requestHost0058 = "cdn.abcsys.com";
		int    requestPort0058 = 443;
		String requestFile0058 = "/Library/Enterprise/AppLibrary/js/Controllers/ContactUsCtrl.js" +
				"?_=1624989923899";
		String requestHeader0058 = "GET " + requestFile0058 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0058, requestHost0058, requestPort0058, requestHeader0058, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0058 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1173
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [58] <- Index 58
		if(replayMode)
		{
			long proxyDataRecordId =1624989926479L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [59] <- WEB ADMIN Index 94 ---
		String requestProt0059 = "https";
		String requestHost0059 = "cdn.abcsys.com";
		int    requestPort0059 = 443;
		String requestFile0059 = "/Library/Enterprise/AppLibrary/js/Controllers/DependentsCtrl.js" +
				"?_=1624989923900";
		String requestHeader0059 = "GET " + requestFile0059 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0059, requestHost0059, requestPort0059, requestHeader0059, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0059 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 14321
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [59] <- Index 59
		if(replayMode)
		{
			long proxyDataRecordId =1624989926581L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [60] <- WEB ADMIN Index 95 ---
		String requestProt0060 = "https";
		String requestHost0060 = "cdn.abcsys.com";
		int    requestPort0060 = 443;
		String requestFile0060 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollCtrl.js" +
				"?v=1" +
				"&_=1624989923901";
		String requestHeader0060 = "GET " + requestFile0060 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0060, requestHost0060, requestPort0060, requestHeader0060, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0060 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 226984
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [60] <- Index 60
		if(replayMode)
		{
			long proxyDataRecordId =1624989926677L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #1_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1_3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #1 (fragment 4 of 8)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [61] <- WEB ADMIN Index 97 ---
		String requestProt0061 = "https";
		String requestHost0061 = "cdn.abcsys.com";
		int    requestPort0061 = 443;
		String requestFile0061 = "/Library/Enterprise/AppLibrary/js/Controllers/controllers.js" +
				"?_=1624989925554";
		String requestHeader0061 = "GET " + requestFile0061 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0061, requestHost0061, requestPort0061, requestHeader0061, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0061 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 12376
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [61] <- Index 61
		if(replayMode)
		{
			long proxyDataRecordId =1624989926759L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [62] <- WEB ADMIN Index 98 ---
		String requestProt0062 = "https";
		String requestHost0062 = "cdn.abcsys.com";
		int    requestPort0062 = 443;
		String requestFile0062 = "/Library/Enterprise/AppLibrary/js/Controllers/TrainingVideosCtrl.js" +
				"?_=1624989925555";
		String requestHeader0062 = "GET " + requestFile0062 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0062, requestHost0062, requestPort0062, requestHeader0062, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0062 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3522
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [62] <- Index 62
		if(replayMode)
		{
			long proxyDataRecordId =1624989926867L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [63] <- WEB ADMIN Index 99 ---
		String requestProt0063 = "https";
		String requestHost0063 = "cdn.abcsys.com";
		int    requestPort0063 = 443;
		String requestFile0063 = "/Library/Enterprise/AppLibrary/js/Controllers/AboutCtrl.js" +
				"?_=1624989925556";
		String requestHeader0063 = "GET " + requestFile0063 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0063, requestHost0063, requestPort0063, requestHeader0063, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0063 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 232
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [63] <- Index 63
		if(replayMode)
		{
			long proxyDataRecordId =1624989926963L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [64] <- WEB ADMIN Index 100 ---
		String requestProt0064 = "https";
		String requestHost0064 = "cdn.abcsys.com";
		int    requestPort0064 = 443;
		String requestFile0064 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollmentSummaryCtrl.js" +
				"?_=1624989923902";
		String requestHeader0064 = "GET " + requestFile0064 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0064, requestHost0064, requestPort0064, requestHeader0064, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0064 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 10734
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [64] <- Index 64
		if(replayMode)
		{
			long proxyDataRecordId =1624989926969L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [65] <- WEB ADMIN Index 101 ---
		String requestProt0065 = "https";
		String requestHost0065 = "cdn.abcsys.com";
		int    requestPort0065 = 443;
		String requestFile0065 = "/Library/Enterprise/AppLibrary/js/Controllers/CompanyCtrl.js" +
				"?_=1624989925557";
		String requestHeader0065 = "GET " + requestFile0065 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0065, requestHost0065, requestPort0065, requestHeader0065, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0065 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 758
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [65] <- Index 65
		if(replayMode)
		{
			long proxyDataRecordId =1624989927058L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [66] <- WEB ADMIN Index 102 ---
		String requestProt0066 = "https";
		String requestHost0066 = "cdn.abcsys.com";
		int    requestPort0066 = 443;
		String requestFile0066 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollmentSummary_PrintCtrl.js" +
				"?_=1624989923903";
		String requestHeader0066 = "GET " + requestFile0066 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0066, requestHost0066, requestPort0066, requestHeader0066, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0066 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3907
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [66] <- Index 66
		if(replayMode)
		{
			long proxyDataRecordId =1624989927071L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [67] <- WEB ADMIN Index 103 ---
		String requestProt0067 = "https";
		String requestHost0067 = "cdn.abcsys.com";
		int    requestPort0067 = 443;
		String requestFile0067 = "/Library/Enterprise/AppLibrary/js/Controllers/ContactUsCtrl.js" +
				"?_=1624989925558";
		String requestHeader0067 = "GET " + requestFile0067 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0067, requestHost0067, requestPort0067, requestHeader0067, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0067 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1173
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [67] <- Index 67
		if(replayMode)
		{
			long proxyDataRecordId =1624989927159L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [68] <- WEB ADMIN Index 104 ---
		String requestProt0068 = "https";
		String requestHost0068 = "cdn.abcsys.com";
		int    requestPort0068 = 443;
		String requestFile0068 = "/Library/Enterprise/AppLibrary/js/Controllers/Error404Ctrl.js" +
				"?_=1624989923904";
		String requestHeader0068 = "GET " + requestFile0068 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0068, requestHost0068, requestPort0068, requestHeader0068, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0068 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 338
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [68] <- Index 68
		if(replayMode)
		{
			long proxyDataRecordId =1624989927174L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [69] <- WEB ADMIN Index 105 ---
		String requestProt0069 = "https";
		String requestHost0069 = "cdn.abcsys.com";
		int    requestPort0069 = 443;
		String requestFile0069 = "/Library/Enterprise/AppLibrary/js/Controllers/DependentsCtrl.js" +
				"?_=1624989925559";
		String requestHeader0069 = "GET " + requestFile0069 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0069, requestHost0069, requestPort0069, requestHeader0069, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0069 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 14321
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [69] <- Index 69
		if(replayMode)
		{
			long proxyDataRecordId =1624989927275L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [70] <- WEB ADMIN Index 107 ---
		String requestProt0070 = "https";
		String requestHost0070 = "cdn.abcsys.com";
		int    requestPort0070 = 443;
		String requestFile0070 = "/Library/Enterprise/AppLibrary/js/Controllers/LoginCtrl.js" +
				"?_=1624989923906";
		String requestHeader0070 = "GET " + requestFile0070 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0070, requestHost0070, requestPort0070, requestHeader0070, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0070 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15880
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [70] <- Index 70
		if(replayMode)
		{
			long proxyDataRecordId =1624989927403L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [71] <- WEB ADMIN Index 108 ---
		String requestProt0071 = "https";
		String requestHost0071 = "cdn.abcsys.com";
		int    requestPort0071 = 443;
		String requestFile0071 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollCtrl.js" +
				"?v=1" +
				"&_=1624989925560";
		String requestHeader0071 = "GET " + requestFile0071 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0071, requestHost0071, requestPort0071, requestHeader0071, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0071 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 226984
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [71] <- Index 71
		if(replayMode)
		{
			long proxyDataRecordId =1624989927407L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [72] <- WEB ADMIN Index 109 ---
		String requestProt0072 = "https";
		String requestHost0072 = "cdn.abcsys.com";
		int    requestPort0072 = 443;
		String requestFile0072 = "/Library/Enterprise/AppLibrary/js/Controllers/PayrollDeductionCtrl.js" +
				"?_=1624989923907";
		String requestHeader0072 = "GET " + requestFile0072 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0072, requestHost0072, requestPort0072, requestHeader0072, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0072 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2580
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [72] <- Index 72
		if(replayMode)
		{
			long proxyDataRecordId =1624989927509L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [73] <- WEB ADMIN Index 110 ---
		String requestProt0073 = "https";
		String requestHost0073 = "cdn.abcsys.com";
		int    requestPort0073 = 443;
		String requestFile0073 = "/Library/Enterprise/AppLibrary/js/Controllers/ProductCtrl.js" +
				"?_=1624989923908";
		String requestHeader0073 = "GET " + requestFile0073 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0073, requestHost0073, requestPort0073, requestHeader0073, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0073 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 36391
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [73] <- Index 73
		if(replayMode)
		{
			long proxyDataRecordId =1624989927622L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [74] <- WEB ADMIN Index 111 ---
		String requestProt0074 = "https";
		String requestHost0074 = "cdn.abcsys.com";
		int    requestPort0074 = 443;
		String requestFile0074 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollmentSummaryCtrl.js" +
				"?_=1624989925561";
		String requestHeader0074 = "GET " + requestFile0074 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0074, requestHost0074, requestPort0074, requestHeader0074, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0074 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 10734
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [74] <- Index 74
		if(replayMode)
		{
			long proxyDataRecordId =1624989927708L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [75] <- WEB ADMIN Index 112 ---
		String requestProt0075 = "https";
		String requestHost0075 = "cdn.abcsys.com";
		int    requestPort0075 = 443;
		String requestFile0075 = "/Library/Enterprise/AppLibrary/js/Controllers/ProfileCtrl.js" +
				"?_=1624989923909";
		String requestHeader0075 = "GET " + requestFile0075 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0075, requestHost0075, requestPort0075, requestHeader0075, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0075 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15041
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [75] <- Index 75
		if(replayMode)
		{
			long proxyDataRecordId =1624989927728L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [76] <- WEB ADMIN Index 113 ---
		String requestProt0076 = "https";
		String requestHost0076 = "cdn.abcsys.com";
		int    requestPort0076 = 443;
		String requestFile0076 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollmentSummary_PrintCtrl.js" +
				"?_=1624989925562";
		String requestHeader0076 = "GET " + requestFile0076 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0076, requestHost0076, requestPort0076, requestHeader0076, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0076 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3907
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [76] <- Index 76
		if(replayMode)
		{
			long proxyDataRecordId =1624989927828L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [77] <- WEB ADMIN Index 114 ---
		String requestProt0077 = "https";
		String requestHost0077 = "cdn.abcsys.com";
		int    requestPort0077 = 443;
		String requestFile0077 = "/Library/Enterprise/AppLibrary/js/Controllers/RegisterCtrl.js" +
				"?_=1624989923910";
		String requestHeader0077 = "GET " + requestFile0077 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0077, requestHost0077, requestPort0077, requestHeader0077, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0077 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 18034
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [77] <- Index 77
		if(replayMode)
		{
			long proxyDataRecordId =1624989927834L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [78] <- WEB ADMIN Index 115 ---
		String requestProt0078 = "https";
		String requestHost0078 = "cdn.abcsys.com";
		int    requestPort0078 = 443;
		String requestFile0078 = "/Library/Enterprise/AppLibrary/js/Controllers/Error404Ctrl.js" +
				"?_=1624989925563";
		String requestHeader0078 = "GET " + requestFile0078 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0078, requestHost0078, requestPort0078, requestHeader0078, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0078 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 338
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [78] <- Index 78
		if(replayMode)
		{
			long proxyDataRecordId =1624989927945L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [79] <- WEB ADMIN Index 116 ---
		String requestProt0079 = "https";
		String requestHost0079 = "cdn.abcsys.com";
		int    requestPort0079 = 443;
		String requestFile0079 = "/Library/Enterprise/AppLibrary/js/Controllers/ResetPwdCtrl.js" +
				"?_=1624989923911";
		String requestHeader0079 = "GET " + requestFile0079 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0079, requestHost0079, requestPort0079, requestHeader0079, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0079 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4283
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [79] <- Index 79
		if(replayMode)
		{
			long proxyDataRecordId =1624989927951L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [80] <- WEB ADMIN Index 118 ---
		String requestProt0080 = "https";
		String requestHost0080 = "cdn.abcsys.com";
		int    requestPort0080 = 443;
		String requestFile0080 = "/Library/Enterprise/AppLibrary/js/Controllers/ResetUidPwdCtrl.js" +
				"?_=1624989923912";
		String requestHeader0080 = "GET " + requestFile0080 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0080, requestHost0080, requestPort0080, requestHeader0080, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0080 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6409
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [80] <- Index 80
		if(replayMode)
		{
			long proxyDataRecordId =1624989928087L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #1_3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1_4.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #1 (fragment 5 of 8)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [81] <- WEB ADMIN Index 119 ---
		String requestProt0081 = "https";
		String requestHost0081 = "cdn.abcsys.com";
		int    requestPort0081 = 443;
		String requestFile0081 = "/Library/Enterprise/AppLibrary/js/Controllers/LoginCtrl.js" +
				"?_=1624989925565";
		String requestHeader0081 = "GET " + requestFile0081 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0081, requestHost0081, requestPort0081, requestHeader0081, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0081 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15880
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [81] <- Index 81
		if(replayMode)
		{
			long proxyDataRecordId =1624989928185L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [82] <- WEB ADMIN Index 120 ---
		String requestProt0082 = "https";
		String requestHost0082 = "cdn.abcsys.com";
		int    requestPort0082 = 443;
		String requestFile0082 = "/Library/Enterprise/AppLibrary/js/Controllers/ThirdPartyPage.js" +
				"?_=1624989923913";
		String requestHeader0082 = "GET " + requestFile0082 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0082, requestHost0082, requestPort0082, requestHeader0082, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0082 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1047
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [82] <- Index 82
		if(replayMode)
		{
			long proxyDataRecordId =1624989928190L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [83] <- WEB ADMIN Index 121 ---
		String requestProt0083 = "https";
		String requestHost0083 = "cdn.abcsys.com";
		int    requestPort0083 = 443;
		String requestFile0083 = "/Library/Enterprise/AppLibrary/js/Controllers/PayrollDeductionCtrl.js" +
				"?_=1624989925566";
		String requestHeader0083 = "GET " + requestFile0083 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0083, requestHost0083, requestPort0083, requestHeader0083, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0083 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2580
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [83] <- Index 83
		if(replayMode)
		{
			long proxyDataRecordId =1624989928289L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [84] <- WEB ADMIN Index 122 ---
		String requestProt0084 = "https";
		String requestHost0084 = "cdn.abcsys.com";
		int    requestPort0084 = 443;
		String requestFile0084 = "/Library/Enterprise/AppLibrary/js/Controllers/SSOCtrl.js" +
				"?_=1624989923914";
		String requestHeader0084 = "GET " + requestFile0084 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0084, requestHost0084, requestPort0084, requestHeader0084, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0084 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6537
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [84] <- Index 84
		if(replayMode)
		{
			long proxyDataRecordId =1624989928293L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [85] <- WEB ADMIN Index 123 ---
		String requestProt0085 = "https";
		String requestHost0085 = "cdn.abcsys.com";
		int    requestPort0085 = 443;
		String requestFile0085 = "/Library/Enterprise/AppLibrary/js/Controllers/ProductCtrl.js" +
				"?_=1624989925567";
		String requestHeader0085 = "GET " + requestFile0085 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0085, requestHost0085, requestPort0085, requestHeader0085, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0085 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 36391
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [85] <- Index 85
		if(replayMode)
		{
			long proxyDataRecordId =1624989928388L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [86] <- WEB ADMIN Index 124 ---
		String requestProt0086 = "https";
		String requestHost0086 = "cdn.abcsys.com";
		int    requestPort0086 = 443;
		String requestFile0086 = "/Library/Enterprise/AppLibrary/js/Controllers/LifeEventChangeCtrl.js" +
				"?_=1624989923915";
		String requestHeader0086 = "GET " + requestFile0086 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0086, requestHost0086, requestPort0086, requestHeader0086, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0086 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2967
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [86] <- Index 86
		if(replayMode)
		{
			long proxyDataRecordId =1624989928393L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [87] <- WEB ADMIN Index 125 ---
		String requestProt0087 = "https";
		String requestHost0087 = "cdn.abcsys.com";
		int    requestPort0087 = 443;
		String requestFile0087 = "/Library/Enterprise/AppLibrary/js/Controllers/ForceResetCtrl.js" +
				"?_=1624989923916";
		String requestHeader0087 = "GET " + requestFile0087 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0087, requestHost0087, requestPort0087, requestHeader0087, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0087 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3747
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [87] <- Index 87
		if(replayMode)
		{
			long proxyDataRecordId =1624989928508L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [88] <- WEB ADMIN Index 126 ---
		String requestProt0088 = "https";
		String requestHost0088 = "cdn.abcsys.com";
		int    requestPort0088 = 443;
		String requestFile0088 = "/Library/Enterprise/AppLibrary/js/Controllers/ProfileCtrl.js" +
				"?_=1624989925568";
		String requestHeader0088 = "GET " + requestFile0088 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0088, requestHost0088, requestPort0088, requestHeader0088, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0088 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15041
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [88] <- Index 88
		if(replayMode)
		{
			long proxyDataRecordId =1624989928513L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [89] <- WEB ADMIN Index 127 ---
		String requestProt0089 = "https";
		String requestHost0089 = "www.creditsuisseaddedbenefits.com";
		int    requestPort0089 = 443;
		String requestFile0089 = "/views/common/content.html";
		String requestHeader0089 = "GET " + requestFile0089 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: www.creditsuisseaddedbenefits.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"SecuritySessionId: FHORpz69mUWNS5xLB4ppgw\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0089, requestHost0089, requestPort0089, requestHeader0089, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0089 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1580
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [89] <- Index 89
		if(replayMode)
		{
			long proxyDataRecordId =1624989928668L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [90] <- WEB ADMIN Index 137 ---
		log();
		log("# title: Login page");
		String requestProt0090 = "https";
		String requestHost0090 = "www.creditsuisseaddedbenefits.com";
		int    requestPort0090 = 443;
		String requestFile0090 = "/Login.html";
		String requestHeader0090 = "GET " + requestFile0090 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: www.creditsuisseaddedbenefits.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"SecuritySessionId: FHORpz69mUWNS5xLB4ppgw\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0090, requestHost0090, requestPort0090, requestHeader0090, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0090 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 21188
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [90] <- Index 90
		if(replayMode)
		{
			long proxyDataRecordId =1624989928836L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [91] <- WEB ADMIN Index 141 ---
		String requestProt0091 = "https";
		String requestHost0091 = "www.creditsuisseaddedbenefits.com";
		int    requestPort0091 = 443;
		String requestFile0091 = "/views/AddedBenefitsSurvey.html";
		String requestHeader0091 = "GET " + requestFile0091 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: www.creditsuisseaddedbenefits.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"SecuritySessionId: FHORpz69mUWNS5xLB4ppgw\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0091, requestHost0091, requestPort0091, requestHeader0091, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0091 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 2818
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [91] <- Index 91
		if(replayMode)
		{
			long proxyDataRecordId =1624989928846L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [92] <- WEB ADMIN Index 153 ---
		String requestProt0092 = "https";
		String requestHost0092 = "apps.abcsys.com";
		int    requestPort0092 = 443;
		String requestFile0092 = "/EnterpriseWebAPI/api/Security/SecuritySession" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0092 = Lib.replaceTextPattern(requestFile0092, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0092 = "OPTIONS " + requestFile0092 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: POST\r\n" + 
				"Access-Control-Request-Headers: securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0092, requestHost0092, requestPort0092, requestHeader0092, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0092 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [92] <- Index 92
		if(replayMode)
		{
			long proxyDataRecordId =1624989929038L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [93] <- WEB ADMIN Index 158 ---
		String requestProt0093 = "https";
		String requestHost0093 = "cdn.abcsys.com";
		int    requestPort0093 = 443;
		String requestFile0093 = "/Library/Enterprise/AppLibrary/css/ImportFont.css";
		String requestHeader0093 = "GET " + requestFile0093 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0093, requestHost0093, requestPort0093, requestHeader0093, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0093 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 278
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [93] <- Index 93
		if(replayMode)
		{
			long proxyDataRecordId =1624989929138L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [94] <- WEB ADMIN Index 159 ---
		String requestProt0094 = "https";
		String requestHost0094 = "apps.abcsys.com";
		int    requestPort0094 = 443;
		String requestFile0094 = "/EnterpriseWebAPI/api/Security/SecuritySession" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0094 = Lib.replaceTextPattern(requestFile0094, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0094 = "POST " + requestFile0094 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"SecuritySessionId: FHORpz69mUWNS5xLB4ppgw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Content-Length: 0\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0094, requestHost0094, requestPort0094, requestHeader0094, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0094 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 23
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [94] <- Index 94
		if(replayMode)
		{
			long proxyDataRecordId =1624989929156L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [95] <- WEB ADMIN Index 160 ---
		String requestProt0095 = "https";
		String requestHost0095 = "www.creditsuisseaddedbenefits.com";
		int    requestPort0095 = 443;
		String requestFile0095 = "/views/RegisterTerms.html";
		String requestHeader0095 = "GET " + requestFile0095 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: www.creditsuisseaddedbenefits.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"SecuritySessionId: FHORpz69mUWNS5xLB4ppgw\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0095, requestHost0095, requestPort0095, requestHeader0095, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0095 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1186
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [95] <- Index 95
		if(replayMode)
		{
			long proxyDataRecordId =1624989929273L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [96] <- WEB ADMIN Index 162 ---
		String requestProt0096 = "https";
		String requestHost0096 = "cdn.abcsys.com";
		int    requestPort0096 = 443;
		String requestFile0096 = "/Library/Enterprise/js/angular/angular-animate.js" +
				"?_=1624989929071";
		String requestHeader0096 = "GET " + requestFile0096 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0096, requestHost0096, requestPort0096, requestHeader0096, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0096 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 104195
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [96] <- Index 96
		if(replayMode)
		{
			long proxyDataRecordId =1624989929277L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [97] <- WEB ADMIN Index 163 ---
		String requestProt0097 = "https";
		String requestHost0097 = "cdn.abcsys.com";
		int    requestPort0097 = 443;
		String requestFile0097 = "/Library/Enterprise/js/App/bootstrap.js" +
				"?_=1624989929072";
		String requestHeader0097 = "GET " + requestFile0097 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0097, requestHost0097, requestPort0097, requestHeader0097, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0097 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 77458
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [97] <- Index 97
		if(replayMode)
		{
			long proxyDataRecordId =1624989929284L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [98] <- WEB ADMIN Index 164 ---
		String requestProt0098 = "https";
		String requestHost0098 = "cdn.abcsys.com";
		int    requestPort0098 = 443;
		String requestFile0098 = "/Library/Enterprise/js/App/jquery.parallax-1.1.js" +
				"?_=1624989929074";
		String requestHeader0098 = "GET " + requestFile0098 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0098, requestHost0098, requestPort0098, requestHeader0098, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0098 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2583
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [98] <- Index 98
		if(replayMode)
		{
			long proxyDataRecordId =1624989929286L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [99] <- WEB ADMIN Index 165 ---
		String requestProt0099 = "https";
		String requestHost0099 = "cdn.abcsys.com";
		int    requestPort0099 = 443;
		String requestFile0099 = "/Library/Enterprise/js/App/owl.carousel.min.js" +
				"?_=1624989929073";
		String requestHeader0099 = "GET " + requestFile0099 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0099, requestHost0099, requestPort0099, requestHeader0099, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0099 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15060
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [99] <- Index 99
		if(replayMode)
		{
			long proxyDataRecordId =1624989929287L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [100] <- WEB ADMIN Index 166 ---
		log();
		log("# title: 404 - File or directory not found.");
		String requestProt0100 = "https";
		String requestHost0100 = "cdn.abcsys.com";
		int    requestPort0100 = 443;
		String requestFile0100 = "/Library/Enterprise/AppLibrary/css/fonts/fontawesome-webfont.woff" +
				"?v=4.2.0";
		String requestHeader0100 = "GET " + requestFile0100 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://cdn.abcsys.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0100, requestHost0100, requestPort0100, requestHeader0100, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0100 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 404, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 1245
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {404}, null, null, null);		// Test [100] <- Index 100
		if(replayMode)
		{
			long proxyDataRecordId =1624989929295L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #1_4 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1_5.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #1 (fragment 6 of 8)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [101] <- WEB ADMIN Index 167 ---
		String requestProt0101 = "https";
		String requestHost0101 = "cdn.abcsys.com";
		int    requestPort0101 = 443;
		String requestFile0101 = "/Library/Enterprise/js/app.js" +
				"?_=1624989929075";
		String requestHeader0101 = "GET " + requestFile0101 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0101, requestHost0101, requestPort0101, requestHeader0101, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0101 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 316
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [101] <- Index 101
		if(replayMode)
		{
			long proxyDataRecordId =1624989929385L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [102] <- WEB ADMIN Index 168 ---
		String requestProt0102 = "https";
		String requestHost0102 = "apps.abcsys.com";
		int    requestPort0102 = 443;
		String requestFile0102 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0102 = Lib.replaceTextPattern(requestFile0102, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0102 = "OPTIONS " + requestFile0102 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0102, requestHost0102, requestPort0102, requestHeader0102, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0102 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [102] <- Index 102
		if(replayMode)
		{
			long proxyDataRecordId =1624989929388L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [103] <- WEB ADMIN Index 169 ---
		String requestProt0103 = "https";
		String requestHost0103 = "cdn.abcsys.com";
		int    requestPort0103 = 443;
		String requestFile0103 = "/Library/Enterprise/js/inspinia.js" +
				"?_=1624989929076";
		String requestHeader0103 = "GET " + requestFile0103 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0103, requestHost0103, requestPort0103, requestHeader0103, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0103 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1568
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [103] <- Index 103
		if(replayMode)
		{
			long proxyDataRecordId =1624989929392L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [104] <- WEB ADMIN Index 170 ---
		String requestProt0104 = "https";
		String requestHost0104 = "cdn.abcsys.com";
		int    requestPort0104 = 443;
		String requestFile0104 = "/Library/Enterprise/js/App/jquery.cycle2.min.js" +
				"?_=1624989929077";
		String requestHeader0104 = "GET " + requestFile0104 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0104, requestHost0104, requestPort0104, requestHeader0104, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0104 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 22769
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [104] <- Index 104
		if(replayMode)
		{
			long proxyDataRecordId =1624989929393L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [105] <- WEB ADMIN Index 171 ---
		String requestProt0105 = "https";
		String requestHost0105 = "cdn.abcsys.com";
		int    requestPort0105 = 443;
		String requestFile0105 = "/Library/Enterprise/js/App/jquery.easing.1.3.js" +
				"?_=1624989929078";
		String requestHeader0105 = "GET " + requestFile0105 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0105, requestHost0105, requestPort0105, requestHeader0105, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0105 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8301
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [105] <- Index 105
		if(replayMode)
		{
			long proxyDataRecordId =1624989929395L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [106] <- WEB ADMIN Index 172 ---
		String requestProt0106 = "https";
		String requestHost0106 = "apps.abcsys.com";
		int    requestPort0106 = 443;
		String requestFile0106 = "/EnterpriseWebAPI/api/CMS/LoginContent/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0106 = Lib.replaceTextPattern(requestFile0106, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0106 = "OPTIONS " + requestFile0106 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0106, requestHost0106, requestPort0106, requestHeader0106, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0106 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [106] <- Index 106
		if(replayMode)
		{
			long proxyDataRecordId =1624989929397L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [107] <- WEB ADMIN Index 173 ---
		String requestProt0107 = "https";
		String requestHost0107 = "cdn.abcsys.com";
		int    requestPort0107 = 443;
		String requestFile0107 = "/Library/Enterprise/js/App/jquery.mousewheel.min.js" +
				"?_=1624989929079";
		String requestHeader0107 = "GET " + requestFile0107 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0107, requestHost0107, requestPort0107, requestHeader0107, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0107 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1392
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [107] <- Index 107
		if(replayMode)
		{
			long proxyDataRecordId =1624989929466L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [108] <- WEB ADMIN Index 174 ---
		String requestProt0108 = "https";
		String requestHost0108 = "cdn.abcsys.com";
		int    requestPort0108 = 443;
		String requestFile0108 = "/Library/Enterprise/js/App/jquery.mCustomScrollbar.js" +
				"?_=1624989929080";
		String requestHeader0108 = "GET " + requestFile0108 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0108, requestHost0108, requestPort0108, requestHeader0108, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0108 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 45599
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [108] <- Index 108
		if(replayMode)
		{
			long proxyDataRecordId =1624989929477L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [109] <- WEB ADMIN Index 175 ---
		String requestProt0109 = "https";
		String requestHost0109 = "cdn.abcsys.com";
		int    requestPort0109 = 443;
		String requestFile0109 = "/Library/Enterprise/js/App/grids.js" +
				"?_=1624989929081";
		String requestHeader0109 = "GET " + requestFile0109 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0109, requestHost0109, requestPort0109, requestHeader0109, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0109 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1891
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [109] <- Index 109
		if(replayMode)
		{
			long proxyDataRecordId =1624989929487L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [110] <- WEB ADMIN Index 176 ---
		String requestProt0110 = "https";
		String requestHost0110 = "cdn.abcsys.com";
		int    requestPort0110 = 443;
		String requestFile0110 = "/Library/Enterprise/js/App/bootstrap.touchspin.js" +
				"?_=1624989929082";
		String requestHeader0110 = "GET " + requestFile0110 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0110, requestHost0110, requestPort0110, requestHeader0110, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0110 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 19011
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [110] <- Index 110
		if(replayMode)
		{
			long proxyDataRecordId =1624989929492L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [111] <- WEB ADMIN Index 177 ---
		String requestProt0111 = "https";
		String requestHost0111 = "cdn.abcsys.com";
		int    requestPort0111 = 443;
		String requestFile0111 = "/Library/Enterprise/AppLibrary/js/Controllers/MainCtrl.js" +
				"?_=1624989929083";
		String requestHeader0111 = "GET " + requestFile0111 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0111, requestHost0111, requestPort0111, requestHeader0111, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0111 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 92216
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [111] <- Index 111
		if(replayMode)
		{
			long proxyDataRecordId =1624989929571L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [112] <- WEB ADMIN Index 178 ---
		String requestProt0112 = "https";
		String requestHost0112 = "apps.abcsys.com";
		int    requestPort0112 = 443;
		String requestFile0112 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0112 = Lib.replaceTextPattern(requestFile0112, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0112 = "GET " + requestFile0112 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"SecuritySessionId: FHORpz69mUWNS5xLB4ppgw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0112, requestHost0112, requestPort0112, requestHeader0112, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0112 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [112] <- Index 112
		if(replayMode)
		{
			long proxyDataRecordId =1624989929576L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [113] <- WEB ADMIN Index 180 ---
		log();
		log("# title: Terms of Use | American Benefits Consulting");
		String requestProt0113 = "https";
		String requestHost0113 = "cdn.abcsys.com";
		int    requestPort0113 = 443;
		String requestFile0113 = "/Documents/Legal/terms.html";
		String requestHeader0113 = "GET " + requestFile0113 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0113, requestHost0113, requestPort0113, requestHeader0113, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0113 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 14634
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [113] <- Index 113
		if(replayMode)
		{
			long proxyDataRecordId =1624989929587L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [114] <- WEB ADMIN Index 181 ---
		String requestProt0114 = "https";
		String requestHost0114 = "apps.abcsys.com";
		int    requestPort0114 = 443;
		String requestFile0114 = "/EnterpriseWebAPI/api/CMS/LoginContent/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0114 = Lib.replaceTextPattern(requestFile0114, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0114 = "GET " + requestFile0114 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"SecuritySessionId: FHORpz69mUWNS5xLB4ppgw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0114, requestHost0114, requestPort0114, requestHeader0114, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0114 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 257
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [114] <- Index 114
		if(replayMode)
		{
			long proxyDataRecordId =1624989929595L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [115] <- WEB ADMIN Index 182 ---
		String requestProt0115 = "https";
		String requestHost0115 = "cdn.abcsys.com";
		int    requestPort0115 = 443;
		String requestFile0115 = "/Library/Enterprise/AppLibrary/js/Controllers/controllers.js" +
				"?_=1624989929084";
		String requestHeader0115 = "GET " + requestFile0115 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0115, requestHost0115, requestPort0115, requestHeader0115, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0115 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 12376
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [115] <- Index 115
		if(replayMode)
		{
			long proxyDataRecordId =1624989929687L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [116] <- WEB ADMIN Index 183 ---
		String requestProt0116 = "https";
		String requestHost0116 = "cdn.abcsys.com";
		int    requestPort0116 = 443;
		String requestFile0116 = "/Documents/Legal/css/styles.css";
		String requestHeader0116 = "GET " + requestFile0116 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://cdn.abcsys.com/Documents/Legal/terms.html\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0116, requestHost0116, requestPort0116, requestHeader0116, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0116 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 1661
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [116] <- Index 116
		if(replayMode)
		{
			long proxyDataRecordId =1624989929725L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [117] <- WEB ADMIN Index 185 ---
		String requestProt0117 = "https";
		String requestHost0117 = "cdn.abcsys.com";
		int    requestPort0117 = 443;
		String requestFile0117 = "/Library/Enterprise/AppLibrary/js/Controllers/TrainingVideosCtrl.js" +
				"?_=1624989929085";
		String requestHeader0117 = "GET " + requestFile0117 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0117, requestHost0117, requestPort0117, requestHeader0117, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0117 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3522
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [117] <- Index 117
		if(replayMode)
		{
			long proxyDataRecordId =1624989929819L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [118] <- WEB ADMIN Index 187 ---
		String requestProt0118 = "https";
		String requestHost0118 = "cdn.abcsys.com";
		int    requestPort0118 = 443;
		String requestFile0118 = "/Library/Enterprise/AppLibrary/js/Controllers/AboutCtrl.js" +
				"?_=1624989929086";
		String requestHeader0118 = "GET " + requestFile0118 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0118, requestHost0118, requestPort0118, requestHeader0118, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0118 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 232
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [118] <- Index 118
		if(replayMode)
		{
			long proxyDataRecordId =1624989929928L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [119] <- WEB ADMIN Index 189 ---
		String requestProt0119 = "https";
		String requestHost0119 = "cdn.abcsys.com";
		int    requestPort0119 = 443;
		String requestFile0119 = "/Library/Enterprise/AppLibrary/js/Controllers/CompanyCtrl.js" +
				"?_=1624989929087";
		String requestHeader0119 = "GET " + requestFile0119 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0119, requestHost0119, requestPort0119, requestHeader0119, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0119 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 758
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [119] <- Index 119
		if(replayMode)
		{
			long proxyDataRecordId =1624989930019L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [120] <- WEB ADMIN Index 193 ---
		String requestProt0120 = "https";
		String requestHost0120 = "cdn.abcsys.com";
		int    requestPort0120 = 443;
		String requestFile0120 = "/Library/Enterprise/AppLibrary/js/Controllers/ContactUsCtrl.js" +
				"?_=1624989929088";
		String requestHeader0120 = "GET " + requestFile0120 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0120, requestHost0120, requestPort0120, requestHeader0120, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0120 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1173
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [120] <- Index 120
		if(replayMode)
		{
			long proxyDataRecordId =1624989930131L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #1_5 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1_6.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1_6(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #1 (fragment 7 of 8)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [121] <- WEB ADMIN Index 194 ---
		String requestProt0121 = "https";
		String requestHost0121 = "cdn.abcsys.com";
		int    requestPort0121 = 443;
		String requestFile0121 = "/Library/Enterprise/AppLibrary/js/Controllers/DependentsCtrl.js" +
				"?_=1624989929089";
		String requestHeader0121 = "GET " + requestFile0121 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0121, requestHost0121, requestPort0121, requestHeader0121, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0121 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 14321
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [121] <- Index 121
		if(replayMode)
		{
			long proxyDataRecordId =1624989930229L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [122] <- WEB ADMIN Index 195 ---
		String requestProt0122 = "https";
		String requestHost0122 = "cdn.abcsys.com";
		int    requestPort0122 = 443;
		String requestFile0122 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollCtrl.js" +
				"?v=1" +
				"&_=1624989929090";
		String requestHeader0122 = "GET " + requestFile0122 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0122, requestHost0122, requestPort0122, requestHeader0122, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0122 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 226984
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [122] <- Index 122
		if(replayMode)
		{
			long proxyDataRecordId =1624989930322L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [123] <- WEB ADMIN Index 196 ---
		String requestProt0123 = "https";
		String requestHost0123 = "cdn.abcsys.com";
		int    requestPort0123 = 443;
		String requestFile0123 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollmentSummaryCtrl.js" +
				"?_=1624989929091";
		String requestHeader0123 = "GET " + requestFile0123 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0123, requestHost0123, requestPort0123, requestHeader0123, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0123 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 10734
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [123] <- Index 123
		if(replayMode)
		{
			long proxyDataRecordId =1624989930535L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [124] <- WEB ADMIN Index 197 ---
		String requestProt0124 = "https";
		String requestHost0124 = "cdn.abcsys.com";
		int    requestPort0124 = 443;
		String requestFile0124 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollmentSummary_PrintCtrl.js" +
				"?_=1624989929092";
		String requestHeader0124 = "GET " + requestFile0124 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0124, requestHost0124, requestPort0124, requestHeader0124, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0124 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3907
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [124] <- Index 124
		if(replayMode)
		{
			long proxyDataRecordId =1624989930635L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [125] <- WEB ADMIN Index 198 ---
		String requestProt0125 = "https";
		String requestHost0125 = "cdn.abcsys.com";
		int    requestPort0125 = 443;
		String requestFile0125 = "/Library/Enterprise/AppLibrary/js/Controllers/Error404Ctrl.js" +
				"?_=1624989929093";
		String requestHeader0125 = "GET " + requestFile0125 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0125, requestHost0125, requestPort0125, requestHeader0125, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0125 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 338
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [125] <- Index 125
		if(replayMode)
		{
			long proxyDataRecordId =1624989930786L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [126] <- WEB ADMIN Index 200 ---
		String requestProt0126 = "https";
		String requestHost0126 = "cdn.abcsys.com";
		int    requestPort0126 = 443;
		String requestFile0126 = "/Library/Enterprise/AppLibrary/js/Controllers/LoginCtrl.js" +
				"?_=1624989929095";
		String requestHeader0126 = "GET " + requestFile0126 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0126, requestHost0126, requestPort0126, requestHeader0126, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0126 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15880
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [126] <- Index 126
		if(replayMode)
		{
			long proxyDataRecordId =1624989930988L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [127] <- WEB ADMIN Index 201 ---
		String requestProt0127 = "https";
		String requestHost0127 = "cdn.abcsys.com";
		int    requestPort0127 = 443;
		String requestFile0127 = "/Library/Enterprise/AppLibrary/js/Controllers/PayrollDeductionCtrl.js" +
				"?_=1624989929096";
		String requestHeader0127 = "GET " + requestFile0127 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0127, requestHost0127, requestPort0127, requestHeader0127, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0127 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2580
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [127] <- Index 127
		if(replayMode)
		{
			long proxyDataRecordId =1624989931088L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [128] <- WEB ADMIN Index 202 ---
		String requestProt0128 = "https";
		String requestHost0128 = "cdn.abcsys.com";
		int    requestPort0128 = 443;
		String requestFile0128 = "/Library/Enterprise/AppLibrary/js/Controllers/ProductCtrl.js" +
				"?_=1624989929097";
		String requestHeader0128 = "GET " + requestFile0128 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0128, requestHost0128, requestPort0128, requestHeader0128, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0128 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 36391
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [128] <- Index 128
		if(replayMode)
		{
			long proxyDataRecordId =1624989931185L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [129] <- WEB ADMIN Index 203 ---
		String requestProt0129 = "https";
		String requestHost0129 = "cdn.abcsys.com";
		int    requestPort0129 = 443;
		String requestFile0129 = "/Library/Enterprise/AppLibrary/js/Controllers/ProfileCtrl.js" +
				"?_=1624989929098";
		String requestHeader0129 = "GET " + requestFile0129 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0129, requestHost0129, requestPort0129, requestHeader0129, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0129 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15041
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [129] <- Index 129
		if(replayMode)
		{
			long proxyDataRecordId =1624989931298L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [130] <- WEB ADMIN Index 204 ---
		String requestProt0130 = "https";
		String requestHost0130 = "cdn.abcsys.com";
		int    requestPort0130 = 443;
		String requestFile0130 = "/Library/Enterprise/AppLibrary/js/Controllers/RegisterCtrl.js" +
				"?_=1624989929099";
		String requestHeader0130 = "GET " + requestFile0130 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0130, requestHost0130, requestPort0130, requestHeader0130, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0130 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 18034
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [130] <- Index 130
		if(replayMode)
		{
			long proxyDataRecordId =1624989931409L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [131] <- WEB ADMIN Index 205 ---
		String requestProt0131 = "https";
		String requestHost0131 = "cdn.abcsys.com";
		int    requestPort0131 = 443;
		String requestFile0131 = "/Library/Enterprise/AppLibrary/js/Controllers/ResetPwdCtrl.js" +
				"?_=1624989929100";
		String requestHeader0131 = "GET " + requestFile0131 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0131, requestHost0131, requestPort0131, requestHeader0131, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0131 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4283
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [131] <- Index 131
		if(replayMode)
		{
			long proxyDataRecordId =1624989931517L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [132] <- WEB ADMIN Index 206 ---
		String requestProt0132 = "https";
		String requestHost0132 = "cdn.abcsys.com";
		int    requestPort0132 = 443;
		String requestFile0132 = "/Library/Enterprise/AppLibrary/js/Controllers/ResetUidPwdCtrl.js" +
				"?_=1624989929101";
		String requestHeader0132 = "GET " + requestFile0132 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0132, requestHost0132, requestPort0132, requestHeader0132, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0132 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6409
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [132] <- Index 132
		if(replayMode)
		{
			long proxyDataRecordId =1624989931640L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [133] <- WEB ADMIN Index 207 ---
		String requestProt0133 = "https";
		String requestHost0133 = "cdn.abcsys.com";
		int    requestPort0133 = 443;
		String requestFile0133 = "/Library/Enterprise/AppLibrary/js/Controllers/ThirdPartyPage.js" +
				"?_=1624989929102";
		String requestHeader0133 = "GET " + requestFile0133 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0133, requestHost0133, requestPort0133, requestHeader0133, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0133 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1047
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [133] <- Index 133
		if(replayMode)
		{
			long proxyDataRecordId =1624989931768L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [134] <- WEB ADMIN Index 208 ---
		String requestProt0134 = "https";
		String requestHost0134 = "cdn.abcsys.com";
		int    requestPort0134 = 443;
		String requestFile0134 = "/Library/Enterprise/AppLibrary/js/Controllers/SSOCtrl.js" +
				"?_=1624989929103";
		String requestHeader0134 = "GET " + requestFile0134 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0134, requestHost0134, requestPort0134, requestHeader0134, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0134 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6537
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [134] <- Index 134
		if(replayMode)
		{
			long proxyDataRecordId =1624989931868L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [135] <- WEB ADMIN Index 209 ---
		String requestProt0135 = "https";
		String requestHost0135 = "cdn.abcsys.com";
		int    requestPort0135 = 443;
		String requestFile0135 = "/Library/Enterprise/AppLibrary/js/Controllers/LifeEventChangeCtrl.js" +
				"?_=1624989929104";
		String requestHeader0135 = "GET " + requestFile0135 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0135, requestHost0135, requestPort0135, requestHeader0135, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0135 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2967
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [135] <- Index 135
		if(replayMode)
		{
			long proxyDataRecordId =1624989932152L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [136] <- WEB ADMIN Index 210 ---
		String requestProt0136 = "https";
		String requestHost0136 = "cdn.abcsys.com";
		int    requestPort0136 = 443;
		String requestFile0136 = "/Library/Enterprise/AppLibrary/js/Controllers/ForceResetCtrl.js" +
				"?_=1624989929105";
		String requestHeader0136 = "GET " + requestFile0136 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0136, requestHost0136, requestPort0136, requestHeader0136, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0136 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3747
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [136] <- Index 136
		if(replayMode)
		{
			long proxyDataRecordId =1624989932465L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [137] <- WEB ADMIN Index 212 ---
		String requestProt0137 = "https";
		String requestHost0137 = "www.creditsuisseaddedbenefits.com";
		int    requestPort0137 = 443;
		String requestFile0137 = "/views/Products/Product.html";
		String requestHeader0137 = "GET " + requestFile0137 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: www.creditsuisseaddedbenefits.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0137, requestHost0137, requestPort0137, requestHeader0137, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0137 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 47591
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [137] <- Index 137
		if(replayMode)
		{
			long proxyDataRecordId =1624989932799L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [138] <- WEB ADMIN Index 213 ---
		String requestProt0138 = "https";
		String requestHost0138 = "apps.abcsys.com";
		int    requestPort0138 = 443;
		String requestFile0138 = "/EnterpriseWebAPI/api/Product/ProductContent/e2abaa02-80da-47db-aec8-981392dc655f/null/null";
		requestFile0138 = Lib.replaceTextPattern(requestFile0138, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0138 = "OPTIONS " + requestFile0138 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0138, requestHost0138, requestPort0138, requestHeader0138, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0138 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [138] <- Index 138
		if(replayMode)
		{
			long proxyDataRecordId =1624989933445L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [139] <- WEB ADMIN Index 215 ---
		String requestProt0139 = "https";
		String requestHost0139 = "www.creditsuisseaddedbenefits.com";
		int    requestPort0139 = 443;
		String requestFile0139 = "/views/Partialviews/Product/EligibilityRules.html";
		String requestHeader0139 = "GET " + requestFile0139 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: www.creditsuisseaddedbenefits.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0139, requestHost0139, requestPort0139, requestHeader0139, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0139 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 2867
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [139] <- Index 139
		if(replayMode)
		{
			long proxyDataRecordId =1624989933461L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [140] <- WEB ADMIN Index 216 ---
		String requestProt0140 = "https";
		String requestHost0140 = "www.creditsuisseaddedbenefits.com";
		int    requestPort0140 = 443;
		String requestFile0140 = "/views/Products/RightPane.html";
		String requestHeader0140 = "GET " + requestFile0140 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: www.creditsuisseaddedbenefits.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0140, requestHost0140, requestPort0140, requestHeader0140, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0140 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 5325
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [140] <- Index 140
		if(replayMode)
		{
			long proxyDataRecordId =1624989933463L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #1_6 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1_7.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1_7(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #1 (fragment 8 of 8)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [141] <- WEB ADMIN Index 217 ---
		String requestProt0141 = "https";
		String requestHost0141 = "apps.abcsys.com";
		int    requestPort0141 = 443;
		String requestFile0141 = "/EnterpriseWebAPI/api/Product/ProductContent/e2abaa02-80da-47db-aec8-981392dc655f/null/null";
		requestFile0141 = Lib.replaceTextPattern(requestFile0141, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0141 = "GET " + requestFile0141 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0141, requestHost0141, requestPort0141, requestHeader0141, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0141 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 457
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [141] <- Index 141
		if(replayMode)
		{
			long proxyDataRecordId =1624989933906L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [142] <- WEB ADMIN Index 218 ---
		log();
		log("# title: 404 - File or directory not found.");
		String requestProt0142 = "https";
		String requestHost0142 = "staging.abcsys.com";
		int    requestPort0142 = 443;
		String requestFile0142 = "/Medicare/index.html";
		String requestHeader0142 = "GET " + requestFile0142 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: staging.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0142, requestHost0142, requestPort0142, requestHeader0142, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0142 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 404, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 1245
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {404}, null, null, null);		// Test [142] <- Index 142
		if(replayMode)
		{
			long proxyDataRecordId =1624989934829L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #1_7 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #2: Login
		// # --------------



		// --- HTTP REQUEST: Test [144] <- WEB ADMIN Index 220 ---
		String requestProt0144 = "https";
		String requestHost0144 = "apps.abcsys.com";
		int    requestPort0144 = 443;
		String requestFile0144 = "/EnterpriseWebAPI/api/token";
		String requestHeader0144 = "OPTIONS " + requestFile0144 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: POST\r\n" + 
				"Access-Control-Request-Headers: securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0144, requestHost0144, requestPort0144, requestHeader0144, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0144 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [144] <- Index 144
		if(replayMode)
		{
			long proxyDataRecordId =1624989943050L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [145] <- WEB ADMIN Index 221 ---
		String requestProt0145 = "https";
		String requestHost0145 = "apps.abcsys.com";
		int    requestPort0145 = 443;
		String requestFile0145 = "/EnterpriseWebAPI/api/token";
		String requestContent0145 = 
				"grant_type=password" +
				"&username=JohnDoe1" +
				"&password=Password1" +
				"&clientid=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&appcode=EnrollmentMMWeb";
		requestContent0145 = ReplaceVarPattern.replaceVarPatternWithVarName(requestContent0145, "clientId1", clientId1);
		requestContent0145 = Lib.replaceTextPattern(requestContent0145, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace content fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0145 = "POST " + requestFile0145 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Content-Length: " + requestContent0145.getBytes().length + "\r\n" + 		// Content-Length: 126
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0145, requestHost0145, requestPort0145, requestHeader0145, requestContent0145.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0145 = null;		// support garbage collector to reduce memory
		requestContent0145 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 985
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [145] <- Index 145
		if(replayMode)
		{
			long proxyDataRecordId =1624989943158L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		try
		{
			jsonHtmlBasedExtractor = new JSONHtmlBasedExtractor(testURL.getContentString(), this);
		}
		catch (Exception e)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: malformed XML or JSON data - unable to parse received response content";
			log(errorText);
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'access_oken'
			access_oken = jsonHtmlBasedExtractor.getNodeValue("$.access_token");		// recorded value = nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA
			log("<<< access_oken = " + access_oken);
			loopVarMap.put("access_oken", access_oken);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && access_oken!= null && access_oken.trim().length() == 0)
			{
				access_oken = "";
				log("runtime note: the extraction of a new value for the variable 'access_oken' ends up with an empty string - a substitute value was set");
				log("<<< access_oken = " + access_oken);
				loopVarMap.put("access_oken", access_oken);
			}
		}
		catch (Exception e) { access_oken = null; log(e); }
		if (access_oken == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'access_oken' from json response data";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'refreshtoken'
			refreshtoken = jsonHtmlBasedExtractor.getNodeValue("$.refresh_token");		// recorded value = cd91e04e82d34d9a99eda70931b7c84f
			log("<<< refreshtoken = " + refreshtoken);
			loopVarMap.put("refreshtoken", refreshtoken);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && refreshtoken!= null && refreshtoken.trim().length() == 0)
			{
				refreshtoken = "";
				log("runtime note: the extraction of a new value for the variable 'refreshtoken' ends up with an empty string - a substitute value was set");
				log("<<< refreshtoken = " + refreshtoken);
				loopVarMap.put("refreshtoken", refreshtoken);
			}
		}
		catch (Exception e) { refreshtoken = null; log(e); }
		if (refreshtoken == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'refreshtoken' from json response data";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [146] <- WEB ADMIN Index 222 ---
		String requestProt0146 = "https";
		String requestHost0146 = "apps.abcsys.com";
		int    requestPort0146 = 443;
		String requestFile0146 = "/EnterpriseWebAPI/api/Employee/EmployeeInfo/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0146 = Lib.replaceTextPattern(requestFile0146, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0146 = "OPTIONS " + requestFile0146 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0146, requestHost0146, requestPort0146, requestHeader0146, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0146 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [146] <- Index 146
		if(replayMode)
		{
			long proxyDataRecordId =1624989943621L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [147] <- WEB ADMIN Index 223 ---
		String requestProt0147 = "https";
		String requestHost0147 = "apps.abcsys.com";
		int    requestPort0147 = 443;
		String requestFile0147 = "/EnterpriseWebAPI/api/Employee/EmployeeInfo/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0147 = Lib.replaceTextPattern(requestFile0147, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0147 = "GET " + requestFile0147 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0147, requestHost0147, requestPort0147, requestHeader0147, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0147 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1569
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [147] <- Index 147
		if(replayMode)
		{
			long proxyDataRecordId =1624989943741L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [148] <- WEB ADMIN Index 245 ---
		String requestProt0148 = "https";
		String requestHost0148 = "cdn.abcsys.com";
		int    requestPort0148 = 443;
		String requestFile0148 = "/Library/Enterprise/Content/App/SingleWeb.css";
		String requestHeader0148 = "GET " + requestFile0148 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0148, requestHost0148, requestPort0148, requestHeader0148, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0148 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 10883
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [148] <- Index 148
		if(replayMode)
		{
			long proxyDataRecordId =1624989944488L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [149] <- WEB ADMIN Index 249 ---
		String requestProt0149 = "https";
		String requestHost0149 = "cdn.abcsys.com";
		int    requestPort0149 = 443;
		String requestFile0149 = "/Library/Enterprise/js/App/owl.carousel.min.js" +
				"?_=1624989944175";
		String requestHeader0149 = "GET " + requestFile0149 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0149, requestHost0149, requestPort0149, requestHeader0149, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0149 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15060
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [149] <- Index 149
		if(replayMode)
		{
			long proxyDataRecordId =1624989944681L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [150] <- WEB ADMIN Index 250 ---
		String requestProt0150 = "https";
		String requestHost0150 = "cdn.abcsys.com";
		int    requestPort0150 = 443;
		String requestFile0150 = "/Library/Enterprise/js/App/bootstrap.js" +
				"?_=1624989944174";
		String requestHeader0150 = "GET " + requestFile0150 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0150, requestHost0150, requestPort0150, requestHeader0150, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0150 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 77458
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [150] <- Index 150
		if(replayMode)
		{
			long proxyDataRecordId =1624989944683L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [151] <- WEB ADMIN Index 251 ---
		String requestProt0151 = "https";
		String requestHost0151 = "cdn.abcsys.com";
		int    requestPort0151 = 443;
		String requestFile0151 = "/Library/Enterprise/js/angular/angular-animate.js" +
				"?_=1624989944173";
		String requestHeader0151 = "GET " + requestFile0151 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0151, requestHost0151, requestPort0151, requestHeader0151, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0151 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 104195
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [151] <- Index 151
		if(replayMode)
		{
			long proxyDataRecordId =1624989944684L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [152] <- WEB ADMIN Index 252 ---
		String requestProt0152 = "https";
		String requestHost0152 = "cdn.abcsys.com";
		int    requestPort0152 = 443;
		String requestFile0152 = "/Library/Enterprise/AppLibrary/css/font-awesome.css";
		String requestHeader0152 = "GET " + requestFile0152 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://cdn.abcsys.com/Library/Enterprise/AppLibrary/css/Style.css?v=1.1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0152, requestHost0152, requestPort0152, requestHeader0152, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0152 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 28308
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [152] <- Index 152
		if(replayMode)
		{
			long proxyDataRecordId =1624989944685L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [153] <- WEB ADMIN Index 253 ---
		String requestProt0153 = "https";
		String requestHost0153 = "cdn.abcsys.com";
		int    requestPort0153 = 443;
		String requestFile0153 = "/Library/Enterprise/js/App/jquery.parallax-1.1.js" +
				"?_=1624989944176";
		String requestHeader0153 = "GET " + requestFile0153 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0153, requestHost0153, requestPort0153, requestHeader0153, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0153 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2583
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [153] <- Index 153
		if(replayMode)
		{
			long proxyDataRecordId =1624989944686L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [154] <- WEB ADMIN Index 255 ---
		String requestProt0154 = "https";
		String requestHost0154 = "cdn.abcsys.com";
		int    requestPort0154 = 443;
		String requestFile0154 = "/Library/Enterprise/js/inspinia.js" +
				"?_=1624989944178";
		String requestHeader0154 = "GET " + requestFile0154 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0154, requestHost0154, requestPort0154, requestHeader0154, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0154 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1568
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [154] <- Index 154
		if(replayMode)
		{
			long proxyDataRecordId =1624989944978L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [155] <- WEB ADMIN Index 256 ---
		String requestProt0155 = "https";
		String requestHost0155 = "cdn.abcsys.com";
		int    requestPort0155 = 443;
		String requestFile0155 = "/Library/Enterprise/js/app.js" +
				"?_=1624989944177";
		String requestHeader0155 = "GET " + requestFile0155 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0155, requestHost0155, requestPort0155, requestHeader0155, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0155 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 316
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [155] <- Index 155
		if(replayMode)
		{
			long proxyDataRecordId =1624989944979L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [156] <- WEB ADMIN Index 257 ---
		String requestProt0156 = "https";
		String requestHost0156 = "cdn.abcsys.com";
		int    requestPort0156 = 443;
		String requestFile0156 = "/Library/Enterprise/js/App/jquery.cycle2.min.js" +
				"?_=1624989944179";
		String requestHeader0156 = "GET " + requestFile0156 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0156, requestHost0156, requestPort0156, requestHeader0156, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0156 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 22769
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [156] <- Index 156
		if(replayMode)
		{
			long proxyDataRecordId =1624989944981L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [157] <- WEB ADMIN Index 258 ---
		String requestProt0157 = "https";
		String requestHost0157 = "cdn.abcsys.com";
		int    requestPort0157 = 443;
		String requestFile0157 = "/Library/Enterprise/js/App/jquery.easing.1.3.js" +
				"?_=1624989944180";
		String requestHeader0157 = "GET " + requestFile0157 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0157, requestHost0157, requestPort0157, requestHeader0157, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0157 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8301
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [157] <- Index 157
		if(replayMode)
		{
			long proxyDataRecordId =1624989944999L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [158] <- WEB ADMIN Index 259 ---
		String requestProt0158 = "https";
		String requestHost0158 = "cdn.abcsys.com";
		int    requestPort0158 = 443;
		String requestFile0158 = "/Library/Enterprise/js/App/jquery.mousewheel.min.js" +
				"?_=1624989944181";
		String requestHeader0158 = "GET " + requestFile0158 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0158, requestHost0158, requestPort0158, requestHeader0158, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0158 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1392
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [158] <- Index 158
		if(replayMode)
		{
			long proxyDataRecordId =1624989945000L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [159] <- WEB ADMIN Index 261 ---
		String requestProt0159 = "https";
		String requestHost0159 = "cdn.abcsys.com";
		int    requestPort0159 = 443;
		String requestFile0159 = "/Library/Enterprise/js/App/jquery.mCustomScrollbar.js" +
				"?_=1624989944182";
		String requestHeader0159 = "GET " + requestFile0159 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0159, requestHost0159, requestPort0159, requestHeader0159, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0159 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 45599
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [159] <- Index 159
		if(replayMode)
		{
			long proxyDataRecordId =1624989945111L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [160] <- WEB ADMIN Index 262 ---
		String requestProt0160 = "https";
		String requestHost0160 = "cdn.abcsys.com";
		int    requestPort0160 = 443;
		String requestFile0160 = "/Library/Enterprise/js/App/grids.js" +
				"?_=1624989944183";
		String requestHeader0160 = "GET " + requestFile0160 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0160, requestHost0160, requestPort0160, requestHeader0160, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0160 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1891
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [160] <- Index 160
		if(replayMode)
		{
			long proxyDataRecordId =1624989945152L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [161] <- WEB ADMIN Index 263 ---
		String requestProt0161 = "https";
		String requestHost0161 = "cdn.abcsys.com";
		int    requestPort0161 = 443;
		String requestFile0161 = "/Library/Enterprise/js/App/bootstrap.touchspin.js" +
				"?_=1624989944184";
		String requestHeader0161 = "GET " + requestFile0161 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0161, requestHost0161, requestPort0161, requestHeader0161, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0161 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 19011
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [161] <- Index 161
		if(replayMode)
		{
			long proxyDataRecordId =1624989945161L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [162] <- WEB ADMIN Index 264 ---
		String requestProt0162 = "https";
		String requestHost0162 = "cdn.abcsys.com";
		int    requestPort0162 = 443;
		String requestFile0162 = "/Library/Enterprise/AppLibrary/js/Controllers/MainCtrl.js" +
				"?_=1624989944185";
		String requestHeader0162 = "GET " + requestFile0162 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0162, requestHost0162, requestPort0162, requestHeader0162, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0162 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 92216
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [162] <- Index 162
		if(replayMode)
		{
			long proxyDataRecordId =1624989945162L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [163] <- WEB ADMIN Index 289 ---
		String requestProt0163 = "https";
		String requestHost0163 = "cdn.abcsys.com";
		int    requestPort0163 = 443;
		String requestFile0163 = "/Library/Enterprise/js/angular/angular-animate.js" +
				"?_=1624989945394";
		String requestHeader0163 = "GET " + requestFile0163 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0163, requestHost0163, requestPort0163, requestHeader0163, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0163 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 104195
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [163] <- Index 163
		if(replayMode)
		{
			long proxyDataRecordId =1624989945755L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #2 (fragment 2 of 10)
		// -----------------------------------------



		// --- HTTP REQUEST: Test [164] <- WEB ADMIN Index 290 ---
		String requestProt0164 = "https";
		String requestHost0164 = "cdn.abcsys.com";
		int    requestPort0164 = 443;
		String requestFile0164 = "/Library/Enterprise/js/App/bootstrap.js" +
				"?_=1624989945395";
		String requestHeader0164 = "GET " + requestFile0164 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0164, requestHost0164, requestPort0164, requestHeader0164, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0164 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 77458
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [164] <- Index 164
		if(replayMode)
		{
			long proxyDataRecordId =1624989945763L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [165] <- WEB ADMIN Index 291 ---
		String requestProt0165 = "https";
		String requestHost0165 = "cdn.abcsys.com";
		int    requestPort0165 = 443;
		String requestFile0165 = "/Library/Enterprise/js/App/owl.carousel.min.js" +
				"?_=1624989945396";
		String requestHeader0165 = "GET " + requestFile0165 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0165, requestHost0165, requestPort0165, requestHeader0165, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0165 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15060
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [165] <- Index 165
		if(replayMode)
		{
			long proxyDataRecordId =1624989945783L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [166] <- WEB ADMIN Index 292 ---
		String requestProt0166 = "https";
		String requestHost0166 = "cdn.abcsys.com";
		int    requestPort0166 = 443;
		String requestFile0166 = "/Library/Enterprise/js/App/jquery.parallax-1.1.js" +
				"?_=1624989945397";
		String requestHeader0166 = "GET " + requestFile0166 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0166, requestHost0166, requestPort0166, requestHeader0166, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0166 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2583
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [166] <- Index 166
		if(replayMode)
		{
			long proxyDataRecordId =1624989945818L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [167] <- WEB ADMIN Index 293 ---
		String requestProt0167 = "https";
		String requestHost0167 = "cdn.abcsys.com";
		int    requestPort0167 = 443;
		String requestFile0167 = "/Library/Enterprise/AppLibrary/js/Controllers/controllers.js" +
				"?_=1624989944186";
		String requestHeader0167 = "GET " + requestFile0167 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0167, requestHost0167, requestPort0167, requestHeader0167, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0167 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 12376
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [167] <- Index 167
		if(replayMode)
		{
			long proxyDataRecordId =1624989945823L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [168] <- WEB ADMIN Index 295 ---
		String requestProt0168 = "https";
		String requestHost0168 = "cdn.abcsys.com";
		int    requestPort0168 = 443;
		String requestFile0168 = "/Library/Enterprise/AppLibrary/js/Controllers/TrainingVideosCtrl.js" +
				"?_=1624989944187";
		String requestHeader0168 = "GET " + requestFile0168 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0168, requestHost0168, requestPort0168, requestHeader0168, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0168 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3522
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [168] <- Index 168
		if(replayMode)
		{
			long proxyDataRecordId =1624989945987L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [169] <- WEB ADMIN Index 296 ---
		String requestProt0169 = "https";
		String requestHost0169 = "cdn.abcsys.com";
		int    requestPort0169 = 443;
		String requestFile0169 = "/Library/Enterprise/js/app.js" +
				"?_=1624989945398";
		String requestHeader0169 = "GET " + requestFile0169 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0169, requestHost0169, requestPort0169, requestHeader0169, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0169 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 316
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [169] <- Index 169
		if(replayMode)
		{
			long proxyDataRecordId =1624989945995L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [170] <- WEB ADMIN Index 297 ---
		String requestProt0170 = "https";
		String requestHost0170 = "cdn.abcsys.com";
		int    requestPort0170 = 443;
		String requestFile0170 = "/Library/Enterprise/js/inspinia.js" +
				"?_=1624989945399";
		String requestHeader0170 = "GET " + requestFile0170 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0170, requestHost0170, requestPort0170, requestHeader0170, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0170 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1568
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [170] <- Index 170
		if(replayMode)
		{
			long proxyDataRecordId =1624989945997L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [171] <- WEB ADMIN Index 298 ---
		String requestProt0171 = "https";
		String requestHost0171 = "cdn.abcsys.com";
		int    requestPort0171 = 443;
		String requestFile0171 = "/Library/Enterprise/js/App/jquery.cycle2.min.js" +
				"?_=1624989945400";
		String requestHeader0171 = "GET " + requestFile0171 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0171, requestHost0171, requestPort0171, requestHeader0171, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0171 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 22769
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [171] <- Index 171
		if(replayMode)
		{
			long proxyDataRecordId =1624989946008L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [172] <- WEB ADMIN Index 299 ---
		String requestProt0172 = "https";
		String requestHost0172 = "cdn.abcsys.com";
		int    requestPort0172 = 443;
		String requestFile0172 = "/Library/Enterprise/js/App/jquery.easing.1.3.js" +
				"?_=1624989945401";
		String requestHeader0172 = "GET " + requestFile0172 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0172, requestHost0172, requestPort0172, requestHeader0172, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0172 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8301
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [172] <- Index 172
		if(replayMode)
		{
			long proxyDataRecordId =1624989946017L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [173] <- WEB ADMIN Index 300 ---
		String requestProt0173 = "https";
		String requestHost0173 = "cdn.abcsys.com";
		int    requestPort0173 = 443;
		String requestFile0173 = "/Library/Enterprise/js/App/jquery.mousewheel.min.js" +
				"?_=1624989945402";
		String requestHeader0173 = "GET " + requestFile0173 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0173, requestHost0173, requestPort0173, requestHeader0173, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0173 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1392
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [173] <- Index 173
		if(replayMode)
		{
			long proxyDataRecordId =1624989946089L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [174] <- WEB ADMIN Index 301 ---
		String requestProt0174 = "https";
		String requestHost0174 = "cdn.abcsys.com";
		int    requestPort0174 = 443;
		String requestFile0174 = "/Library/Enterprise/js/App/jquery.mCustomScrollbar.js" +
				"?_=1624989945403";
		String requestHeader0174 = "GET " + requestFile0174 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0174, requestHost0174, requestPort0174, requestHeader0174, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0174 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 45599
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [174] <- Index 174
		if(replayMode)
		{
			long proxyDataRecordId =1624989946099L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [175] <- WEB ADMIN Index 302 ---
		String requestProt0175 = "https";
		String requestHost0175 = "cdn.abcsys.com";
		int    requestPort0175 = 443;
		String requestFile0175 = "/Library/Enterprise/js/App/grids.js" +
				"?_=1624989945404";
		String requestHeader0175 = "GET " + requestFile0175 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0175, requestHost0175, requestPort0175, requestHeader0175, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0175 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1891
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [175] <- Index 175
		if(replayMode)
		{
			long proxyDataRecordId =1624989946113L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [176] <- WEB ADMIN Index 303 ---
		String requestProt0176 = "https";
		String requestHost0176 = "cdn.abcsys.com";
		int    requestPort0176 = 443;
		String requestFile0176 = "/Library/Enterprise/js/App/bootstrap.touchspin.js" +
				"?_=1624989945405";
		String requestHeader0176 = "GET " + requestFile0176 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0176, requestHost0176, requestPort0176, requestHeader0176, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0176 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 19011
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [176] <- Index 176
		if(replayMode)
		{
			long proxyDataRecordId =1624989946130L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [177] <- WEB ADMIN Index 304 ---
		String requestProt0177 = "https";
		String requestHost0177 = "cdn.abcsys.com";
		int    requestPort0177 = 443;
		String requestFile0177 = "/Library/Enterprise/AppLibrary/js/Controllers/MainCtrl.js" +
				"?_=1624989945406";
		String requestHeader0177 = "GET " + requestFile0177 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0177, requestHost0177, requestPort0177, requestHeader0177, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0177 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 92216
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [177] <- Index 177
		if(replayMode)
		{
			long proxyDataRecordId =1624989946202L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [178] <- WEB ADMIN Index 305 ---
		String requestProt0178 = "https";
		String requestHost0178 = "cdn.abcsys.com";
		int    requestPort0178 = 443;
		String requestFile0178 = "/Library/Enterprise/AppLibrary/js/Controllers/AboutCtrl.js" +
				"?_=1624989944188";
		String requestHeader0178 = "GET " + requestFile0178 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0178, requestHost0178, requestPort0178, requestHeader0178, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0178 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 232
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [178] <- Index 178
		if(replayMode)
		{
			long proxyDataRecordId =1624989946214L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [179] <- WEB ADMIN Index 306 ---
		String requestProt0179 = "https";
		String requestHost0179 = "cdn.abcsys.com";
		int    requestPort0179 = 443;
		String requestFile0179 = "/Library/Enterprise/AppLibrary/js/Controllers/CompanyCtrl.js" +
				"?_=1624989944189";
		String requestHeader0179 = "GET " + requestFile0179 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0179, requestHost0179, requestPort0179, requestHeader0179, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0179 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 758
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [179] <- Index 179
		if(replayMode)
		{
			long proxyDataRecordId =1624989946324L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [180] <- WEB ADMIN Index 307 ---
		String requestProt0180 = "https";
		String requestHost0180 = "cdn.abcsys.com";
		int    requestPort0180 = 443;
		String requestFile0180 = "/Library/Enterprise/AppLibrary/js/Controllers/ContactUsCtrl.js" +
				"?_=1624989944190";
		String requestHeader0180 = "GET " + requestFile0180 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0180, requestHost0180, requestPort0180, requestHeader0180, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0180 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1173
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [180] <- Index 180
		if(replayMode)
		{
			long proxyDataRecordId =1624989946458L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [181] <- WEB ADMIN Index 308 ---
		String requestProt0181 = "https";
		String requestHost0181 = "cdn.abcsys.com";
		int    requestPort0181 = 443;
		String requestFile0181 = "/Library/Enterprise/AppLibrary/js/Controllers/DependentsCtrl.js" +
				"?_=1624989944191";
		String requestHeader0181 = "GET " + requestFile0181 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0181, requestHost0181, requestPort0181, requestHeader0181, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0181 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 14321
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [181] <- Index 181
		if(replayMode)
		{
			long proxyDataRecordId =1624989946569L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [182] <- WEB ADMIN Index 309 ---
		String requestProt0182 = "https";
		String requestHost0182 = "cdn.abcsys.com";
		int    requestPort0182 = 443;
		String requestFile0182 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollCtrl.js" +
				"?v=1" +
				"&_=1624989944192";
		String requestHeader0182 = "GET " + requestFile0182 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0182, requestHost0182, requestPort0182, requestHeader0182, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0182 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 226984
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [182] <- Index 182
		if(replayMode)
		{
			long proxyDataRecordId =1624989946682L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [183] <- WEB ADMIN Index 310 ---
		String requestProt0183 = "https";
		String requestHost0183 = "cdn.abcsys.com";
		int    requestPort0183 = 443;
		String requestFile0183 = "/Library/Enterprise/AppLibrary/js/Controllers/controllers.js" +
				"?_=1624989945407";
		String requestHeader0183 = "GET " + requestFile0183 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0183, requestHost0183, requestPort0183, requestHeader0183, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0183 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 12376
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [183] <- Index 183
		if(replayMode)
		{
			long proxyDataRecordId =1624989946768L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #2 (fragment 3 of 10)
		// -----------------------------------------



		// --- HTTP REQUEST: Test [184] <- WEB ADMIN Index 311 ---
		String requestProt0184 = "https";
		String requestHost0184 = "cdn.abcsys.com";
		int    requestPort0184 = 443;
		String requestFile0184 = "/Library/Enterprise/AppLibrary/js/Controllers/TrainingVideosCtrl.js" +
				"?_=1624989945408";
		String requestHeader0184 = "GET " + requestFile0184 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0184, requestHost0184, requestPort0184, requestHeader0184, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0184 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3522
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [184] <- Index 184
		if(replayMode)
		{
			long proxyDataRecordId =1624989946895L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [185] <- WEB ADMIN Index 312 ---
		String requestProt0185 = "https";
		String requestHost0185 = "cdn.abcsys.com";
		int    requestPort0185 = 443;
		String requestFile0185 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollmentSummaryCtrl.js" +
				"?_=1624989944193";
		String requestHeader0185 = "GET " + requestFile0185 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0185, requestHost0185, requestPort0185, requestHeader0185, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0185 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 10734
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [185] <- Index 185
		if(replayMode)
		{
			long proxyDataRecordId =1624989946900L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [186] <- WEB ADMIN Index 313 ---
		String requestProt0186 = "https";
		String requestHost0186 = "cdn.abcsys.com";
		int    requestPort0186 = 443;
		String requestFile0186 = "/Library/Enterprise/AppLibrary/js/Controllers/AboutCtrl.js" +
				"?_=1624989945409";
		String requestHeader0186 = "GET " + requestFile0186 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0186, requestHost0186, requestPort0186, requestHeader0186, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0186 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 232
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [186] <- Index 186
		if(replayMode)
		{
			long proxyDataRecordId =1624989946997L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [187] <- WEB ADMIN Index 314 ---
		String requestProt0187 = "https";
		String requestHost0187 = "cdn.abcsys.com";
		int    requestPort0187 = 443;
		String requestFile0187 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollmentSummary_PrintCtrl.js" +
				"?_=1624989944194";
		String requestHeader0187 = "GET " + requestFile0187 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0187, requestHost0187, requestPort0187, requestHeader0187, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0187 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3907
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [187] <- Index 187
		if(replayMode)
		{
			long proxyDataRecordId =1624989947008L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [188] <- WEB ADMIN Index 315 ---
		String requestProt0188 = "https";
		String requestHost0188 = "cdn.abcsys.com";
		int    requestPort0188 = 443;
		String requestFile0188 = "/Library/Enterprise/AppLibrary/js/Controllers/CompanyCtrl.js" +
				"?_=1624989945410";
		String requestHeader0188 = "GET " + requestFile0188 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0188, requestHost0188, requestPort0188, requestHeader0188, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0188 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 758
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [188] <- Index 188
		if(replayMode)
		{
			long proxyDataRecordId =1624989947093L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [189] <- WEB ADMIN Index 316 ---
		String requestProt0189 = "https";
		String requestHost0189 = "cdn.abcsys.com";
		int    requestPort0189 = 443;
		String requestFile0189 = "/Library/Enterprise/AppLibrary/js/Controllers/Error404Ctrl.js" +
				"?_=1624989944195";
		String requestHeader0189 = "GET " + requestFile0189 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0189, requestHost0189, requestPort0189, requestHeader0189, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0189 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 338
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [189] <- Index 189
		if(replayMode)
		{
			long proxyDataRecordId =1624989947120L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [190] <- WEB ADMIN Index 317 ---
		String requestProt0190 = "https";
		String requestHost0190 = "cdn.abcsys.com";
		int    requestPort0190 = 443;
		String requestFile0190 = "/Library/Enterprise/AppLibrary/js/Controllers/ContactUsCtrl.js" +
				"?_=1624989945411";
		String requestHeader0190 = "GET " + requestFile0190 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0190, requestHost0190, requestPort0190, requestHeader0190, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0190 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1173
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [190] <- Index 190
		if(replayMode)
		{
			long proxyDataRecordId =1624989947198L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [191] <- WEB ADMIN Index 319 ---
		String requestProt0191 = "https";
		String requestHost0191 = "cdn.abcsys.com";
		int    requestPort0191 = 443;
		String requestFile0191 = "/Library/Enterprise/AppLibrary/js/Controllers/DependentsCtrl.js" +
				"?_=1624989945412";
		String requestHeader0191 = "GET " + requestFile0191 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0191, requestHost0191, requestPort0191, requestHeader0191, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0191 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 14321
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [191] <- Index 191
		if(replayMode)
		{
			long proxyDataRecordId =1624989947294L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [192] <- WEB ADMIN Index 320 ---
		String requestProt0192 = "https";
		String requestHost0192 = "cdn.abcsys.com";
		int    requestPort0192 = 443;
		String requestFile0192 = "/Library/Enterprise/AppLibrary/js/Controllers/LoginCtrl.js" +
				"?_=1624989944197";
		String requestHeader0192 = "GET " + requestFile0192 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0192, requestHost0192, requestPort0192, requestHeader0192, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0192 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15880
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [192] <- Index 192
		if(replayMode)
		{
			long proxyDataRecordId =1624989947375L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [193] <- WEB ADMIN Index 321 ---
		String requestProt0193 = "https";
		String requestHost0193 = "cdn.abcsys.com";
		int    requestPort0193 = 443;
		String requestFile0193 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollCtrl.js" +
				"?v=1" +
				"&_=1624989945413";
		String requestHeader0193 = "GET " + requestFile0193 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0193, requestHost0193, requestPort0193, requestHeader0193, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0193 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 226984
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [193] <- Index 193
		if(replayMode)
		{
			long proxyDataRecordId =1624989947479L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [194] <- WEB ADMIN Index 322 ---
		String requestProt0194 = "https";
		String requestHost0194 = "cdn.abcsys.com";
		int    requestPort0194 = 443;
		String requestFile0194 = "/Library/Enterprise/AppLibrary/js/Controllers/PayrollDeductionCtrl.js" +
				"?_=1624989944198";
		String requestHeader0194 = "GET " + requestFile0194 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0194, requestHost0194, requestPort0194, requestHeader0194, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0194 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2580
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [194] <- Index 194
		if(replayMode)
		{
			long proxyDataRecordId =1624989947609L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [195] <- WEB ADMIN Index 323 ---
		String requestProt0195 = "https";
		String requestHost0195 = "cdn.abcsys.com";
		int    requestPort0195 = 443;
		String requestFile0195 = "/Library/Enterprise/AppLibrary/js/Controllers/ProductCtrl.js" +
				"?_=1624989944199";
		String requestHeader0195 = "GET " + requestFile0195 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0195, requestHost0195, requestPort0195, requestHeader0195, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0195 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 36391
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [195] <- Index 195
		if(replayMode)
		{
			long proxyDataRecordId =1624989947749L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [196] <- WEB ADMIN Index 324 ---
		String requestProt0196 = "https";
		String requestHost0196 = "cdn.abcsys.com";
		int    requestPort0196 = 443;
		String requestFile0196 = "/Library/Enterprise/AppLibrary/js/Controllers/ProfileCtrl.js" +
				"?_=1624989944200";
		String requestHeader0196 = "GET " + requestFile0196 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0196, requestHost0196, requestPort0196, requestHeader0196, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0196 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15041
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [196] <- Index 196
		if(replayMode)
		{
			long proxyDataRecordId =1624989947928L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [197] <- WEB ADMIN Index 325 ---
		String requestProt0197 = "https";
		String requestHost0197 = "cdn.abcsys.com";
		int    requestPort0197 = 443;
		String requestFile0197 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollmentSummaryCtrl.js" +
				"?_=1624989945414";
		String requestHeader0197 = "GET " + requestFile0197 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0197, requestHost0197, requestPort0197, requestHeader0197, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0197 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 10734
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [197] <- Index 197
		if(replayMode)
		{
			long proxyDataRecordId =1624989948022L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [198] <- WEB ADMIN Index 326 ---
		String requestProt0198 = "https";
		String requestHost0198 = "cdn.abcsys.com";
		int    requestPort0198 = 443;
		String requestFile0198 = "/Library/Enterprise/AppLibrary/js/Controllers/RegisterCtrl.js" +
				"?_=1624989944201";
		String requestHeader0198 = "GET " + requestFile0198 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0198, requestHost0198, requestPort0198, requestHeader0198, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0198 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 18034
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [198] <- Index 198
		if(replayMode)
		{
			long proxyDataRecordId =1624989948108L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [199] <- WEB ADMIN Index 327 ---
		String requestProt0199 = "https";
		String requestHost0199 = "cdn.abcsys.com";
		int    requestPort0199 = 443;
		String requestFile0199 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollmentSummary_PrintCtrl.js" +
				"?_=1624989945415";
		String requestHeader0199 = "GET " + requestFile0199 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0199, requestHost0199, requestPort0199, requestHeader0199, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0199 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3907
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [199] <- Index 199
		if(replayMode)
		{
			long proxyDataRecordId =1624989948141L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [200] <- WEB ADMIN Index 328 ---
		String requestProt0200 = "https";
		String requestHost0200 = "cdn.abcsys.com";
		int    requestPort0200 = 443;
		String requestFile0200 = "/Library/Enterprise/AppLibrary/js/Controllers/ResetPwdCtrl.js" +
				"?_=1624989944202";
		String requestHeader0200 = "GET " + requestFile0200 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0200, requestHost0200, requestPort0200, requestHeader0200, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0200 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4283
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [200] <- Index 200
		if(replayMode)
		{
			long proxyDataRecordId =1624989948228L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [201] <- WEB ADMIN Index 329 ---
		String requestProt0201 = "https";
		String requestHost0201 = "cdn.abcsys.com";
		int    requestPort0201 = 443;
		String requestFile0201 = "/Library/Enterprise/AppLibrary/js/Controllers/Error404Ctrl.js" +
				"?_=1624989945416";
		String requestHeader0201 = "GET " + requestFile0201 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0201, requestHost0201, requestPort0201, requestHeader0201, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0201 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 338
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [201] <- Index 201
		if(replayMode)
		{
			long proxyDataRecordId =1624989948239L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [202] <- WEB ADMIN Index 330 ---
		String requestProt0202 = "https";
		String requestHost0202 = "cdn.abcsys.com";
		int    requestPort0202 = 443;
		String requestFile0202 = "/Library/Enterprise/AppLibrary/js/Controllers/ResetUidPwdCtrl.js" +
				"?_=1624989944203";
		String requestHeader0202 = "GET " + requestFile0202 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0202, requestHost0202, requestPort0202, requestHeader0202, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0202 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6409
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [202] <- Index 202
		if(replayMode)
		{
			long proxyDataRecordId =1624989948322L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [203] <- WEB ADMIN Index 332 ---
		String requestProt0203 = "https";
		String requestHost0203 = "cdn.abcsys.com";
		int    requestPort0203 = 443;
		String requestFile0203 = "/Library/Enterprise/AppLibrary/js/Controllers/LoginCtrl.js" +
				"?_=1624989945418";
		String requestHeader0203 = "GET " + requestFile0203 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0203, requestHost0203, requestPort0203, requestHeader0203, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0203 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15880
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [203] <- Index 203
		if(replayMode)
		{
			long proxyDataRecordId =1624989948464L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2_3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #2 (fragment 4 of 10)
		// -----------------------------------------



		// --- HTTP REQUEST: Test [204] <- WEB ADMIN Index 333 ---
		String requestProt0204 = "https";
		String requestHost0204 = "cdn.abcsys.com";
		int    requestPort0204 = 443;
		String requestFile0204 = "/Library/Enterprise/AppLibrary/js/Controllers/ThirdPartyPage.js" +
				"?_=1624989944204";
		String requestHeader0204 = "GET " + requestFile0204 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0204, requestHost0204, requestPort0204, requestHeader0204, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0204 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1047
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [204] <- Index 204
		if(replayMode)
		{
			long proxyDataRecordId =1624989948469L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [205] <- WEB ADMIN Index 334 ---
		String requestProt0205 = "https";
		String requestHost0205 = "cdn.abcsys.com";
		int    requestPort0205 = 443;
		String requestFile0205 = "/Library/Enterprise/AppLibrary/js/Controllers/PayrollDeductionCtrl.js" +
				"?_=1624989945419";
		String requestHeader0205 = "GET " + requestFile0205 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0205, requestHost0205, requestPort0205, requestHeader0205, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0205 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2580
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [205] <- Index 205
		if(replayMode)
		{
			long proxyDataRecordId =1624989948659L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [206] <- WEB ADMIN Index 335 ---
		String requestProt0206 = "https";
		String requestHost0206 = "cdn.abcsys.com";
		int    requestPort0206 = 443;
		String requestFile0206 = "/Library/Enterprise/AppLibrary/js/Controllers/SSOCtrl.js" +
				"?_=1624989944205";
		String requestHeader0206 = "GET " + requestFile0206 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0206, requestHost0206, requestPort0206, requestHeader0206, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0206 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6537
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [206] <- Index 206
		if(replayMode)
		{
			long proxyDataRecordId =1624989948681L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [207] <- WEB ADMIN Index 336 ---
		String requestProt0207 = "https";
		String requestHost0207 = "cdn.abcsys.com";
		int    requestPort0207 = 443;
		String requestFile0207 = "/Library/Enterprise/AppLibrary/js/Controllers/ProductCtrl.js" +
				"?_=1624989945420";
		String requestHeader0207 = "GET " + requestFile0207 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0207, requestHost0207, requestPort0207, requestHeader0207, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0207 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 36391
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [207] <- Index 207
		if(replayMode)
		{
			long proxyDataRecordId =1624989948755L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [208] <- WEB ADMIN Index 337 ---
		String requestProt0208 = "https";
		String requestHost0208 = "cdn.abcsys.com";
		int    requestPort0208 = 443;
		String requestFile0208 = "/Library/Enterprise/AppLibrary/js/Controllers/LifeEventChangeCtrl.js" +
				"?_=1624989944206";
		String requestHeader0208 = "GET " + requestFile0208 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0208, requestHost0208, requestPort0208, requestHeader0208, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0208 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2967
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [208] <- Index 208
		if(replayMode)
		{
			long proxyDataRecordId =1624989948853L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [209] <- WEB ADMIN Index 338 ---
		String requestProt0209 = "https";
		String requestHost0209 = "cdn.abcsys.com";
		int    requestPort0209 = 443;
		String requestFile0209 = "/Library/Enterprise/AppLibrary/js/Controllers/ForceResetCtrl.js" +
				"?_=1624989944207";
		String requestHeader0209 = "GET " + requestFile0209 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0209, requestHost0209, requestPort0209, requestHeader0209, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0209 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3747
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [209] <- Index 209
		if(replayMode)
		{
			long proxyDataRecordId =1624989948985L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [210] <- WEB ADMIN Index 339 ---
		String requestProt0210 = "https";
		String requestHost0210 = "cdn.abcsys.com";
		int    requestPort0210 = 443;
		String requestFile0210 = "/Library/Enterprise/AppLibrary/js/Controllers/ProfileCtrl.js" +
				"?_=1624989945421";
		String requestHeader0210 = "GET " + requestFile0210 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0210, requestHost0210, requestPort0210, requestHeader0210, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0210 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15041
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [210] <- Index 210
		if(replayMode)
		{
			long proxyDataRecordId =1624989949026L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [211] <- WEB ADMIN Index 340 ---
		String requestProt0211 = "https";
		String requestHost0211 = "apps.abcsys.com";
		int    requestPort0211 = 443;
		String requestFile0211 = "/EnterpriseWebAPI/api/Enrollment/EnrollmentMessages" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213" +
				"&operationCode=0" +
				"&IsCSREnrollment=0";
		requestFile0211 = Lib.replaceTextPattern(requestFile0211, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0211 = "OPTIONS " + requestFile0211 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0211, requestHost0211, requestPort0211, requestHeader0211, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0211 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [211] <- Index 211
		if(replayMode)
		{
			long proxyDataRecordId =1624989949149L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [212] <- WEB ADMIN Index 342 ---
		String requestProt0212 = "https";
		String requestHost0212 = "www.creditsuisseaddedbenefits.com";
		int    requestPort0212 = 443;
		String requestFile0212 = "/views/index.html";
		String requestHeader0212 = "GET " + requestFile0212 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: www.creditsuisseaddedbenefits.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0212, requestHost0212, requestPort0212, requestHeader0212, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0212 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 20195
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [212] <- Index 212
		if(replayMode)
		{
			long proxyDataRecordId =1624989949162L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [213] <- WEB ADMIN Index 343 ---
		String requestProt0213 = "https";
		String requestHost0213 = "apps.abcsys.com";
		int    requestPort0213 = 443;
		String requestFile0213 = "/EnterpriseWebAPI/api/Enrollment/EnrollmentTemp/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0213 = Lib.replaceTextPattern(requestFile0213, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0213 = "OPTIONS " + requestFile0213 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0213, requestHost0213, requestPort0213, requestHeader0213, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0213 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [213] <- Index 213
		if(replayMode)
		{
			long proxyDataRecordId =1624989949167L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [214] <- WEB ADMIN Index 344 ---
		String requestProt0214 = "https";
		String requestHost0214 = "apps.abcsys.com";
		int    requestPort0214 = 443;
		String requestFile0214 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0214 = Lib.replaceTextPattern(requestFile0214, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0214 = "OPTIONS " + requestFile0214 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0214, requestHost0214, requestPort0214, requestHeader0214, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0214 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [214] <- Index 214
		if(replayMode)
		{
			long proxyDataRecordId =1624989949176L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [215] <- WEB ADMIN Index 354 ---
		String requestProt0215 = "https";
		String requestHost0215 = "apps.abcsys.com";
		int    requestPort0215 = 443;
		String requestFile0215 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0215 = Lib.replaceTextPattern(requestFile0215, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0215 = "OPTIONS " + requestFile0215 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0215, requestHost0215, requestPort0215, requestHeader0215, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0215 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [215] <- Index 215
		if(replayMode)
		{
			long proxyDataRecordId =1624989949290L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [216] <- WEB ADMIN Index 355 ---
		String requestProt0216 = "https";
		String requestHost0216 = "apps.abcsys.com";
		int    requestPort0216 = 443;
		String requestFile0216 = "/EnterpriseWebAPI/api/Enrollment/EnrollmentMessages" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213" +
				"&operationCode=0" +
				"&IsCSREnrollment=0";
		requestFile0216 = Lib.replaceTextPattern(requestFile0216, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0216 = "GET " + requestFile0216 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0216, requestHost0216, requestPort0216, requestHeader0216, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0216 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 15
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [216] <- Index 216
		if(replayMode)
		{
			long proxyDataRecordId =1624989949303L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [217] <- WEB ADMIN Index 356 ---
		String requestProt0217 = "https";
		String requestHost0217 = "apps.abcsys.com";
		int    requestPort0217 = 443;
		String requestFile0217 = "/EnterpriseWebAPI/api/Enrollment/EnrollmentTemp/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0217 = Lib.replaceTextPattern(requestFile0217, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0217 = "GET " + requestFile0217 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0217, requestHost0217, requestPort0217, requestHeader0217, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0217 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 5
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [217] <- Index 217
		if(replayMode)
		{
			long proxyDataRecordId =1624989949306L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [218] <- WEB ADMIN Index 358 ---
		String requestProt0218 = "https";
		String requestHost0218 = "apps.abcsys.com";
		int    requestPort0218 = 443;
		String requestFile0218 = "/EnterpriseWebAPI/api/Enrollment/CollectMissingData/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0218 = Lib.replaceTextPattern(requestFile0218, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0218 = "OPTIONS " + requestFile0218 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0218, requestHost0218, requestPort0218, requestHeader0218, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0218 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [218] <- Index 218
		if(replayMode)
		{
			long proxyDataRecordId =1624989949349L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [219] <- WEB ADMIN Index 360 ---
		String requestProt0219 = "https";
		String requestHost0219 = "apps.abcsys.com";
		int    requestPort0219 = 443;
		String requestFile0219 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0219 = Lib.replaceTextPattern(requestFile0219, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0219 = "OPTIONS " + requestFile0219 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0219, requestHost0219, requestPort0219, requestHeader0219, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0219 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [219] <- Index 219
		if(replayMode)
		{
			long proxyDataRecordId =1624989949354L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [220] <- WEB ADMIN Index 361 ---
		String requestProt0220 = "https";
		String requestHost0220 = "apps.abcsys.com";
		int    requestPort0220 = 443;
		String requestFile0220 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/QuickLinks";
		requestFile0220 = Lib.replaceTextPattern(requestFile0220, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0220 = "OPTIONS " + requestFile0220 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0220, requestHost0220, requestPort0220, requestHeader0220, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0220 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [220] <- Index 220
		if(replayMode)
		{
			long proxyDataRecordId =1624989949355L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [221] <- WEB ADMIN Index 366 ---
		String requestProt0221 = "https";
		String requestHost0221 = "apps.abcsys.com";
		int    requestPort0221 = 443;
		String requestFile0221 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0221 = Lib.replaceTextPattern(requestFile0221, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0221 = "GET " + requestFile0221 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0221, requestHost0221, requestPort0221, requestHeader0221, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0221 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2674
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [221] <- Index 221
		if(replayMode)
		{
			long proxyDataRecordId =1624989949421L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [222] <- WEB ADMIN Index 369 ---
		String requestProt0222 = "https";
		String requestHost0222 = "www.creditsuisseaddedbenefits.com";
		int    requestPort0222 = 443;
		String requestFile0222 = "/views/common/topnavbar.html";
		String requestHeader0222 = "GET " + requestFile0222 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: www.creditsuisseaddedbenefits.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0222, requestHost0222, requestPort0222, requestHeader0222, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0222 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 4787
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [222] <- Index 222
		if(replayMode)
		{
			long proxyDataRecordId =1624989949858L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [223] <- WEB ADMIN Index 370 ---
		String requestProt0223 = "https";
		String requestHost0223 = "www.creditsuisseaddedbenefits.com";
		int    requestPort0223 = 443;
		String requestFile0223 = "/views/common/footer.html";
		String requestHeader0223 = "GET " + requestFile0223 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: www.creditsuisseaddedbenefits.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0223, requestHost0223, requestPort0223, requestHeader0223, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0223 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 3826
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [223] <- Index 223
		if(replayMode)
		{
			long proxyDataRecordId =1624989949859L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2_3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2_4.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #2 (fragment 5 of 10)
		// -----------------------------------------



		// --- HTTP REQUEST: Test [224] <- WEB ADMIN Index 371 ---
		String requestProt0224 = "https";
		String requestHost0224 = "www.creditsuisseaddedbenefits.com";
		int    requestPort0224 = 443;
		String requestFile0224 = "/views/Partialviews/SnackBarMessage.html";
		String requestHeader0224 = "GET " + requestFile0224 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: www.creditsuisseaddedbenefits.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0224, requestHost0224, requestPort0224, requestHeader0224, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0224 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 3091
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [224] <- Index 224
		if(replayMode)
		{
			long proxyDataRecordId =1624989949860L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [225] <- WEB ADMIN Index 374 ---
		String requestProt0225 = "https";
		String requestHost0225 = "apps.abcsys.com";
		int    requestPort0225 = 443;
		String requestFile0225 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0225 = Lib.replaceTextPattern(requestFile0225, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0225 = "GET " + requestFile0225 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0225, requestHost0225, requestPort0225, requestHeader0225, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0225 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2674
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [225] <- Index 225
		if(replayMode)
		{
			long proxyDataRecordId =1624989949870L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [226] <- WEB ADMIN Index 376 ---
		String requestProt0226 = "https";
		String requestHost0226 = "apps.abcsys.com";
		int    requestPort0226 = 443;
		String requestFile0226 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0226 = Lib.replaceTextPattern(requestFile0226, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0226 = "GET " + requestFile0226 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0226, requestHost0226, requestPort0226, requestHeader0226, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0226 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [226] <- Index 226
		if(replayMode)
		{
			long proxyDataRecordId =1624989949875L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [227] <- WEB ADMIN Index 378 ---
		String requestProt0227 = "https";
		String requestHost0227 = "apps.abcsys.com";
		int    requestPort0227 = 443;
		String requestFile0227 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0227 = Lib.replaceTextPattern(requestFile0227, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0227 = "GET " + requestFile0227 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0227, requestHost0227, requestPort0227, requestHeader0227, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0227 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2674
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [227] <- Index 227
		if(replayMode)
		{
			long proxyDataRecordId =1624989949898L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [228] <- WEB ADMIN Index 380 ---
		String requestProt0228 = "https";
		String requestHost0228 = "apps.abcsys.com";
		int    requestPort0228 = 443;
		String requestFile0228 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0228 = Lib.replaceTextPattern(requestFile0228, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0228 = "GET " + requestFile0228 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0228, requestHost0228, requestPort0228, requestHeader0228, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0228 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [228] <- Index 228
		if(replayMode)
		{
			long proxyDataRecordId =1624989949900L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [229] <- WEB ADMIN Index 381 ---
		String requestProt0229 = "https";
		String requestHost0229 = "apps.abcsys.com";
		int    requestPort0229 = 443;
		String requestFile0229 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0229 = Lib.replaceTextPattern(requestFile0229, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0229 = "GET " + requestFile0229 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0229, requestHost0229, requestPort0229, requestHeader0229, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0229 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [229] <- Index 229
		if(replayMode)
		{
			long proxyDataRecordId =1624989949901L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [230] <- WEB ADMIN Index 382 ---
		String requestProt0230 = "https";
		String requestHost0230 = "apps.abcsys.com";
		int    requestPort0230 = 443;
		String requestFile0230 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0230 = Lib.replaceTextPattern(requestFile0230, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0230 = "GET " + requestFile0230 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0230, requestHost0230, requestPort0230, requestHeader0230, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0230 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [230] <- Index 230
		if(replayMode)
		{
			long proxyDataRecordId =1624989949902L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [231] <- WEB ADMIN Index 385 ---
		String requestProt0231 = "https";
		String requestHost0231 = "cdn.abcsys.com";
		int    requestPort0231 = 443;
		String requestFile0231 = "/Library/Enterprise/Content/App/SingleWeb.css";
		String requestHeader0231 = "GET " + requestFile0231 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0231, requestHost0231, requestPort0231, requestHeader0231, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0231 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 10883
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [231] <- Index 231
		if(replayMode)
		{
			long proxyDataRecordId =1624989949973L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [232] <- WEB ADMIN Index 386 ---
		String requestProt0232 = "https";
		String requestHost0232 = "cdn.abcsys.com";
		int    requestPort0232 = 443;
		String requestFile0232 = "/Library/Enterprise/Content/app.css";
		String requestHeader0232 = "GET " + requestFile0232 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0232, requestHost0232, requestPort0232, requestHeader0232, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0232 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 132702
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [232] <- Index 232
		if(replayMode)
		{
			long proxyDataRecordId =1624989949987L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [233] <- WEB ADMIN Index 387 ---
		String requestProt0233 = "https";
		String requestHost0233 = "cdn.abcsys.com";
		int    requestPort0233 = 443;
		String requestFile0233 = "/Library/Enterprise/AppLibrary/css/Style.css" +
				"?v=1.1";
		String requestHeader0233 = "GET " + requestFile0233 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0233, requestHost0233, requestPort0233, requestHeader0233, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0233 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 126321
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [233] <- Index 233
		if(replayMode)
		{
			long proxyDataRecordId =1624989949988L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [234] <- WEB ADMIN Index 388 ---
		String requestProt0234 = "https";
		String requestHost0234 = "apps.abcsys.com";
		int    requestPort0234 = 443;
		String requestFile0234 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0234 = Lib.replaceTextPattern(requestFile0234, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0234 = "GET " + requestFile0234 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0234, requestHost0234, requestPort0234, requestHeader0234, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0234 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [234] <- Index 234
		if(replayMode)
		{
			long proxyDataRecordId =1624989949989L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [235] <- WEB ADMIN Index 389 ---
		String requestProt0235 = "https";
		String requestHost0235 = "cdn.abcsys.com";
		int    requestPort0235 = 443;
		String requestFile0235 = "/Library/Enterprise/js/jquery/jquery-ui.css";
		String requestHeader0235 = "GET " + requestFile0235 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0235, requestHost0235, requestPort0235, requestHeader0235, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0235 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 36435
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [235] <- Index 235
		if(replayMode)
		{
			long proxyDataRecordId =1624989950000L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [236] <- WEB ADMIN Index 390 ---
		log();
		log("# title: 404 - File or directory not found.");
		String requestProt0236 = "https";
		String requestHost0236 = "cdn.abcsys.com";
		int    requestPort0236 = 443;
		String requestFile0236 = "/Library/Enterprise/AppLibrary/css/fonts/fontawesome-webfont.woff" +
				"?v=4.2.0";
		String requestHeader0236 = "GET " + requestFile0236 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://cdn.abcsys.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0236, requestHost0236, requestPort0236, requestHeader0236, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0236 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 404, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 1245
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {404}, null, null, null);		// Test [236] <- Index 236
		if(replayMode)
		{
			long proxyDataRecordId =1624989950015L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [237] <- WEB ADMIN Index 392 ---
		String requestProt0237 = "https";
		String requestHost0237 = "apps.abcsys.com";
		int    requestPort0237 = 443;
		String requestFile0237 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0237 = Lib.replaceTextPattern(requestFile0237, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0237 = "GET " + requestFile0237 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0237, requestHost0237, requestPort0237, requestHeader0237, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0237 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [237] <- Index 237
		if(replayMode)
		{
			long proxyDataRecordId =1624989950032L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [238] <- WEB ADMIN Index 393 ---
		String requestProt0238 = "https";
		String requestHost0238 = "www.creditsuisseaddedbenefits.com";
		int    requestPort0238 = 443;
		String requestFile0238 = "/views/Partialviews/LogoutPopup.html";
		String requestHeader0238 = "GET " + requestFile0238 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: www.creditsuisseaddedbenefits.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0238, requestHost0238, requestPort0238, requestHeader0238, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0238 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 4882
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [238] <- Index 238
		if(replayMode)
		{
			long proxyDataRecordId =1624989950043L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [239] <- WEB ADMIN Index 394 ---
		String requestProt0239 = "https";
		String requestHost0239 = "www.creditsuisseaddedbenefits.com";
		int    requestPort0239 = 443;
		String requestFile0239 = "/views/common/topnavbarclientconfig.html";
		String requestHeader0239 = "GET " + requestFile0239 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: www.creditsuisseaddedbenefits.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0239, requestHost0239, requestPort0239, requestHeader0239, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0239 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 147897
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [239] <- Index 239
		if(replayMode)
		{
			long proxyDataRecordId =1624989950044L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [240] <- WEB ADMIN Index 397 ---
		String requestProt0240 = "https";
		String requestHost0240 = "cdn.abcsys.com";
		int    requestPort0240 = 443;
		String requestFile0240 = "/Documents/Legal/TrustESeal.html";
		String requestHeader0240 = "GET " + requestFile0240 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0240, requestHost0240, requestPort0240, requestHeader0240, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0240 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 273
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [240] <- Index 240
		if(replayMode)
		{
			long proxyDataRecordId =1624989950070L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [241] <- WEB ADMIN Index 398 ---
		String requestProt0241 = "https";
		String requestHost0241 = "cdn.abcsys.com";
		int    requestPort0241 = 443;
		String requestFile0241 = "/Library/Enterprise/js/angular/angular-animate.js" +
				"?_=1624989949385";
		String requestHeader0241 = "GET " + requestFile0241 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0241, requestHost0241, requestPort0241, requestHeader0241, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0241 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 104195
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [241] <- Index 241
		if(replayMode)
		{
			long proxyDataRecordId =1624989950073L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [242] <- WEB ADMIN Index 399 ---
		String requestProt0242 = "https";
		String requestHost0242 = "cdn.abcsys.com";
		int    requestPort0242 = 443;
		String requestFile0242 = "/Library/Enterprise/js/App/bootstrap.js" +
				"?_=1624989949386";
		String requestHeader0242 = "GET " + requestFile0242 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0242, requestHost0242, requestPort0242, requestHeader0242, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0242 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 77458
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [242] <- Index 242
		if(replayMode)
		{
			long proxyDataRecordId =1624989950095L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [243] <- WEB ADMIN Index 400 ---
		String requestProt0243 = "https";
		String requestHost0243 = "apps.abcsys.com";
		int    requestPort0243 = 443;
		String requestFile0243 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/QuickLinks";
		requestFile0243 = Lib.replaceTextPattern(requestFile0243, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0243 = "GET " + requestFile0243 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0243, requestHost0243, requestPort0243, requestHeader0243, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0243 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [243] <- Index 243
		if(replayMode)
		{
			long proxyDataRecordId =1624989950112L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2_4 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2_5.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #2 (fragment 6 of 10)
		// -----------------------------------------



		// --- HTTP REQUEST: Test [244] <- WEB ADMIN Index 401 ---
		String requestProt0244 = "https";
		String requestHost0244 = "apps.abcsys.com";
		int    requestPort0244 = 443;
		String requestFile0244 = "/EnterpriseWebAPI/api/Enrollment/CollectMissingData/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0244 = Lib.replaceTextPattern(requestFile0244, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0244 = "GET " + requestFile0244 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0244, requestHost0244, requestPort0244, requestHeader0244, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0244 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 83
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [244] <- Index 244
		if(replayMode)
		{
			long proxyDataRecordId =1624989950121L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [245] <- WEB ADMIN Index 402 ---
		String requestProt0245 = "https";
		String requestHost0245 = "apps.abcsys.com";
		int    requestPort0245 = 443;
		String requestFile0245 = "/EnterpriseWebAPI/api/Employee/EmployeeInfo/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0245 = Lib.replaceTextPattern(requestFile0245, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0245 = "OPTIONS " + requestFile0245 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0245, requestHost0245, requestPort0245, requestHeader0245, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0245 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [245] <- Index 245
		if(replayMode)
		{
			long proxyDataRecordId =1624989950124L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [246] <- WEB ADMIN Index 403 ---
		String requestProt0246 = "https";
		String requestHost0246 = "apps.abcsys.com";
		int    requestPort0246 = 443;
		String requestFile0246 = "/EnterpriseWebAPI/api/Employee/EmployeeInfo/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0246 = Lib.replaceTextPattern(requestFile0246, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0246 = "OPTIONS " + requestFile0246 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0246, requestHost0246, requestPort0246, requestHeader0246, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0246 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [246] <- Index 246
		if(replayMode)
		{
			long proxyDataRecordId =1624989950136L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [247] <- WEB ADMIN Index 404 ---
		String requestProt0247 = "https";
		String requestHost0247 = "apps.abcsys.com";
		int    requestPort0247 = 443;
		String requestFile0247 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/QuickLinks";
		requestFile0247 = Lib.replaceTextPattern(requestFile0247, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0247 = "OPTIONS " + requestFile0247 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0247, requestHost0247, requestPort0247, requestHeader0247, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0247 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [247] <- Index 247
		if(replayMode)
		{
			long proxyDataRecordId =1624989950188L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [248] <- WEB ADMIN Index 405 ---
		String requestProt0248 = "https";
		String requestHost0248 = "cdn.abcsys.com";
		int    requestPort0248 = 443;
		String requestFile0248 = "/Library/Enterprise/js/App/owl.carousel.min.js" +
				"?_=1624989949387";
		String requestHeader0248 = "GET " + requestFile0248 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0248, requestHost0248, requestPort0248, requestHeader0248, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0248 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15060
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [248] <- Index 248
		if(replayMode)
		{
			long proxyDataRecordId =1624989950196L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [249] <- WEB ADMIN Index 406 ---
		String requestProt0249 = "https";
		String requestHost0249 = "cdn.abcsys.com";
		int    requestPort0249 = 443;
		String requestFile0249 = "/Library/Enterprise/js/App/jquery.parallax-1.1.js" +
				"?_=1624989949388";
		String requestHeader0249 = "GET " + requestFile0249 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0249, requestHost0249, requestPort0249, requestHeader0249, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0249 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2583
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [249] <- Index 249
		if(replayMode)
		{
			long proxyDataRecordId =1624989950207L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [250] <- WEB ADMIN Index 408 ---
		String requestProt0250 = "https";
		String requestHost0250 = "apps.abcsys.com";
		int    requestPort0250 = 443;
		String requestFile0250 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/QuickLinks";
		requestFile0250 = Lib.replaceTextPattern(requestFile0250, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0250 = "GET " + requestFile0250 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0250, requestHost0250, requestPort0250, requestHeader0250, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0250 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [250] <- Index 250
		if(replayMode)
		{
			long proxyDataRecordId =1624989950644L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [251] <- WEB ADMIN Index 409 ---
		String requestProt0251 = "https";
		String requestHost0251 = "apps.abcsys.com";
		int    requestPort0251 = 443;
		String requestFile0251 = "/EnterpriseWebAPI/api/Employee/EmployeeInfo/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0251 = Lib.replaceTextPattern(requestFile0251, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0251 = "OPTIONS " + requestFile0251 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0251, requestHost0251, requestPort0251, requestHeader0251, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0251 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [251] <- Index 251
		if(replayMode)
		{
			long proxyDataRecordId =1624989950651L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [252] <- WEB ADMIN Index 410 ---
		String requestProt0252 = "https";
		String requestHost0252 = "apps.abcsys.com";
		int    requestPort0252 = 443;
		String requestFile0252 = "/EnterpriseWebAPI/api/Enrollment/CollectMissingData/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0252 = Lib.replaceTextPattern(requestFile0252, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0252 = "OPTIONS " + requestFile0252 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0252, requestHost0252, requestPort0252, requestHeader0252, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0252 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [252] <- Index 252
		if(replayMode)
		{
			long proxyDataRecordId =1624989950652L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [253] <- WEB ADMIN Index 411 ---
		String requestProt0253 = "https";
		String requestHost0253 = "apps.abcsys.com";
		int    requestPort0253 = 443;
		String requestFile0253 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/QuickLinks";
		requestFile0253 = Lib.replaceTextPattern(requestFile0253, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0253 = "OPTIONS " + requestFile0253 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0253, requestHost0253, requestPort0253, requestHeader0253, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0253 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [253] <- Index 253
		if(replayMode)
		{
			long proxyDataRecordId =1624989950653L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [254] <- WEB ADMIN Index 412 ---
		String requestProt0254 = "https";
		String requestHost0254 = "apps.abcsys.com";
		int    requestPort0254 = 443;
		String requestFile0254 = "/EnterpriseWebAPI/api/Employee/EmployeeInfo/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0254 = Lib.replaceTextPattern(requestFile0254, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0254 = "GET " + requestFile0254 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0254, requestHost0254, requestPort0254, requestHeader0254, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0254 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1569
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [254] <- Index 254
		if(replayMode)
		{
			long proxyDataRecordId =1624989950654L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [255] <- WEB ADMIN Index 413 ---
		String requestProt0255 = "https";
		String requestHost0255 = "www.creditsuisseaddedbenefits.com";
		int    requestPort0255 = 443;
		String requestFile0255 = "/views/Partialviews/Account/UpdateEmployee.html";
		String requestHeader0255 = "GET " + requestFile0255 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: www.creditsuisseaddedbenefits.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0255, requestHost0255, requestPort0255, requestHeader0255, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0255 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 10492
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [255] <- Index 255
		if(replayMode)
		{
			long proxyDataRecordId =1624989950656L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [256] <- WEB ADMIN Index 414 ---
		String requestProt0256 = "https";
		String requestHost0256 = "apps.abcsys.com";
		int    requestPort0256 = 443;
		String requestFile0256 = "/EnterpriseWebAPI/api/Employee/EmployeeInfo/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0256 = Lib.replaceTextPattern(requestFile0256, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0256 = "GET " + requestFile0256 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0256, requestHost0256, requestPort0256, requestHeader0256, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0256 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1569
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [256] <- Index 256
		if(replayMode)
		{
			long proxyDataRecordId =1624989950658L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [257] <- WEB ADMIN Index 416 ---
		String requestProt0257 = "https";
		String requestHost0257 = "apps.abcsys.com";
		int    requestPort0257 = 443;
		String requestFile0257 = "/EnterpriseWebAPI/api/Enrollment/CollectMissingData/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0257 = Lib.replaceTextPattern(requestFile0257, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0257 = "OPTIONS " + requestFile0257 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0257, requestHost0257, requestPort0257, requestHeader0257, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0257 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [257] <- Index 257
		if(replayMode)
		{
			long proxyDataRecordId =1624989950750L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [258] <- WEB ADMIN Index 418 ---
		String requestProt0258 = "https";
		String requestHost0258 = "apps.abcsys.com";
		int    requestPort0258 = 443;
		String requestFile0258 = "/EnterpriseWebAPI/api/Employee/EmployeeInfo/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0258 = Lib.replaceTextPattern(requestFile0258, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0258 = "GET " + requestFile0258 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0258, requestHost0258, requestPort0258, requestHeader0258, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0258 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1569
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [258] <- Index 258
		if(replayMode)
		{
			long proxyDataRecordId =1624989950759L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [259] <- WEB ADMIN Index 419 ---
		String requestProt0259 = "https";
		String requestHost0259 = "apps.abcsys.com";
		int    requestPort0259 = 443;
		String requestFile0259 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/QuickLinks";
		requestFile0259 = Lib.replaceTextPattern(requestFile0259, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0259 = "GET " + requestFile0259 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0259, requestHost0259, requestPort0259, requestHeader0259, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0259 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [259] <- Index 259
		if(replayMode)
		{
			long proxyDataRecordId =1624989950781L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [260] <- WEB ADMIN Index 420 ---
		String requestProt0260 = "https";
		String requestHost0260 = "apps.abcsys.com";
		int    requestPort0260 = 443;
		String requestFile0260 = "/EnterpriseWebAPI/api/Enrollment/CollectMissingData/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0260 = Lib.replaceTextPattern(requestFile0260, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0260 = "GET " + requestFile0260 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0260, requestHost0260, requestPort0260, requestHeader0260, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0260 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 83
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [260] <- Index 260
		if(replayMode)
		{
			long proxyDataRecordId =1624989950790L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [261] <- WEB ADMIN Index 421 ---
		String requestProt0261 = "https";
		String requestHost0261 = "cdn.abcsys.com";
		int    requestPort0261 = 443;
		String requestFile0261 = "/Library/Enterprise/js/app.js" +
				"?_=1624989949389";
		String requestHeader0261 = "GET " + requestFile0261 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0261, requestHost0261, requestPort0261, requestHeader0261, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0261 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 316
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [261] <- Index 261
		if(replayMode)
		{
			long proxyDataRecordId =1624989950817L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [262] <- WEB ADMIN Index 422 ---
		String requestProt0262 = "https";
		String requestHost0262 = "cdn.abcsys.com";
		int    requestPort0262 = 443;
		String requestFile0262 = "/Library/Enterprise/js/inspinia.js" +
				"?_=1624989949390";
		String requestHeader0262 = "GET " + requestFile0262 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0262, requestHost0262, requestPort0262, requestHeader0262, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0262 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1568
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [262] <- Index 262
		if(replayMode)
		{
			long proxyDataRecordId =1624989950841L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [263] <- WEB ADMIN Index 423 ---
		String requestProt0263 = "https";
		String requestHost0263 = "cdn.abcsys.com";
		int    requestPort0263 = 443;
		String requestFile0263 = "/Library/Enterprise/js/App/jquery.easing.1.3.js" +
				"?_=1624989949392";
		String requestHeader0263 = "GET " + requestFile0263 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0263, requestHost0263, requestPort0263, requestHeader0263, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0263 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8301
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [263] <- Index 263
		if(replayMode)
		{
			long proxyDataRecordId =1624989950842L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2_5 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2_6.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2_6(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #2 (fragment 7 of 10)
		// -----------------------------------------



		// --- HTTP REQUEST: Test [264] <- WEB ADMIN Index 424 ---
		String requestProt0264 = "https";
		String requestHost0264 = "cdn.abcsys.com";
		int    requestPort0264 = 443;
		String requestFile0264 = "/Library/Enterprise/js/App/jquery.cycle2.min.js" +
				"?_=1624989949391";
		String requestHeader0264 = "GET " + requestFile0264 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0264, requestHost0264, requestPort0264, requestHeader0264, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0264 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 22769
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [264] <- Index 264
		if(replayMode)
		{
			long proxyDataRecordId =1624989950850L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [265] <- WEB ADMIN Index 425 ---
		String requestProt0265 = "https";
		String requestHost0265 = "cdn.abcsys.com";
		int    requestPort0265 = 443;
		String requestFile0265 = "/Library/Enterprise/js/App/jquery.mousewheel.min.js" +
				"?_=1624989949393";
		String requestHeader0265 = "GET " + requestFile0265 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0265, requestHost0265, requestPort0265, requestHeader0265, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0265 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1392
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [265] <- Index 265
		if(replayMode)
		{
			long proxyDataRecordId =1624989950855L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [266] <- WEB ADMIN Index 426 ---
		String requestProt0266 = "https";
		String requestHost0266 = "cdn.abcsys.com";
		int    requestPort0266 = 443;
		String requestFile0266 = "/Library/Enterprise/js/App/jquery.mCustomScrollbar.js" +
				"?_=1624989949394";
		String requestHeader0266 = "GET " + requestFile0266 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0266, requestHost0266, requestPort0266, requestHeader0266, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0266 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 45599
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [266] <- Index 266
		if(replayMode)
		{
			long proxyDataRecordId =1624989950861L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [267] <- WEB ADMIN Index 427 ---
		String requestProt0267 = "https";
		String requestHost0267 = "apps.abcsys.com";
		int    requestPort0267 = 443;
		String requestFile0267 = "/EnterpriseWebAPI/api/Product/ProductVendorListPlusLinks/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&linkType=hometilelink";
		requestFile0267 = Lib.replaceTextPattern(requestFile0267, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0267 = "OPTIONS " + requestFile0267 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0267, requestHost0267, requestPort0267, requestHeader0267, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0267 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [267] <- Index 267
		if(replayMode)
		{
			long proxyDataRecordId =1624989950870L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [268] <- WEB ADMIN Index 428 ---
		String requestProt0268 = "https";
		String requestHost0268 = "apps.abcsys.com";
		int    requestPort0268 = 443;
		String requestFile0268 = "/EnterpriseWebAPI/api/Enrollment/CollectMissingData/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0268 = Lib.replaceTextPattern(requestFile0268, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0268 = "GET " + requestFile0268 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0268, requestHost0268, requestPort0268, requestHeader0268, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0268 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 83
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [268] <- Index 268
		if(replayMode)
		{
			long proxyDataRecordId =1624989950903L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [269] <- WEB ADMIN Index 429 ---
		String requestProt0269 = "https";
		String requestHost0269 = "apps.abcsys.com";
		int    requestPort0269 = 443;
		String requestFile0269 = "/EnterpriseWebAPI/api/Product/ProductVendorListPlusLinks/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&linkType=hometilelink";
		requestFile0269 = Lib.replaceTextPattern(requestFile0269, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0269 = "OPTIONS " + requestFile0269 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0269, requestHost0269, requestPort0269, requestHeader0269, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0269 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [269] <- Index 269
		if(replayMode)
		{
			long proxyDataRecordId =1624989950913L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [270] <- WEB ADMIN Index 430 ---
		String requestProt0270 = "https";
		String requestHost0270 = "apps.abcsys.com";
		int    requestPort0270 = 443;
		String requestFile0270 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/null";
		requestFile0270 = Lib.replaceTextPattern(requestFile0270, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0270 = "OPTIONS " + requestFile0270 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0270, requestHost0270, requestPort0270, requestHeader0270, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0270 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [270] <- Index 270
		if(replayMode)
		{
			long proxyDataRecordId =1624989950914L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [271] <- WEB ADMIN Index 431 ---
		String requestProt0271 = "https";
		String requestHost0271 = "apps.abcsys.com";
		int    requestPort0271 = 443;
		String requestFile0271 = "/EnterpriseWebAPI/api/Product/ProductVendorListPlusLinks/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&linkType=hometilelink";
		requestFile0271 = Lib.replaceTextPattern(requestFile0271, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0271 = "OPTIONS " + requestFile0271 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0271, requestHost0271, requestPort0271, requestHeader0271, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0271 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [271] <- Index 271
		if(replayMode)
		{
			long proxyDataRecordId =1624989950941L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [272] <- WEB ADMIN Index 432 ---
		String requestProt0272 = "https";
		String requestHost0272 = "apps.abcsys.com";
		int    requestPort0272 = 443;
		String requestFile0272 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/null";
		requestFile0272 = Lib.replaceTextPattern(requestFile0272, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0272 = "OPTIONS " + requestFile0272 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0272, requestHost0272, requestPort0272, requestHeader0272, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0272 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [272] <- Index 272
		if(replayMode)
		{
			long proxyDataRecordId =1624989950946L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [273] <- WEB ADMIN Index 433 ---
		String requestProt0273 = "https";
		String requestHost0273 = "cdn.abcsys.com";
		int    requestPort0273 = 443;
		String requestFile0273 = "/Library/Enterprise/js/App/grids.js" +
				"?_=1624989949395";
		String requestHeader0273 = "GET " + requestFile0273 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0273, requestHost0273, requestPort0273, requestHeader0273, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0273 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1891
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [273] <- Index 273
		if(replayMode)
		{
			long proxyDataRecordId =1624989950949L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [274] <- WEB ADMIN Index 434 ---
		String requestProt0274 = "https";
		String requestHost0274 = "cdn.abcsys.com";
		int    requestPort0274 = 443;
		String requestFile0274 = "/Library/Enterprise/js/App/bootstrap.touchspin.js" +
				"?_=1624989949396";
		String requestHeader0274 = "GET " + requestFile0274 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0274, requestHost0274, requestPort0274, requestHeader0274, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0274 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 19011
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [274] <- Index 274
		if(replayMode)
		{
			long proxyDataRecordId =1624989950976L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [275] <- WEB ADMIN Index 435 ---
		String requestProt0275 = "https";
		String requestHost0275 = "cdn.abcsys.com";
		int    requestPort0275 = 443;
		String requestFile0275 = "/Library/Enterprise/AppLibrary/js/Controllers/MainCtrl.js" +
				"?_=1624989949397";
		String requestHeader0275 = "GET " + requestFile0275 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0275, requestHost0275, requestPort0275, requestHeader0275, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0275 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 92216
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [275] <- Index 275
		if(replayMode)
		{
			long proxyDataRecordId =1624989950977L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [276] <- WEB ADMIN Index 436 ---
		String requestProt0276 = "https";
		String requestHost0276 = "apps.abcsys.com";
		int    requestPort0276 = 443;
		String requestFile0276 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/null";
		requestFile0276 = Lib.replaceTextPattern(requestFile0276, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0276 = "OPTIONS " + requestFile0276 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0276, requestHost0276, requestPort0276, requestHeader0276, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0276 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [276] <- Index 276
		if(replayMode)
		{
			long proxyDataRecordId =1624989950982L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [277] <- WEB ADMIN Index 437 ---
		String requestProt0277 = "https";
		String requestHost0277 = "apps.abcsys.com";
		int    requestPort0277 = 443;
		String requestFile0277 = "/EnterpriseWebAPI/api/Product/ProductVendorListPlusLinks/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&linkType=hometilelink";
		requestFile0277 = Lib.replaceTextPattern(requestFile0277, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0277 = "GET " + requestFile0277 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0277, requestHost0277, requestPort0277, requestHeader0277, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0277 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 982
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [277] <- Index 277
		if(replayMode)
		{
			long proxyDataRecordId =1624989951027L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [278] <- WEB ADMIN Index 438 ---
		String requestProt0278 = "https";
		String requestHost0278 = "apps.abcsys.com";
		int    requestPort0278 = 443;
		String requestFile0278 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/null";
		requestFile0278 = Lib.replaceTextPattern(requestFile0278, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0278 = "GET " + requestFile0278 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0278, requestHost0278, requestPort0278, requestHeader0278, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0278 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [278] <- Index 278
		if(replayMode)
		{
			long proxyDataRecordId =1624989951028L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [279] <- WEB ADMIN Index 439 ---
		String requestProt0279 = "https";
		String requestHost0279 = "apps.abcsys.com";
		int    requestPort0279 = 443;
		String requestFile0279 = "/EnterpriseWebAPI/api/Product/ProductVendorListPlusLinks/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&linkType=hometilelink";
		requestFile0279 = Lib.replaceTextPattern(requestFile0279, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0279 = "GET " + requestFile0279 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0279, requestHost0279, requestPort0279, requestHeader0279, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0279 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 982
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [279] <- Index 279
		if(replayMode)
		{
			long proxyDataRecordId =1624989951030L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [280] <- WEB ADMIN Index 441 ---
		String requestProt0280 = "https";
		String requestHost0280 = "apps.abcsys.com";
		int    requestPort0280 = 443;
		String requestFile0280 = "/EnterpriseWebAPI/api/CMS/HomeContent/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0280 = Lib.replaceTextPattern(requestFile0280, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0280 = "OPTIONS " + requestFile0280 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0280, requestHost0280, requestPort0280, requestHeader0280, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0280 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [280] <- Index 280
		if(replayMode)
		{
			long proxyDataRecordId =1624989951051L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [281] <- WEB ADMIN Index 442 ---
		String requestProt0281 = "https";
		String requestHost0281 = "apps.abcsys.com";
		int    requestPort0281 = 443;
		String requestFile0281 = "/EnterpriseWebAPI/api/Product/ProductVendorListPlusLinks/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&linkType=hometilelink";
		requestFile0281 = Lib.replaceTextPattern(requestFile0281, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0281 = "GET " + requestFile0281 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0281, requestHost0281, requestPort0281, requestHeader0281, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0281 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 982
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [281] <- Index 281
		if(replayMode)
		{
			long proxyDataRecordId =1624989951061L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [282] <- WEB ADMIN Index 443 ---
		String requestProt0282 = "https";
		String requestHost0282 = "apps.abcsys.com";
		int    requestPort0282 = 443;
		String requestFile0282 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/null";
		requestFile0282 = Lib.replaceTextPattern(requestFile0282, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0282 = "GET " + requestFile0282 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0282, requestHost0282, requestPort0282, requestHeader0282, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0282 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [282] <- Index 282
		if(replayMode)
		{
			long proxyDataRecordId =1624989951115L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [283] <- WEB ADMIN Index 444 ---
		String requestProt0283 = "https";
		String requestHost0283 = "apps.abcsys.com";
		int    requestPort0283 = 443;
		String requestFile0283 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/null";
		requestFile0283 = Lib.replaceTextPattern(requestFile0283, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0283 = "GET " + requestFile0283 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0283, requestHost0283, requestPort0283, requestHeader0283, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0283 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [283] <- Index 283
		if(replayMode)
		{
			long proxyDataRecordId =1624989951162L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2_6 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2_7.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2_7(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #2 (fragment 8 of 10)
		// -----------------------------------------



		// --- HTTP REQUEST: Test [284] <- WEB ADMIN Index 445 ---
		String requestProt0284 = "https";
		String requestHost0284 = "apps.abcsys.com";
		int    requestPort0284 = 443;
		String requestFile0284 = "/EnterpriseWebAPI/api/CMS/HomeContent/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0284 = Lib.replaceTextPattern(requestFile0284, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0284 = "GET " + requestFile0284 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0284, requestHost0284, requestPort0284, requestHeader0284, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0284 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 561
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [284] <- Index 284
		if(replayMode)
		{
			long proxyDataRecordId =1624989951177L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [285] <- WEB ADMIN Index 446 ---
		String requestProt0285 = "https";
		String requestHost0285 = "apps.abcsys.com";
		int    requestPort0285 = 443;
		String requestFile0285 = "/EnterpriseWebAPI/api/CMS/HomeContent/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0285 = Lib.replaceTextPattern(requestFile0285, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0285 = "OPTIONS " + requestFile0285 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0285, requestHost0285, requestPort0285, requestHeader0285, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0285 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [285] <- Index 285
		if(replayMode)
		{
			long proxyDataRecordId =1624989951221L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [286] <- WEB ADMIN Index 447 ---
		String requestProt0286 = "https";
		String requestHost0286 = "apps.abcsys.com";
		int    requestPort0286 = 443;
		String requestFile0286 = "/EnterpriseWebAPI/api/CMS/HomeContent/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0286 = Lib.replaceTextPattern(requestFile0286, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0286 = "OPTIONS " + requestFile0286 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0286, requestHost0286, requestPort0286, requestHeader0286, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0286 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [286] <- Index 286
		if(replayMode)
		{
			long proxyDataRecordId =1624989951275L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [287] <- WEB ADMIN Index 448 ---
		String requestProt0287 = "https";
		String requestHost0287 = "apps.abcsys.com";
		int    requestPort0287 = 443;
		String requestFile0287 = "/EnterpriseWebAPI/api/CMS/HomeContent/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0287 = Lib.replaceTextPattern(requestFile0287, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0287 = "GET " + requestFile0287 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0287, requestHost0287, requestPort0287, requestHeader0287, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0287 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 561
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [287] <- Index 287
		if(replayMode)
		{
			long proxyDataRecordId =1624989951316L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [288] <- WEB ADMIN Index 449 ---
		String requestProt0288 = "https";
		String requestHost0288 = "apps.abcsys.com";
		int    requestPort0288 = 443;
		String requestFile0288 = "/EnterpriseWebAPI/api/CMS/HomeContent/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0288 = Lib.replaceTextPattern(requestFile0288, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0288 = "GET " + requestFile0288 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0288, requestHost0288, requestPort0288, requestHeader0288, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0288 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 561
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [288] <- Index 288
		if(replayMode)
		{
			long proxyDataRecordId =1624989951366L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [289] <- WEB ADMIN Index 450 ---
		String requestProt0289 = "https";
		String requestHost0289 = "cdn.abcsys.com";
		int    requestPort0289 = 443;
		String requestFile0289 = "/Library/Enterprise/AppLibrary/js/Controllers/controllers.js" +
				"?_=1624989949398";
		String requestHeader0289 = "GET " + requestFile0289 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0289, requestHost0289, requestPort0289, requestHeader0289, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0289 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 12376
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [289] <- Index 289
		if(replayMode)
		{
			long proxyDataRecordId =1624989951421L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [290] <- WEB ADMIN Index 452 ---
		String requestProt0290 = "https";
		String requestHost0290 = "apps.abcsys.com";
		int    requestPort0290 = 443;
		String requestFile0290 = "/EnterpriseWebAPI/api/Employee/ValidateLoggedInUserSurveyQuestions/e2abaa02-80da-47db-aec8-981392dc655f/e14a22f5-f444-4222-a9a4-a303a2d6879c/bf69af09-741b-40c1-987f-ec721fdf7213/";
		requestFile0290 = Lib.replaceTextPattern(requestFile0290, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0290 = "OPTIONS " + requestFile0290 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0290, requestHost0290, requestPort0290, requestHeader0290, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0290 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [290] <- Index 290
		if(replayMode)
		{
			long proxyDataRecordId =1624989951471L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [291] <- WEB ADMIN Index 455 ---
		String requestProt0291 = "https";
		String requestHost0291 = "apps.abcsys.com";
		int    requestPort0291 = 443;
		String requestFile0291 = "/EnterpriseWebAPI/api/Employee/ValidateLoggedInUserSurveyQuestions/e2abaa02-80da-47db-aec8-981392dc655f/e14a22f5-f444-4222-a9a4-a303a2d6879c/bf69af09-741b-40c1-987f-ec721fdf7213/";
		requestFile0291 = Lib.replaceTextPattern(requestFile0291, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0291 = "OPTIONS " + requestFile0291 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0291, requestHost0291, requestPort0291, requestHeader0291, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0291 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [291] <- Index 291
		if(replayMode)
		{
			long proxyDataRecordId =1624989951507L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [292] <- WEB ADMIN Index 456 ---
		String requestProt0292 = "https";
		String requestHost0292 = "apps.abcsys.com";
		int    requestPort0292 = 443;
		String requestFile0292 = "/EnterpriseWebAPI/api/Employee/ValidateLoggedInUserSurveyQuestions/e2abaa02-80da-47db-aec8-981392dc655f/e14a22f5-f444-4222-a9a4-a303a2d6879c/bf69af09-741b-40c1-987f-ec721fdf7213/";
		requestFile0292 = Lib.replaceTextPattern(requestFile0292, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0292 = "OPTIONS " + requestFile0292 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0292, requestHost0292, requestPort0292, requestHeader0292, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0292 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [292] <- Index 292
		if(replayMode)
		{
			long proxyDataRecordId =1624989951526L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [293] <- WEB ADMIN Index 457 ---
		String requestProt0293 = "https";
		String requestHost0293 = "cdn.abcsys.com";
		int    requestPort0293 = 443;
		String requestFile0293 = "/Library/Enterprise/AppLibrary/js/Controllers/TrainingVideosCtrl.js" +
				"?_=1624989949399";
		String requestHeader0293 = "GET " + requestFile0293 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0293, requestHost0293, requestPort0293, requestHeader0293, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0293 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3522
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [293] <- Index 293
		if(replayMode)
		{
			long proxyDataRecordId =1624989951539L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [294] <- WEB ADMIN Index 458 ---
		String requestProt0294 = "https";
		String requestHost0294 = "apps.abcsys.com";
		int    requestPort0294 = 443;
		String requestFile0294 = "/EnterpriseWebAPI/api/Employee/ValidateLoggedInUserSurveyQuestions/e2abaa02-80da-47db-aec8-981392dc655f/e14a22f5-f444-4222-a9a4-a303a2d6879c/bf69af09-741b-40c1-987f-ec721fdf7213/";
		requestFile0294 = Lib.replaceTextPattern(requestFile0294, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0294 = "GET " + requestFile0294 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0294, requestHost0294, requestPort0294, requestHeader0294, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0294 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 4
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [294] <- Index 294
		if(replayMode)
		{
			long proxyDataRecordId =1624989951607L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [295] <- WEB ADMIN Index 459 ---
		String requestProt0295 = "https";
		String requestHost0295 = "apps.abcsys.com";
		int    requestPort0295 = 443;
		String requestFile0295 = "/EnterpriseWebAPI/api/Employee/ValidateLoggedInUserSurveyQuestions/e2abaa02-80da-47db-aec8-981392dc655f/e14a22f5-f444-4222-a9a4-a303a2d6879c/bf69af09-741b-40c1-987f-ec721fdf7213/";
		requestFile0295 = Lib.replaceTextPattern(requestFile0295, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0295 = "GET " + requestFile0295 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0295, requestHost0295, requestPort0295, requestHeader0295, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0295 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 4
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [295] <- Index 295
		if(replayMode)
		{
			long proxyDataRecordId =1624989951613L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [296] <- WEB ADMIN Index 460 ---
		String requestProt0296 = "https";
		String requestHost0296 = "apps.abcsys.com";
		int    requestPort0296 = 443;
		String requestFile0296 = "/EnterpriseWebAPI/api/Employee/ValidateLoggedInUserSurveyQuestions/e2abaa02-80da-47db-aec8-981392dc655f/e14a22f5-f444-4222-a9a4-a303a2d6879c/bf69af09-741b-40c1-987f-ec721fdf7213/";
		requestFile0296 = Lib.replaceTextPattern(requestFile0296, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0296 = "GET " + requestFile0296 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0296, requestHost0296, requestPort0296, requestHeader0296, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0296 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 4
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [296] <- Index 296
		if(replayMode)
		{
			long proxyDataRecordId =1624989951633L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [297] <- WEB ADMIN Index 461 ---
		String requestProt0297 = "https";
		String requestHost0297 = "cdn.abcsys.com";
		int    requestPort0297 = 443;
		String requestFile0297 = "/Library/Enterprise/AppLibrary/js/Controllers/AboutCtrl.js" +
				"?_=1624989949400";
		String requestHeader0297 = "GET " + requestFile0297 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0297, requestHost0297, requestPort0297, requestHeader0297, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0297 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 232
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [297] <- Index 297
		if(replayMode)
		{
			long proxyDataRecordId =1624989951638L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [298] <- WEB ADMIN Index 462 ---
		String requestProt0298 = "https";
		String requestHost0298 = "cdn.abcsys.com";
		int    requestPort0298 = 443;
		String requestFile0298 = "/Library/Enterprise/AppLibrary/js/Controllers/CompanyCtrl.js" +
				"?_=1624989949401";
		String requestHeader0298 = "GET " + requestFile0298 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0298, requestHost0298, requestPort0298, requestHeader0298, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0298 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 758
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [298] <- Index 298
		if(replayMode)
		{
			long proxyDataRecordId =1624989951737L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [299] <- WEB ADMIN Index 463 ---
		String requestProt0299 = "https";
		String requestHost0299 = "cdn.abcsys.com";
		int    requestPort0299 = 443;
		String requestFile0299 = "/Library/Enterprise/AppLibrary/js/Controllers/ContactUsCtrl.js" +
				"?_=1624989949402";
		String requestHeader0299 = "GET " + requestFile0299 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0299, requestHost0299, requestPort0299, requestHeader0299, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0299 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1173
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [299] <- Index 299
		if(replayMode)
		{
			long proxyDataRecordId =1624989951832L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [300] <- WEB ADMIN Index 464 ---
		String requestProt0300 = "https";
		String requestHost0300 = "cdn.abcsys.com";
		int    requestPort0300 = 443;
		String requestFile0300 = "/Library/Enterprise/AppLibrary/js/Controllers/DependentsCtrl.js" +
				"?_=1624989949403";
		String requestHeader0300 = "GET " + requestFile0300 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0300, requestHost0300, requestPort0300, requestHeader0300, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0300 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 14321
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [300] <- Index 300
		if(replayMode)
		{
			long proxyDataRecordId =1624989951956L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [301] <- WEB ADMIN Index 465 ---
		String requestProt0301 = "https";
		String requestHost0301 = "cdn.abcsys.com";
		int    requestPort0301 = 443;
		String requestFile0301 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollCtrl.js" +
				"?v=1" +
				"&_=1624989949404";
		String requestHeader0301 = "GET " + requestFile0301 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0301, requestHost0301, requestPort0301, requestHeader0301, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0301 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 226984
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [301] <- Index 301
		if(replayMode)
		{
			long proxyDataRecordId =1624989952174L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [302] <- WEB ADMIN Index 466 ---
		String requestProt0302 = "https";
		String requestHost0302 = "cdn.abcsys.com";
		int    requestPort0302 = 443;
		String requestFile0302 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollmentSummaryCtrl.js" +
				"?_=1624989949405";
		String requestHeader0302 = "GET " + requestFile0302 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0302, requestHost0302, requestPort0302, requestHeader0302, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0302 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 10734
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [302] <- Index 302
		if(replayMode)
		{
			long proxyDataRecordId =1624989953427L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [303] <- WEB ADMIN Index 467 ---
		String requestProt0303 = "https";
		String requestHost0303 = "cdn.abcsys.com";
		int    requestPort0303 = 443;
		String requestFile0303 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollmentSummary_PrintCtrl.js" +
				"?_=1624989949406";
		String requestHeader0303 = "GET " + requestFile0303 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0303, requestHost0303, requestPort0303, requestHeader0303, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0303 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3907
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [303] <- Index 303
		if(replayMode)
		{
			long proxyDataRecordId =1624989953539L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2_7 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2_8.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2_8(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #2 (fragment 9 of 10)
		// -----------------------------------------



		// --- HTTP REQUEST: Test [304] <- WEB ADMIN Index 468 ---
		String requestProt0304 = "https";
		String requestHost0304 = "cdn.abcsys.com";
		int    requestPort0304 = 443;
		String requestFile0304 = "/Library/Enterprise/AppLibrary/js/Controllers/Error404Ctrl.js" +
				"?_=1624989949407";
		String requestHeader0304 = "GET " + requestFile0304 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0304, requestHost0304, requestPort0304, requestHeader0304, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0304 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 338
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [304] <- Index 304
		if(replayMode)
		{
			long proxyDataRecordId =1624989953642L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [305] <- WEB ADMIN Index 470 ---
		String requestProt0305 = "https";
		String requestHost0305 = "cdn.abcsys.com";
		int    requestPort0305 = 443;
		String requestFile0305 = "/Library/Enterprise/AppLibrary/js/Controllers/LoginCtrl.js" +
				"?_=1624989949409";
		String requestHeader0305 = "GET " + requestFile0305 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0305, requestHost0305, requestPort0305, requestHeader0305, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0305 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15880
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [305] <- Index 305
		if(replayMode)
		{
			long proxyDataRecordId =1624989953888L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [306] <- WEB ADMIN Index 471 ---
		String requestProt0306 = "https";
		String requestHost0306 = "cdn.abcsys.com";
		int    requestPort0306 = 443;
		String requestFile0306 = "/Library/Enterprise/AppLibrary/js/Controllers/PayrollDeductionCtrl.js" +
				"?_=1624989949410";
		String requestHeader0306 = "GET " + requestFile0306 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0306, requestHost0306, requestPort0306, requestHeader0306, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0306 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2580
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [306] <- Index 306
		if(replayMode)
		{
			long proxyDataRecordId =1624989954023L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [307] <- WEB ADMIN Index 472 ---
		String requestProt0307 = "https";
		String requestHost0307 = "cdn.abcsys.com";
		int    requestPort0307 = 443;
		String requestFile0307 = "/Library/Enterprise/AppLibrary/js/Controllers/ProductCtrl.js" +
				"?_=1624989949411";
		String requestHeader0307 = "GET " + requestFile0307 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0307, requestHost0307, requestPort0307, requestHeader0307, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0307 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 36391
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [307] <- Index 307
		if(replayMode)
		{
			long proxyDataRecordId =1624989954123L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [308] <- WEB ADMIN Index 473 ---
		String requestProt0308 = "https";
		String requestHost0308 = "cdn.abcsys.com";
		int    requestPort0308 = 443;
		String requestFile0308 = "/Library/Enterprise/AppLibrary/js/Controllers/ProfileCtrl.js" +
				"?_=1624989949412";
		String requestHeader0308 = "GET " + requestFile0308 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0308, requestHost0308, requestPort0308, requestHeader0308, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0308 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15041
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [308] <- Index 308
		if(replayMode)
		{
			long proxyDataRecordId =1624989954393L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [309] <- WEB ADMIN Index 474 ---
		String requestProt0309 = "https";
		String requestHost0309 = "cdn.abcsys.com";
		int    requestPort0309 = 443;
		String requestFile0309 = "/Library/Enterprise/AppLibrary/js/Controllers/RegisterCtrl.js" +
				"?_=1624989949413";
		String requestHeader0309 = "GET " + requestFile0309 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0309, requestHost0309, requestPort0309, requestHeader0309, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0309 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 18034
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [309] <- Index 309
		if(replayMode)
		{
			long proxyDataRecordId =1624989954572L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [310] <- WEB ADMIN Index 475 ---
		String requestProt0310 = "https";
		String requestHost0310 = "cdn.abcsys.com";
		int    requestPort0310 = 443;
		String requestFile0310 = "/Library/Enterprise/AppLibrary/js/Controllers/ResetPwdCtrl.js" +
				"?_=1624989949414";
		String requestHeader0310 = "GET " + requestFile0310 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0310, requestHost0310, requestPort0310, requestHeader0310, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0310 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4283
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [310] <- Index 310
		if(replayMode)
		{
			long proxyDataRecordId =1624989954752L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [311] <- WEB ADMIN Index 476 ---
		String requestProt0311 = "https";
		String requestHost0311 = "cdn.abcsys.com";
		int    requestPort0311 = 443;
		String requestFile0311 = "/Library/Enterprise/AppLibrary/js/Controllers/ResetUidPwdCtrl.js" +
				"?_=1624989949415";
		String requestHeader0311 = "GET " + requestFile0311 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0311, requestHost0311, requestPort0311, requestHeader0311, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0311 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6409
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [311] <- Index 311
		if(replayMode)
		{
			long proxyDataRecordId =1624989954865L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [312] <- WEB ADMIN Index 477 ---
		String requestProt0312 = "https";
		String requestHost0312 = "cdn.abcsys.com";
		int    requestPort0312 = 443;
		String requestFile0312 = "/Library/Enterprise/AppLibrary/js/Controllers/ThirdPartyPage.js" +
				"?_=1624989949416";
		String requestHeader0312 = "GET " + requestFile0312 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0312, requestHost0312, requestPort0312, requestHeader0312, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0312 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1047
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [312] <- Index 312
		if(replayMode)
		{
			long proxyDataRecordId =1624989954973L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [313] <- WEB ADMIN Index 478 ---
		String requestProt0313 = "https";
		String requestHost0313 = "cdn.abcsys.com";
		int    requestPort0313 = 443;
		String requestFile0313 = "/Library/Enterprise/AppLibrary/js/Controllers/SSOCtrl.js" +
				"?_=1624989949417";
		String requestHeader0313 = "GET " + requestFile0313 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0313, requestHost0313, requestPort0313, requestHeader0313, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0313 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6537
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [313] <- Index 313
		if(replayMode)
		{
			long proxyDataRecordId =1624989955071L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [314] <- WEB ADMIN Index 479 ---
		String requestProt0314 = "https";
		String requestHost0314 = "cdn.abcsys.com";
		int    requestPort0314 = 443;
		String requestFile0314 = "/Library/Enterprise/AppLibrary/js/Controllers/LifeEventChangeCtrl.js" +
				"?_=1624989949418";
		String requestHeader0314 = "GET " + requestFile0314 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0314, requestHost0314, requestPort0314, requestHeader0314, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0314 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2967
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [314] <- Index 314
		if(replayMode)
		{
			long proxyDataRecordId =1624989955174L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [315] <- WEB ADMIN Index 480 ---
		String requestProt0315 = "https";
		String requestHost0315 = "cdn.abcsys.com";
		int    requestPort0315 = 443;
		String requestFile0315 = "/Library/Enterprise/AppLibrary/js/Controllers/ForceResetCtrl.js" +
				"?_=1624989949419";
		String requestHeader0315 = "GET " + requestFile0315 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0315, requestHost0315, requestPort0315, requestHeader0315, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0315 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3747
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [315] <- Index 315
		if(replayMode)
		{
			long proxyDataRecordId =1624989955280L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [316] <- WEB ADMIN Index 481 ---
		String requestProt0316 = "https";
		String requestHost0316 = "apps.abcsys.com";
		int    requestPort0316 = 443;
		String requestFile0316 = "/EnterpriseWebAPI/api/Employee/EmployeeInfo/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0316 = Lib.replaceTextPattern(requestFile0316, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0316 = "GET " + requestFile0316 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0316, requestHost0316, requestPort0316, requestHeader0316, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0316 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1569
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [316] <- Index 316
		if(replayMode)
		{
			long proxyDataRecordId =1624989955436L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [317] <- WEB ADMIN Index 482 ---
		String requestProt0317 = "https";
		String requestHost0317 = "apps.abcsys.com";
		int    requestPort0317 = 443;
		String requestFile0317 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/QuickLinks";
		requestFile0317 = Lib.replaceTextPattern(requestFile0317, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0317 = "GET " + requestFile0317 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0317, requestHost0317, requestPort0317, requestHeader0317, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0317 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [317] <- Index 317
		if(replayMode)
		{
			long proxyDataRecordId =1624989955441L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [318] <- WEB ADMIN Index 483 ---
		String requestProt0318 = "https";
		String requestHost0318 = "apps.abcsys.com";
		int    requestPort0318 = 443;
		String requestFile0318 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0318 = Lib.replaceTextPattern(requestFile0318, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0318 = "OPTIONS " + requestFile0318 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0318, requestHost0318, requestPort0318, requestHeader0318, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0318 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [318] <- Index 318
		if(replayMode)
		{
			long proxyDataRecordId =1624989955448L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [319] <- WEB ADMIN Index 484 ---
		String requestProt0319 = "https";
		String requestHost0319 = "apps.abcsys.com";
		int    requestPort0319 = 443;
		String requestFile0319 = "/EnterpriseWebAPI/api/Enrollment/CollectMissingData/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0319 = Lib.replaceTextPattern(requestFile0319, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0319 = "GET " + requestFile0319 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0319, requestHost0319, requestPort0319, requestHeader0319, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0319 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 83
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [319] <- Index 319
		if(replayMode)
		{
			long proxyDataRecordId =1624989955452L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [320] <- WEB ADMIN Index 485 ---
		String requestProt0320 = "https";
		String requestHost0320 = "apps.abcsys.com";
		int    requestPort0320 = 443;
		String requestFile0320 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0320 = Lib.replaceTextPattern(requestFile0320, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0320 = "OPTIONS " + requestFile0320 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0320, requestHost0320, requestPort0320, requestHeader0320, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0320 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [320] <- Index 320
		if(replayMode)
		{
			long proxyDataRecordId =1624989955480L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [321] <- WEB ADMIN Index 486 ---
		String requestProt0321 = "https";
		String requestHost0321 = "apps.abcsys.com";
		int    requestPort0321 = 443;
		String requestFile0321 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0321 = Lib.replaceTextPattern(requestFile0321, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0321 = "OPTIONS " + requestFile0321 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0321, requestHost0321, requestPort0321, requestHeader0321, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0321 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [321] <- Index 321
		if(replayMode)
		{
			long proxyDataRecordId =1624989955481L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [322] <- WEB ADMIN Index 487 ---
		String requestProt0322 = "https";
		String requestHost0322 = "www.creditsuisseaddedbenefits.com";
		int    requestPort0322 = 443;
		String requestFile0322 = "/views/Products/Product.html";
		String requestHeader0322 = "GET " + requestFile0322 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: www.creditsuisseaddedbenefits.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0322, requestHost0322, requestPort0322, requestHeader0322, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0322 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 47591
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [322] <- Index 322
		if(replayMode)
		{
			long proxyDataRecordId =1624989955484L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [323] <- WEB ADMIN Index 489 ---
		String requestProt0323 = "https";
		String requestHost0323 = "apps.abcsys.com";
		int    requestPort0323 = 443;
		String requestFile0323 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0323 = Lib.replaceTextPattern(requestFile0323, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0323 = "GET " + requestFile0323 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0323, requestHost0323, requestPort0323, requestHeader0323, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0323 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2674
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [323] <- Index 323
		if(replayMode)
		{
			long proxyDataRecordId =1624989955551L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2_8 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2_9.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2_9(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #2 (fragment 10 of 10)
		// ------------------------------------------



		// --- HTTP REQUEST: Test [324] <- WEB ADMIN Index 490 ---
		String requestProt0324 = "https";
		String requestHost0324 = "apps.abcsys.com";
		int    requestPort0324 = 443;
		String requestFile0324 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0324 = Lib.replaceTextPattern(requestFile0324, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0324 = "GET " + requestFile0324 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0324, requestHost0324, requestPort0324, requestHeader0324, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0324 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [324] <- Index 324
		if(replayMode)
		{
			long proxyDataRecordId =1624989955593L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [325] <- WEB ADMIN Index 491 ---
		String requestProt0325 = "https";
		String requestHost0325 = "apps.abcsys.com";
		int    requestPort0325 = 443;
		String requestFile0325 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0325 = Lib.replaceTextPattern(requestFile0325, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0325 = "GET " + requestFile0325 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0325, requestHost0325, requestPort0325, requestHeader0325, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0325 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [325] <- Index 325
		if(replayMode)
		{
			long proxyDataRecordId =1624989955596L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [326] <- WEB ADMIN Index 492 ---
		String requestProt0326 = "https";
		String requestHost0326 = "apps.abcsys.com";
		int    requestPort0326 = 443;
		String requestFile0326 = "/EnterpriseWebAPI/api/CMS/HomeContent/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0326 = Lib.replaceTextPattern(requestFile0326, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0326 = "GET " + requestFile0326 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0326, requestHost0326, requestPort0326, requestHeader0326, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0326 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 561
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [326] <- Index 326
		if(replayMode)
		{
			long proxyDataRecordId =1624989955612L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [327] <- WEB ADMIN Index 493 ---
		String requestProt0327 = "https";
		String requestHost0327 = "apps.abcsys.com";
		int    requestPort0327 = 443;
		String requestFile0327 = "/EnterpriseWebAPI/api/Product/ProductVendorListPlusLinks/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&linkType=hometilelink";
		requestFile0327 = Lib.replaceTextPattern(requestFile0327, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0327 = "GET " + requestFile0327 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0327, requestHost0327, requestPort0327, requestHeader0327, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0327 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 982
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [327] <- Index 327
		if(replayMode)
		{
			long proxyDataRecordId =1624989955789L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [328] <- WEB ADMIN Index 494 ---
		String requestProt0328 = "https";
		String requestHost0328 = "apps.abcsys.com";
		int    requestPort0328 = 443;
		String requestFile0328 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/null";
		requestFile0328 = Lib.replaceTextPattern(requestFile0328, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0328 = "GET " + requestFile0328 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0328, requestHost0328, requestPort0328, requestHeader0328, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0328 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [328] <- Index 328
		if(replayMode)
		{
			long proxyDataRecordId =1624989955793L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [329] <- WEB ADMIN Index 495 ---
		log();
		log("# title: 404 - File or directory not found.");
		String requestProt0329 = "https";
		String requestHost0329 = "staging.abcsys.com";
		int    requestPort0329 = 443;
		String requestFile0329 = "/Medicare/index.html";
		String requestHeader0329 = "GET " + requestFile0329 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: staging.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0329, requestHost0329, requestPort0329, requestHeader0329, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0329 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 404, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 1245
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {404}, null, null, null);		// Test [329] <- Index 329
		if(replayMode)
		{
			long proxyDataRecordId =1624989955877L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [330] <- WEB ADMIN Index 496 ---
		String requestProt0330 = "https";
		String requestHost0330 = "apps.abcsys.com";
		int    requestPort0330 = 443;
		String requestFile0330 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0330 = Lib.replaceTextPattern(requestFile0330, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0330 = "GET " + requestFile0330 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0330, requestHost0330, requestPort0330, requestHeader0330, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0330 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [330] <- Index 330
		if(replayMode)
		{
			long proxyDataRecordId =1624989955928L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [331] <- WEB ADMIN Index 497 ---
		String requestProt0331 = "https";
		String requestHost0331 = "apps.abcsys.com";
		int    requestPort0331 = 443;
		String requestFile0331 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0331 = Lib.replaceTextPattern(requestFile0331, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0331 = "GET " + requestFile0331 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0331, requestHost0331, requestPort0331, requestHeader0331, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0331 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2674
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [331] <- Index 331
		if(replayMode)
		{
			long proxyDataRecordId =1624989955929L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [332] <- WEB ADMIN Index 498 ---
		String requestProt0332 = "https";
		String requestHost0332 = "apps.abcsys.com";
		int    requestPort0332 = 443;
		String requestFile0332 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0332 = Lib.replaceTextPattern(requestFile0332, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0332 = "GET " + requestFile0332 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0332, requestHost0332, requestPort0332, requestHeader0332, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0332 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2674
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [332] <- Index 332
		if(replayMode)
		{
			long proxyDataRecordId =1624989955930L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [333] <- WEB ADMIN Index 499 ---
		String requestProt0333 = "https";
		String requestHost0333 = "apps.abcsys.com";
		int    requestPort0333 = 443;
		String requestFile0333 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0333 = Lib.replaceTextPattern(requestFile0333, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0333 = "GET " + requestFile0333 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0333, requestHost0333, requestPort0333, requestHeader0333, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0333 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [333] <- Index 333
		if(replayMode)
		{
			long proxyDataRecordId =1624989955934L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [334] <- WEB ADMIN Index 500 ---
		String requestProt0334 = "https";
		String requestHost0334 = "apps.abcsys.com";
		int    requestPort0334 = 443;
		String requestFile0334 = "/EnterpriseWebAPI/api/Product/ProductContent/e2abaa02-80da-47db-aec8-981392dc655f/null/null";
		requestFile0334 = Lib.replaceTextPattern(requestFile0334, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0334 = "OPTIONS " + requestFile0334 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0334, requestHost0334, requestPort0334, requestHeader0334, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0334 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [334] <- Index 334
		if(replayMode)
		{
			long proxyDataRecordId =1624989955945L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [335] <- WEB ADMIN Index 503 ---
		String requestProt0335 = "https";
		String requestHost0335 = "www.creditsuisseaddedbenefits.com";
		int    requestPort0335 = 443;
		String requestFile0335 = "/views/Partialviews/Product/EligibilityRules.html";
		String requestHeader0335 = "GET " + requestFile0335 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: www.creditsuisseaddedbenefits.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0335, requestHost0335, requestPort0335, requestHeader0335, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0335 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 2867
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [335] <- Index 335
		if(replayMode)
		{
			long proxyDataRecordId =1624989955967L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [336] <- WEB ADMIN Index 507 ---
		String requestProt0336 = "https";
		String requestHost0336 = "apps.abcsys.com";
		int    requestPort0336 = 443;
		String requestFile0336 = "/EnterpriseWebAPI/api/Product/ProductContent/e2abaa02-80da-47db-aec8-981392dc655f/null/null";
		requestFile0336 = Lib.replaceTextPattern(requestFile0336, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0336 = "GET " + requestFile0336 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0336, requestHost0336, requestPort0336, requestHeader0336, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0336 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 457
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [336] <- Index 336
		if(replayMode)
		{
			long proxyDataRecordId =1624989956055L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [337] <- WEB ADMIN Index 508 ---
		String requestProt0337 = "https";
		String requestHost0337 = "apps.abcsys.com";
		int    requestPort0337 = 443;
		String requestFile0337 = "/EnterpriseWebAPI/api/Employee/ValidateLoggedInUserSurveyQuestions/e2abaa02-80da-47db-aec8-981392dc655f/e14a22f5-f444-4222-a9a4-a303a2d6879c/bf69af09-741b-40c1-987f-ec721fdf7213/";
		requestFile0337 = Lib.replaceTextPattern(requestFile0337, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0337 = "GET " + requestFile0337 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0337, requestHost0337, requestPort0337, requestHeader0337, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0337 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 4
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [337] <- Index 337
		if(replayMode)
		{
			long proxyDataRecordId =1624989956131L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2_9 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #3: Auto & Home
		// # --------------------



		// --- HTTP REQUEST: Test [339] <- WEB ADMIN Index 512 ---
		log();
		log("# title: 404 - File or directory not found.");
		String requestProt0339 = "https";
		String requestHost0339 = "staging.abcsys.com";
		int    requestPort0339 = 443;
		String requestFile0339 = "/Medicare/index.html";
		String requestHeader0339 = "GET " + requestFile0339 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: staging.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0339, requestHost0339, requestPort0339, requestHeader0339, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0339 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 404, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 1245
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {404}, null, null, null);		// Test [339] <- Index 339
		if(replayMode)
		{
			long proxyDataRecordId =1624989967071L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [340] <- WEB ADMIN Index 513 ---
		String requestProt0340 = "https";
		String requestHost0340 = "apps.abcsys.com";
		int    requestPort0340 = 443;
		String requestFile0340 = "/EnterpriseWebAPI/api/Product/ProductContent/e2abaa02-80da-47db-aec8-981392dc655f/dc350e1a-f3cc-4815-b921-c91f0e9db25c/BenefitId";
		requestFile0340 = Lib.replaceTextPattern(requestFile0340, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0340 = "OPTIONS " + requestFile0340 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0340, requestHost0340, requestPort0340, requestHeader0340, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0340 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [340] <- Index 340
		if(replayMode)
		{
			long proxyDataRecordId =1624989967125L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [341] <- WEB ADMIN Index 514 ---
		String requestProt0341 = "https";
		String requestHost0341 = "apps.abcsys.com";
		int    requestPort0341 = 443;
		String requestFile0341 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0341 = Lib.replaceTextPattern(requestFile0341, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0341 = "OPTIONS " + requestFile0341 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0341, requestHost0341, requestPort0341, requestHeader0341, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0341 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [341] <- Index 341
		if(replayMode)
		{
			long proxyDataRecordId =1624989967133L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [342] <- WEB ADMIN Index 515 ---
		String requestProt0342 = "https";
		String requestHost0342 = "apps.abcsys.com";
		int    requestPort0342 = 443;
		String requestFile0342 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0342 = Lib.replaceTextPattern(requestFile0342, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0342 = "OPTIONS " + requestFile0342 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0342, requestHost0342, requestPort0342, requestHeader0342, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0342 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [342] <- Index 342
		if(replayMode)
		{
			long proxyDataRecordId =1624989967134L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [343] <- WEB ADMIN Index 516 ---
		String requestProt0343 = "https";
		String requestHost0343 = "apps.abcsys.com";
		int    requestPort0343 = 443;
		String requestFile0343 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0343 = Lib.replaceTextPattern(requestFile0343, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0343 = "OPTIONS " + requestFile0343 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0343, requestHost0343, requestPort0343, requestHeader0343, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0343 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [343] <- Index 343
		if(replayMode)
		{
			long proxyDataRecordId =1624989967136L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [344] <- WEB ADMIN Index 517 ---
		String requestProt0344 = "https";
		String requestHost0344 = "apps.abcsys.com";
		int    requestPort0344 = 443;
		String requestFile0344 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0344 = Lib.replaceTextPattern(requestFile0344, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0344 = "OPTIONS " + requestFile0344 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0344, requestHost0344, requestPort0344, requestHeader0344, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0344 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [344] <- Index 344
		if(replayMode)
		{
			long proxyDataRecordId =1624989967151L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [345] <- WEB ADMIN Index 522 ---
		String requestProt0345 = "https";
		String requestHost0345 = "apps.abcsys.com";
		int    requestPort0345 = 443;
		String requestFile0345 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0345 = Lib.replaceTextPattern(requestFile0345, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0345 = "GET " + requestFile0345 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0345, requestHost0345, requestPort0345, requestHeader0345, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0345 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2674
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [345] <- Index 345
		if(replayMode)
		{
			long proxyDataRecordId =1624989967243L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [346] <- WEB ADMIN Index 523 ---
		String requestProt0346 = "https";
		String requestHost0346 = "apps.abcsys.com";
		int    requestPort0346 = 443;
		String requestFile0346 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0346 = Lib.replaceTextPattern(requestFile0346, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0346 = "GET " + requestFile0346 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0346, requestHost0346, requestPort0346, requestHeader0346, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0346 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2674
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [346] <- Index 346
		if(replayMode)
		{
			long proxyDataRecordId =1624989967253L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [347] <- WEB ADMIN Index 524 ---
		String requestProt0347 = "https";
		String requestHost0347 = "apps.abcsys.com";
		int    requestPort0347 = 443;
		String requestFile0347 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0347 = Lib.replaceTextPattern(requestFile0347, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0347 = "GET " + requestFile0347 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0347, requestHost0347, requestPort0347, requestHeader0347, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0347 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [347] <- Index 347
		if(replayMode)
		{
			long proxyDataRecordId =1624989967254L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [348] <- WEB ADMIN Index 525 ---
		String requestProt0348 = "https";
		String requestHost0348 = "apps.abcsys.com";
		int    requestPort0348 = 443;
		String requestFile0348 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0348 = Lib.replaceTextPattern(requestFile0348, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0348 = "GET " + requestFile0348 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0348, requestHost0348, requestPort0348, requestHeader0348, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0348 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [348] <- Index 348
		if(replayMode)
		{
			long proxyDataRecordId =1624989967266L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [349] <- WEB ADMIN Index 526 ---
		String requestProt0349 = "https";
		String requestHost0349 = "apps.abcsys.com";
		int    requestPort0349 = 443;
		String requestFile0349 = "/EnterpriseWebAPI/api/Product/ProductContent/e2abaa02-80da-47db-aec8-981392dc655f/dc350e1a-f3cc-4815-b921-c91f0e9db25c/BenefitId";
		requestFile0349 = Lib.replaceTextPattern(requestFile0349, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0349 = "GET " + requestFile0349 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0349, requestHost0349, requestPort0349, requestHeader0349, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0349 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 10570
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [349] <- Index 349
		if(replayMode)
		{
			long proxyDataRecordId =1624989967271L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [350] <- WEB ADMIN Index 527 ---
		log();
		log("# title: 404 - File or directory not found.");
		String requestProt0350 = "https";
		String requestHost0350 = "staging.abcsys.com";
		int    requestPort0350 = 443;
		String requestFile0350 = "/MMWebDev/Images/arrow_up.png";
		String requestHeader0350 = "GET " + requestFile0350 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: staging.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0350, requestHost0350, requestPort0350, requestHeader0350, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0350 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 404, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 1245
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {404}, null, null, null);		// Test [350] <- Index 350
		if(replayMode)
		{
			long proxyDataRecordId =1624989967291L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [351] <- WEB ADMIN Index 548 ---
		String requestProt0351 = "https";
		String requestHost0351 = "apps.abcsys.com";
		int    requestPort0351 = 443;
		String requestFile0351 = "/EnterpriseWebAPI/api/Product/ProductVendorList/e14a22f5-f444-4222-a9a4-a303a2d6879c";
		String requestHeader0351 = "OPTIONS " + requestFile0351 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0351, requestHost0351, requestPort0351, requestHeader0351, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0351 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [351] <- Index 351
		if(replayMode)
		{
			long proxyDataRecordId =1624989967603L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [352] <- WEB ADMIN Index 551 ---
		String requestProt0352 = "https";
		String requestHost0352 = "cdn.abcsys.com";
		int    requestPort0352 = 443;
		String requestFile0352 = "/Library/Enterprise/Content/App/SingleWeb.css";
		String requestHeader0352 = "GET " + requestFile0352 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0352, requestHost0352, requestPort0352, requestHeader0352, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0352 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 10883
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [352] <- Index 352
		if(replayMode)
		{
			long proxyDataRecordId =1624989967691L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [353] <- WEB ADMIN Index 552 ---
		String requestProt0353 = "https";
		String requestHost0353 = "cdn.abcsys.com";
		int    requestPort0353 = 443;
		String requestFile0353 = "/Library/Enterprise/Content/app.css";
		String requestHeader0353 = "GET " + requestFile0353 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0353, requestHost0353, requestPort0353, requestHeader0353, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0353 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 132702
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [353] <- Index 353
		if(replayMode)
		{
			long proxyDataRecordId =1624989967704L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [354] <- WEB ADMIN Index 553 ---
		String requestProt0354 = "https";
		String requestHost0354 = "cdn.abcsys.com";
		int    requestPort0354 = 443;
		String requestFile0354 = "/Library/Enterprise/AppLibrary/css/Style.css" +
				"?v=1.1";
		String requestHeader0354 = "GET " + requestFile0354 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0354, requestHost0354, requestPort0354, requestHeader0354, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0354 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 126321
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [354] <- Index 354
		if(replayMode)
		{
			long proxyDataRecordId =1624989967705L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [355] <- WEB ADMIN Index 554 ---
		String requestProt0355 = "https";
		String requestHost0355 = "cdn.abcsys.com";
		int    requestPort0355 = 443;
		String requestFile0355 = "/Library/Enterprise/js/jquery/jquery-ui.css";
		String requestHeader0355 = "GET " + requestFile0355 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0355, requestHost0355, requestPort0355, requestHeader0355, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0355 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 36435
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [355] <- Index 355
		if(replayMode)
		{
			long proxyDataRecordId =1624989967706L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [356] <- WEB ADMIN Index 555 ---
		String requestProt0356 = "https";
		String requestHost0356 = "cdn.abcsys.com";
		int    requestPort0356 = 443;
		String requestFile0356 = "/Library/Enterprise/js/angular/angular-animate.js" +
				"?_=1624989967403";
		String requestHeader0356 = "GET " + requestFile0356 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0356, requestHost0356, requestPort0356, requestHeader0356, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0356 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 104195
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [356] <- Index 356
		if(replayMode)
		{
			long proxyDataRecordId =1624989967735L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [357] <- WEB ADMIN Index 556 ---
		String requestProt0357 = "https";
		String requestHost0357 = "cdn.abcsys.com";
		int    requestPort0357 = 443;
		String requestFile0357 = "/Library/Enterprise/js/App/bootstrap.js" +
				"?_=1624989967404";
		String requestHeader0357 = "GET " + requestFile0357 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0357, requestHost0357, requestPort0357, requestHeader0357, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0357 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 77458
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [357] <- Index 357
		if(replayMode)
		{
			long proxyDataRecordId =1624989967738L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [358] <- WEB ADMIN Index 557 ---
		String requestProt0358 = "https";
		String requestHost0358 = "cdn.abcsys.com";
		int    requestPort0358 = 443;
		String requestFile0358 = "/Library/Enterprise/js/App/owl.carousel.min.js" +
				"?_=1624989967405";
		String requestHeader0358 = "GET " + requestFile0358 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0358, requestHost0358, requestPort0358, requestHeader0358, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0358 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15060
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [358] <- Index 358
		if(replayMode)
		{
			long proxyDataRecordId =1624989967789L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #3 (fragment 2 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [359] <- WEB ADMIN Index 559 ---
		String requestProt0359 = "https";
		String requestHost0359 = "cdn.abcsys.com";
		int    requestPort0359 = 443;
		String requestFile0359 = "/Library/Enterprise/js/App/jquery.parallax-1.1.js" +
				"?_=1624989967406";
		String requestHeader0359 = "GET " + requestFile0359 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0359, requestHost0359, requestPort0359, requestHeader0359, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0359 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2583
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [359] <- Index 359
		if(replayMode)
		{
			long proxyDataRecordId =1624989967809L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [360] <- WEB ADMIN Index 560 ---
		String requestProt0360 = "https";
		String requestHost0360 = "apps.abcsys.com";
		int    requestPort0360 = 443;
		String requestFile0360 = "/EnterpriseWebAPI/api/Product/ProductVendorList/e14a22f5-f444-4222-a9a4-a303a2d6879c";
		String requestHeader0360 = "GET " + requestFile0360 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0360, requestHost0360, requestPort0360, requestHeader0360, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0360 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 3081
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [360] <- Index 360
		if(replayMode)
		{
			long proxyDataRecordId =1624989967888L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [361] <- WEB ADMIN Index 561 ---
		String requestProt0361 = "https";
		String requestHost0361 = "cdn.abcsys.com";
		int    requestPort0361 = 443;
		String requestFile0361 = "/Library/Enterprise/AppLibrary/css/font-awesome.css";
		String requestHeader0361 = "GET " + requestFile0361 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://cdn.abcsys.com/Library/Enterprise/AppLibrary/css/Style.css?v=1.1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0361, requestHost0361, requestPort0361, requestHeader0361, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0361 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 28308
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [361] <- Index 361
		if(replayMode)
		{
			long proxyDataRecordId =1624989968300L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [362] <- WEB ADMIN Index 562 ---
		String requestProt0362 = "https";
		String requestHost0362 = "apps.abcsys.com";
		int    requestPort0362 = 443;
		String requestFile0362 = "/EnterpriseWebAPI/api/Product/ProductContent/e14a22f5-f444-4222-a9a4-a303a2d6879c/dc350e1a-f3cc-4815-b921-c91f0e9db25c/BenefitId";
		String requestHeader0362 = "OPTIONS " + requestFile0362 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0362, requestHost0362, requestPort0362, requestHeader0362, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0362 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [362] <- Index 362
		if(replayMode)
		{
			long proxyDataRecordId =1624989968395L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [363] <- WEB ADMIN Index 563 ---
		String requestProt0363 = "https";
		String requestHost0363 = "apps.abcsys.com";
		int    requestPort0363 = 443;
		String requestFile0363 = "/EnterpriseWebAPI/api/Product/ProductContent/e14a22f5-f444-4222-a9a4-a303a2d6879c/dc350e1a-f3cc-4815-b921-c91f0e9db25c/BenefitId";
		String requestHeader0363 = "GET " + requestFile0363 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0363, requestHost0363, requestPort0363, requestHeader0363, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0363 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 32345
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [363] <- Index 363
		if(replayMode)
		{
			long proxyDataRecordId =1624989968594L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [364] <- WEB ADMIN Index 564 ---
		String requestProt0364 = "https";
		String requestHost0364 = "cdn.abcsys.com";
		int    requestPort0364 = 443;
		String requestFile0364 = "/Library/Enterprise/js/app.js" +
				"?_=1624989967407";
		String requestHeader0364 = "GET " + requestFile0364 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0364, requestHost0364, requestPort0364, requestHeader0364, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0364 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 316
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [364] <- Index 364
		if(replayMode)
		{
			long proxyDataRecordId =1624989968628L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [365] <- WEB ADMIN Index 565 ---
		String requestProt0365 = "https";
		String requestHost0365 = "cdn.abcsys.com";
		int    requestPort0365 = 443;
		String requestFile0365 = "/Library/Enterprise/js/inspinia.js" +
				"?_=1624989967408";
		String requestHeader0365 = "GET " + requestFile0365 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0365, requestHost0365, requestPort0365, requestHeader0365, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0365 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1568
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [365] <- Index 365
		if(replayMode)
		{
			long proxyDataRecordId =1624989968638L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [366] <- WEB ADMIN Index 566 ---
		String requestProt0366 = "https";
		String requestHost0366 = "cdn.abcsys.com";
		int    requestPort0366 = 443;
		String requestFile0366 = "/Library/Enterprise/js/App/jquery.cycle2.min.js" +
				"?_=1624989967409";
		String requestHeader0366 = "GET " + requestFile0366 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0366, requestHost0366, requestPort0366, requestHeader0366, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0366 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 22769
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [366] <- Index 366
		if(replayMode)
		{
			long proxyDataRecordId =1624989968640L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [367] <- WEB ADMIN Index 567 ---
		String requestProt0367 = "https";
		String requestHost0367 = "cdn.abcsys.com";
		int    requestPort0367 = 443;
		String requestFile0367 = "/Library/Enterprise/js/App/jquery.easing.1.3.js" +
				"?_=1624989967410";
		String requestHeader0367 = "GET " + requestFile0367 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0367, requestHost0367, requestPort0367, requestHeader0367, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0367 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8301
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [367] <- Index 367
		if(replayMode)
		{
			long proxyDataRecordId =1624989968646L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [368] <- WEB ADMIN Index 568 ---
		String requestProt0368 = "https";
		String requestHost0368 = "cdn.abcsys.com";
		int    requestPort0368 = 443;
		String requestFile0368 = "/Library/Enterprise/js/App/jquery.mousewheel.min.js" +
				"?_=1624989967411";
		String requestHeader0368 = "GET " + requestFile0368 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0368, requestHost0368, requestPort0368, requestHeader0368, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0368 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1392
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [368] <- Index 368
		if(replayMode)
		{
			long proxyDataRecordId =1624989968651L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [369] <- WEB ADMIN Index 569 ---
		String requestProt0369 = "https";
		String requestHost0369 = "cdn.abcsys.com";
		int    requestPort0369 = 443;
		String requestFile0369 = "/Library/Enterprise/js/App/jquery.mCustomScrollbar.js" +
				"?_=1624989967412";
		String requestHeader0369 = "GET " + requestFile0369 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0369, requestHost0369, requestPort0369, requestHeader0369, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0369 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 45599
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [369] <- Index 369
		if(replayMode)
		{
			long proxyDataRecordId =1624989968657L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [370] <- WEB ADMIN Index 570 ---
		String requestProt0370 = "https";
		String requestHost0370 = "cdn.abcsys.com";
		int    requestPort0370 = 443;
		String requestFile0370 = "/Library/Enterprise/js/App/grids.js" +
				"?_=1624989967413";
		String requestHeader0370 = "GET " + requestFile0370 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0370, requestHost0370, requestPort0370, requestHeader0370, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0370 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1891
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [370] <- Index 370
		if(replayMode)
		{
			long proxyDataRecordId =1624989968741L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [371] <- WEB ADMIN Index 571 ---
		String requestProt0371 = "https";
		String requestHost0371 = "cdn.abcsys.com";
		int    requestPort0371 = 443;
		String requestFile0371 = "/Library/Enterprise/js/App/bootstrap.touchspin.js" +
				"?_=1624989967414";
		String requestHeader0371 = "GET " + requestFile0371 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0371, requestHost0371, requestPort0371, requestHeader0371, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0371 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 19011
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [371] <- Index 371
		if(replayMode)
		{
			long proxyDataRecordId =1624989968748L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [372] <- WEB ADMIN Index 572 ---
		String requestProt0372 = "https";
		String requestHost0372 = "cdn.abcsys.com";
		int    requestPort0372 = 443;
		String requestFile0372 = "/Library/Enterprise/AppLibrary/js/Controllers/MainCtrl.js" +
				"?_=1624989967415";
		String requestHeader0372 = "GET " + requestFile0372 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0372, requestHost0372, requestPort0372, requestHeader0372, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0372 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 92216
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [372] <- Index 372
		if(replayMode)
		{
			long proxyDataRecordId =1624989968763L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [373] <- WEB ADMIN Index 573 ---
		String requestProt0373 = "https";
		String requestHost0373 = "apps.abcsys.com";
		int    requestPort0373 = 443;
		String requestFile0373 = "/EnterpriseWebAPI/api/Enrollment/OpenEnrollmentDates/e2abaa02-80da-47db-aec8-981392dc655f/dc350e1a-f3cc-4815-b921-c91f0e9db25c/BenefitId";
		requestFile0373 = Lib.replaceTextPattern(requestFile0373, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0373 = "OPTIONS " + requestFile0373 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0373, requestHost0373, requestPort0373, requestHeader0373, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0373 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [373] <- Index 373
		if(replayMode)
		{
			long proxyDataRecordId =1624989969295L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [374] <- WEB ADMIN Index 574 ---
		String requestProt0374 = "https";
		String requestHost0374 = "apps.abcsys.com";
		int    requestPort0374 = 443;
		String requestFile0374 = "/EnterpriseWebAPI/api/Product/EligibilityRules/e2abaa02-80da-47db-aec8-981392dc655f/dc350e1a-f3cc-4815-b921-c91f0e9db25c/BenefitId";
		requestFile0374 = Lib.replaceTextPattern(requestFile0374, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0374 = "OPTIONS " + requestFile0374 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0374, requestHost0374, requestPort0374, requestHeader0374, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0374 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [374] <- Index 374
		if(replayMode)
		{
			long proxyDataRecordId =1624989969296L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [375] <- WEB ADMIN Index 575 ---
		String requestProt0375 = "https";
		String requestHost0375 = "apps.abcsys.com";
		int    requestPort0375 = 443;
		String requestFile0375 = "/EnterpriseWebAPI/api/CMS/ProductVideo/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0375 = Lib.replaceTextPattern(requestFile0375, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0375 = "OPTIONS " + requestFile0375 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0375, requestHost0375, requestPort0375, requestHeader0375, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0375 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [375] <- Index 375
		if(replayMode)
		{
			long proxyDataRecordId =1624989969327L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [376] <- WEB ADMIN Index 583 ---
		String requestProt0376 = "https";
		String requestHost0376 = "apps.abcsys.com";
		int    requestPort0376 = 443;
		String requestFile0376 = "/EnterpriseWebAPI/api/Enrollment/OpenEnrollmentDates/e2abaa02-80da-47db-aec8-981392dc655f/dc350e1a-f3cc-4815-b921-c91f0e9db25c/BenefitId";
		requestFile0376 = Lib.replaceTextPattern(requestFile0376, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0376 = "GET " + requestFile0376 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0376, requestHost0376, requestPort0376, requestHeader0376, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0376 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1060
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [376] <- Index 376
		if(replayMode)
		{
			long proxyDataRecordId =1624989969409L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [377] <- WEB ADMIN Index 584 ---
		String requestProt0377 = "https";
		String requestHost0377 = "apps.abcsys.com";
		int    requestPort0377 = 443;
		String requestFile0377 = "/EnterpriseWebAPI/api/Product/EligibilityRules/e2abaa02-80da-47db-aec8-981392dc655f/dc350e1a-f3cc-4815-b921-c91f0e9db25c/BenefitId";
		requestFile0377 = Lib.replaceTextPattern(requestFile0377, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0377 = "GET " + requestFile0377 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0377, requestHost0377, requestPort0377, requestHeader0377, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0377 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2167
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [377] <- Index 377
		if(replayMode)
		{
			long proxyDataRecordId =1624989969413L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [378] <- WEB ADMIN Index 585 ---
		String requestProt0378 = "https";
		String requestHost0378 = "apps.abcsys.com";
		int    requestPort0378 = 443;
		String requestFile0378 = "/EnterpriseWebAPI/api/CMS/ProductVideo/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0378 = Lib.replaceTextPattern(requestFile0378, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0378 = "GET " + requestFile0378 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0378, requestHost0378, requestPort0378, requestHeader0378, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0378 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 380
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [378] <- Index 378
		if(replayMode)
		{
			long proxyDataRecordId =1624989969513L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #3 (fragment 3 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [379] <- WEB ADMIN Index 586 ---
		String requestProt0379 = "https";
		String requestHost0379 = "cdn.abcsys.com";
		int    requestPort0379 = 443;
		String requestFile0379 = "/Library/Enterprise/AppLibrary/js/Controllers/controllers.js" +
				"?_=1624989967416";
		String requestHeader0379 = "GET " + requestFile0379 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0379, requestHost0379, requestPort0379, requestHeader0379, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0379 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 12376
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [379] <- Index 379
		if(replayMode)
		{
			long proxyDataRecordId =1624989969538L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [380] <- WEB ADMIN Index 590 ---
		String requestProt0380 = "https";
		String requestHost0380 = "cdn.abcsys.com";
		int    requestPort0380 = 443;
		String requestFile0380 = "/Library/Enterprise/AppLibrary/js/Controllers/TrainingVideosCtrl.js" +
				"?_=1624989967417";
		String requestHeader0380 = "GET " + requestFile0380 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0380, requestHost0380, requestPort0380, requestHeader0380, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0380 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3522
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [380] <- Index 380
		if(replayMode)
		{
			long proxyDataRecordId =1624989969678L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [381] <- WEB ADMIN Index 591 ---
		String requestProt0381 = "https";
		String requestHost0381 = "cdn.abcsys.com";
		int    requestPort0381 = 443;
		String requestFile0381 = "/Library/Enterprise/AppLibrary/js/Controllers/AboutCtrl.js" +
				"?_=1624989967418";
		String requestHeader0381 = "GET " + requestFile0381 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0381, requestHost0381, requestPort0381, requestHeader0381, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0381 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 232
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [381] <- Index 381
		if(replayMode)
		{
			long proxyDataRecordId =1624989969781L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [382] <- WEB ADMIN Index 592 ---
		String requestProt0382 = "https";
		String requestHost0382 = "cdn.abcsys.com";
		int    requestPort0382 = 443;
		String requestFile0382 = "/Library/Enterprise/AppLibrary/js/Controllers/CompanyCtrl.js" +
				"?_=1624989967419";
		String requestHeader0382 = "GET " + requestFile0382 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0382, requestHost0382, requestPort0382, requestHeader0382, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0382 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 758
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [382] <- Index 382
		if(replayMode)
		{
			long proxyDataRecordId =1624989969902L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [383] <- WEB ADMIN Index 593 ---
		String requestProt0383 = "https";
		String requestHost0383 = "cdn.abcsys.com";
		int    requestPort0383 = 443;
		String requestFile0383 = "/Library/Enterprise/AppLibrary/js/Controllers/ContactUsCtrl.js" +
				"?_=1624989967420";
		String requestHeader0383 = "GET " + requestFile0383 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0383, requestHost0383, requestPort0383, requestHeader0383, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0383 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1173
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [383] <- Index 383
		if(replayMode)
		{
			long proxyDataRecordId =1624989970008L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [384] <- WEB ADMIN Index 594 ---
		String requestProt0384 = "https";
		String requestHost0384 = "cdn.abcsys.com";
		int    requestPort0384 = 443;
		String requestFile0384 = "/Library/Enterprise/AppLibrary/js/Controllers/DependentsCtrl.js" +
				"?_=1624989967421";
		String requestHeader0384 = "GET " + requestFile0384 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0384, requestHost0384, requestPort0384, requestHeader0384, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0384 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 14321
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [384] <- Index 384
		if(replayMode)
		{
			long proxyDataRecordId =1624989970125L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [385] <- WEB ADMIN Index 595 ---
		String requestProt0385 = "https";
		String requestHost0385 = "cdn.abcsys.com";
		int    requestPort0385 = 443;
		String requestFile0385 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollCtrl.js" +
				"?v=1" +
				"&_=1624989967422";
		String requestHeader0385 = "GET " + requestFile0385 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0385, requestHost0385, requestPort0385, requestHeader0385, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0385 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 226984
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [385] <- Index 385
		if(replayMode)
		{
			long proxyDataRecordId =1624989970351L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [386] <- WEB ADMIN Index 596 ---
		String requestProt0386 = "https";
		String requestHost0386 = "cdn.abcsys.com";
		int    requestPort0386 = 443;
		String requestFile0386 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollmentSummaryCtrl.js" +
				"?_=1624989967423";
		String requestHeader0386 = "GET " + requestFile0386 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0386, requestHost0386, requestPort0386, requestHeader0386, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0386 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 10734
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [386] <- Index 386
		if(replayMode)
		{
			long proxyDataRecordId =1624989970963L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [387] <- WEB ADMIN Index 597 ---
		String requestProt0387 = "https";
		String requestHost0387 = "cdn.abcsys.com";
		int    requestPort0387 = 443;
		String requestFile0387 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollmentSummary_PrintCtrl.js" +
				"?_=1624989967424";
		String requestHeader0387 = "GET " + requestFile0387 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0387, requestHost0387, requestPort0387, requestHeader0387, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0387 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3907
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [387] <- Index 387
		if(replayMode)
		{
			long proxyDataRecordId =1624989971076L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [388] <- WEB ADMIN Index 598 ---
		String requestProt0388 = "https";
		String requestHost0388 = "cdn.abcsys.com";
		int    requestPort0388 = 443;
		String requestFile0388 = "/Library/Enterprise/AppLibrary/js/Controllers/Error404Ctrl.js" +
				"?_=1624989967425";
		String requestHeader0388 = "GET " + requestFile0388 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0388, requestHost0388, requestPort0388, requestHeader0388, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0388 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 338
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [388] <- Index 388
		if(replayMode)
		{
			long proxyDataRecordId =1624989971195L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [389] <- WEB ADMIN Index 600 ---
		String requestProt0389 = "https";
		String requestHost0389 = "cdn.abcsys.com";
		int    requestPort0389 = 443;
		String requestFile0389 = "/Library/Enterprise/AppLibrary/js/Controllers/LoginCtrl.js" +
				"?_=1624989967427";
		String requestHeader0389 = "GET " + requestFile0389 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0389, requestHost0389, requestPort0389, requestHeader0389, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0389 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15880
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [389] <- Index 389
		if(replayMode)
		{
			long proxyDataRecordId =1624989971510L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [390] <- WEB ADMIN Index 601 ---
		String requestProt0390 = "https";
		String requestHost0390 = "cdn.abcsys.com";
		int    requestPort0390 = 443;
		String requestFile0390 = "/Library/Enterprise/AppLibrary/js/Controllers/PayrollDeductionCtrl.js" +
				"?_=1624989967428";
		String requestHeader0390 = "GET " + requestFile0390 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0390, requestHost0390, requestPort0390, requestHeader0390, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0390 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2580
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [390] <- Index 390
		if(replayMode)
		{
			long proxyDataRecordId =1624989971738L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [391] <- WEB ADMIN Index 602 ---
		String requestProt0391 = "https";
		String requestHost0391 = "cdn.abcsys.com";
		int    requestPort0391 = 443;
		String requestFile0391 = "/Library/Enterprise/AppLibrary/js/Controllers/ProductCtrl.js" +
				"?_=1624989967429";
		String requestHeader0391 = "GET " + requestFile0391 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0391, requestHost0391, requestPort0391, requestHeader0391, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0391 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 36391
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [391] <- Index 391
		if(replayMode)
		{
			long proxyDataRecordId =1624989971889L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [392] <- WEB ADMIN Index 603 ---
		String requestProt0392 = "https";
		String requestHost0392 = "cdn.abcsys.com";
		int    requestPort0392 = 443;
		String requestFile0392 = "/Library/Enterprise/AppLibrary/js/Controllers/ProfileCtrl.js" +
				"?_=1624989967430";
		String requestHeader0392 = "GET " + requestFile0392 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0392, requestHost0392, requestPort0392, requestHeader0392, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0392 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15041
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [392] <- Index 392
		if(replayMode)
		{
			long proxyDataRecordId =1624989972154L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [393] <- WEB ADMIN Index 604 ---
		String requestProt0393 = "https";
		String requestHost0393 = "cdn.abcsys.com";
		int    requestPort0393 = 443;
		String requestFile0393 = "/Library/Enterprise/AppLibrary/js/Controllers/RegisterCtrl.js" +
				"?_=1624989967431";
		String requestHeader0393 = "GET " + requestFile0393 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0393, requestHost0393, requestPort0393, requestHeader0393, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0393 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 18034
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [393] <- Index 393
		if(replayMode)
		{
			long proxyDataRecordId =1624989972340L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [394] <- WEB ADMIN Index 605 ---
		String requestProt0394 = "https";
		String requestHost0394 = "cdn.abcsys.com";
		int    requestPort0394 = 443;
		String requestFile0394 = "/Library/Enterprise/AppLibrary/js/Controllers/ResetPwdCtrl.js" +
				"?_=1624989967432";
		String requestHeader0394 = "GET " + requestFile0394 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0394, requestHost0394, requestPort0394, requestHeader0394, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0394 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4283
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [394] <- Index 394
		if(replayMode)
		{
			long proxyDataRecordId =1624989972525L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [395] <- WEB ADMIN Index 606 ---
		String requestProt0395 = "https";
		String requestHost0395 = "cdn.abcsys.com";
		int    requestPort0395 = 443;
		String requestFile0395 = "/Library/Enterprise/AppLibrary/js/Controllers/ResetUidPwdCtrl.js" +
				"?_=1624989967433";
		String requestHeader0395 = "GET " + requestFile0395 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0395, requestHost0395, requestPort0395, requestHeader0395, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0395 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6409
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [395] <- Index 395
		if(replayMode)
		{
			long proxyDataRecordId =1624989972667L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [396] <- WEB ADMIN Index 607 ---
		String requestProt0396 = "https";
		String requestHost0396 = "cdn.abcsys.com";
		int    requestPort0396 = 443;
		String requestFile0396 = "/Library/Enterprise/AppLibrary/js/Controllers/ThirdPartyPage.js" +
				"?_=1624989967434";
		String requestHeader0396 = "GET " + requestFile0396 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0396, requestHost0396, requestPort0396, requestHeader0396, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0396 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1047
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [396] <- Index 396
		if(replayMode)
		{
			long proxyDataRecordId =1624989972802L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [397] <- WEB ADMIN Index 608 ---
		String requestProt0397 = "https";
		String requestHost0397 = "cdn.abcsys.com";
		int    requestPort0397 = 443;
		String requestFile0397 = "/Library/Enterprise/AppLibrary/js/Controllers/SSOCtrl.js" +
				"?_=1624989967435";
		String requestHeader0397 = "GET " + requestFile0397 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0397, requestHost0397, requestPort0397, requestHeader0397, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0397 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6537
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [397] <- Index 397
		if(replayMode)
		{
			long proxyDataRecordId =1624989972906L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [398] <- WEB ADMIN Index 609 ---
		String requestProt0398 = "https";
		String requestHost0398 = "cdn.abcsys.com";
		int    requestPort0398 = 443;
		String requestFile0398 = "/Library/Enterprise/AppLibrary/js/Controllers/LifeEventChangeCtrl.js" +
				"?_=1624989967436";
		String requestHeader0398 = "GET " + requestFile0398 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0398, requestHost0398, requestPort0398, requestHeader0398, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0398 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2967
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [398] <- Index 398
		if(replayMode)
		{
			long proxyDataRecordId =1624989973024L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3_3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #3 (fragment 4 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [399] <- WEB ADMIN Index 610 ---
		String requestProt0399 = "https";
		String requestHost0399 = "cdn.abcsys.com";
		int    requestPort0399 = 443;
		String requestFile0399 = "/Library/Enterprise/AppLibrary/js/Controllers/ForceResetCtrl.js" +
				"?_=1624989967437";
		String requestHeader0399 = "GET " + requestFile0399 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0399, requestHost0399, requestPort0399, requestHeader0399, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0399 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3747
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [399] <- Index 399
		if(replayMode)
		{
			long proxyDataRecordId =1624989973130L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [400] <- WEB ADMIN Index 611 ---
		String requestProt0400 = "https";
		String requestHost0400 = "apps.abcsys.com";
		int    requestPort0400 = 443;
		String requestFile0400 = "/EnterpriseWebAPI/api/Enrollment/EnrollmentMessages" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213" +
				"&operationCode=0" +
				"&IsCSREnrollment=0";
		requestFile0400 = Lib.replaceTextPattern(requestFile0400, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0400 = "OPTIONS " + requestFile0400 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0400, requestHost0400, requestPort0400, requestHeader0400, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0400 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [400] <- Index 400
		if(replayMode)
		{
			long proxyDataRecordId =1624989973344L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [401] <- WEB ADMIN Index 612 ---
		String requestProt0401 = "https";
		String requestHost0401 = "apps.abcsys.com";
		int    requestPort0401 = 443;
		String requestFile0401 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0401 = Lib.replaceTextPattern(requestFile0401, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0401 = "OPTIONS " + requestFile0401 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0401, requestHost0401, requestPort0401, requestHeader0401, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0401 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [401] <- Index 401
		if(replayMode)
		{
			long proxyDataRecordId =1624989973354L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [402] <- WEB ADMIN Index 614 ---
		String requestProt0402 = "https";
		String requestHost0402 = "apps.abcsys.com";
		int    requestPort0402 = 443;
		String requestFile0402 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0402 = Lib.replaceTextPattern(requestFile0402, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0402 = "OPTIONS " + requestFile0402 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0402, requestHost0402, requestPort0402, requestHeader0402, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0402 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [402] <- Index 402
		if(replayMode)
		{
			long proxyDataRecordId =1624989973360L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [403] <- WEB ADMIN Index 615 ---
		String requestProt0403 = "https";
		String requestHost0403 = "apps.abcsys.com";
		int    requestPort0403 = 443;
		String requestFile0403 = "/EnterpriseWebAPI/api/Employee/EmployeeInfo/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0403 = Lib.replaceTextPattern(requestFile0403, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0403 = "OPTIONS " + requestFile0403 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0403, requestHost0403, requestPort0403, requestHeader0403, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0403 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [403] <- Index 403
		if(replayMode)
		{
			long proxyDataRecordId =1624989973376L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [404] <- WEB ADMIN Index 616 ---
		String requestProt0404 = "https";
		String requestHost0404 = "apps.abcsys.com";
		int    requestPort0404 = 443;
		String requestFile0404 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0404 = Lib.replaceTextPattern(requestFile0404, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0404 = "OPTIONS " + requestFile0404 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0404, requestHost0404, requestPort0404, requestHeader0404, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0404 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [404] <- Index 404
		if(replayMode)
		{
			long proxyDataRecordId =1624989973377L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [405] <- WEB ADMIN Index 617 ---
		String requestProt0405 = "https";
		String requestHost0405 = "apps.abcsys.com";
		int    requestPort0405 = 443;
		String requestFile0405 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/QuickLinks";
		requestFile0405 = Lib.replaceTextPattern(requestFile0405, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0405 = "OPTIONS " + requestFile0405 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0405, requestHost0405, requestPort0405, requestHeader0405, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0405 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [405] <- Index 405
		if(replayMode)
		{
			long proxyDataRecordId =1624989973395L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [406] <- WEB ADMIN Index 619 ---
		String requestProt0406 = "https";
		String requestHost0406 = "apps.abcsys.com";
		int    requestPort0406 = 443;
		String requestFile0406 = "/EnterpriseWebAPI/api/Enrollment/CollectMissingData/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0406 = Lib.replaceTextPattern(requestFile0406, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0406 = "OPTIONS " + requestFile0406 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0406, requestHost0406, requestPort0406, requestHeader0406, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0406 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [406] <- Index 406
		if(replayMode)
		{
			long proxyDataRecordId =1624989973489L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [407] <- WEB ADMIN Index 620 ---
		String requestProt0407 = "https";
		String requestHost0407 = "apps.abcsys.com";
		int    requestPort0407 = 443;
		String requestFile0407 = "/EnterpriseWebAPI/api/Enrollment/EnrollmentMessages" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213" +
				"&operationCode=0" +
				"&IsCSREnrollment=0";
		requestFile0407 = Lib.replaceTextPattern(requestFile0407, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0407 = "GET " + requestFile0407 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0407, requestHost0407, requestPort0407, requestHeader0407, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0407 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 15
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [407] <- Index 407
		if(replayMode)
		{
			long proxyDataRecordId =1624989973493L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [408] <- WEB ADMIN Index 621 ---
		String requestProt0408 = "https";
		String requestHost0408 = "apps.abcsys.com";
		int    requestPort0408 = 443;
		String requestFile0408 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0408 = Lib.replaceTextPattern(requestFile0408, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0408 = "GET " + requestFile0408 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0408, requestHost0408, requestPort0408, requestHeader0408, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0408 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2674
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [408] <- Index 408
		if(replayMode)
		{
			long proxyDataRecordId =1624989973494L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [409] <- WEB ADMIN Index 622 ---
		String requestProt0409 = "https";
		String requestHost0409 = "apps.abcsys.com";
		int    requestPort0409 = 443;
		String requestFile0409 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0409 = Lib.replaceTextPattern(requestFile0409, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0409 = "GET " + requestFile0409 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0409, requestHost0409, requestPort0409, requestHeader0409, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0409 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [409] <- Index 409
		if(replayMode)
		{
			long proxyDataRecordId =1624989973510L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [410] <- WEB ADMIN Index 623 ---
		String requestProt0410 = "https";
		String requestHost0410 = "apps.abcsys.com";
		int    requestPort0410 = 443;
		String requestFile0410 = "/EnterpriseWebAPI/api/Employee/EmployeeInfo/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0410 = Lib.replaceTextPattern(requestFile0410, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0410 = "GET " + requestFile0410 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0410, requestHost0410, requestPort0410, requestHeader0410, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0410 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1569
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [410] <- Index 410
		if(replayMode)
		{
			long proxyDataRecordId =1624989973513L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [411] <- WEB ADMIN Index 625 ---
		String requestProt0411 = "https";
		String requestHost0411 = "apps.abcsys.com";
		int    requestPort0411 = 443;
		String requestFile0411 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0411 = Lib.replaceTextPattern(requestFile0411, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0411 = "GET " + requestFile0411 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0411, requestHost0411, requestPort0411, requestHeader0411, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0411 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [411] <- Index 411
		if(replayMode)
		{
			long proxyDataRecordId =1624989973523L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [412] <- WEB ADMIN Index 627 ---
		String requestProt0412 = "https";
		String requestHost0412 = "apps.abcsys.com";
		int    requestPort0412 = 443;
		String requestFile0412 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/QuickLinks";
		requestFile0412 = Lib.replaceTextPattern(requestFile0412, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0412 = "GET " + requestFile0412 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0412, requestHost0412, requestPort0412, requestHeader0412, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0412 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [412] <- Index 412
		if(replayMode)
		{
			long proxyDataRecordId =1624989973577L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [413] <- WEB ADMIN Index 628 ---
		String requestProt0413 = "https";
		String requestHost0413 = "apps.abcsys.com";
		int    requestPort0413 = 443;
		String requestFile0413 = "/EnterpriseWebAPI/api/Enrollment/CollectMissingData/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0413 = Lib.replaceTextPattern(requestFile0413, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0413 = "GET " + requestFile0413 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0413, requestHost0413, requestPort0413, requestHeader0413, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0413 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 83
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [413] <- Index 413
		if(replayMode)
		{
			long proxyDataRecordId =1624989973600L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [414] <- WEB ADMIN Index 629 ---
		String requestProt0414 = "https";
		String requestHost0414 = "apps.abcsys.com";
		int    requestPort0414 = 443;
		String requestFile0414 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0414 = Lib.replaceTextPattern(requestFile0414, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0414 = "OPTIONS " + requestFile0414 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0414, requestHost0414, requestPort0414, requestHeader0414, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0414 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [414] <- Index 414
		if(replayMode)
		{
			long proxyDataRecordId =1624989973642L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [415] <- WEB ADMIN Index 630 ---
		String requestProt0415 = "https";
		String requestHost0415 = "apps.abcsys.com";
		int    requestPort0415 = 443;
		String requestFile0415 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0415 = Lib.replaceTextPattern(requestFile0415, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0415 = "OPTIONS " + requestFile0415 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0415, requestHost0415, requestPort0415, requestHeader0415, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0415 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [415] <- Index 415
		if(replayMode)
		{
			long proxyDataRecordId =1624989973693L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [416] <- WEB ADMIN Index 631 ---
		String requestProt0416 = "https";
		String requestHost0416 = "apps.abcsys.com";
		int    requestPort0416 = 443;
		String requestFile0416 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/QuickLinks";
		requestFile0416 = Lib.replaceTextPattern(requestFile0416, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0416 = "OPTIONS " + requestFile0416 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0416, requestHost0416, requestPort0416, requestHeader0416, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0416 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [416] <- Index 416
		if(replayMode)
		{
			long proxyDataRecordId =1624989973704L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [417] <- WEB ADMIN Index 632 ---
		String requestProt0417 = "https";
		String requestHost0417 = "apps.abcsys.com";
		int    requestPort0417 = 443;
		String requestFile0417 = "/EnterpriseWebAPI/api/Employee/EmployeeInfo/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0417 = Lib.replaceTextPattern(requestFile0417, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0417 = "OPTIONS " + requestFile0417 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0417, requestHost0417, requestPort0417, requestHeader0417, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0417 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [417] <- Index 417
		if(replayMode)
		{
			long proxyDataRecordId =1624989973705L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [418] <- WEB ADMIN Index 633 ---
		String requestProt0418 = "https";
		String requestHost0418 = "apps.abcsys.com";
		int    requestPort0418 = 443;
		String requestFile0418 = "/EnterpriseWebAPI/api/Enrollment/CollectMissingData/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0418 = Lib.replaceTextPattern(requestFile0418, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0418 = "OPTIONS " + requestFile0418 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0418, requestHost0418, requestPort0418, requestHeader0418, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0418 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [418] <- Index 418
		if(replayMode)
		{
			long proxyDataRecordId =1624989973719L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3_3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3_4.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #3 (fragment 5 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [419] <- WEB ADMIN Index 635 ---
		String requestProt0419 = "https";
		String requestHost0419 = "apps.abcsys.com";
		int    requestPort0419 = 443;
		String requestFile0419 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0419 = Lib.replaceTextPattern(requestFile0419, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0419 = "OPTIONS " + requestFile0419 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0419, requestHost0419, requestPort0419, requestHeader0419, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0419 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [419] <- Index 419
		if(replayMode)
		{
			long proxyDataRecordId =1624989973737L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [420] <- WEB ADMIN Index 636 ---
		String requestProt0420 = "https";
		String requestHost0420 = "apps.abcsys.com";
		int    requestPort0420 = 443;
		String requestFile0420 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0420 = Lib.replaceTextPattern(requestFile0420, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0420 = "OPTIONS " + requestFile0420 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0420, requestHost0420, requestPort0420, requestHeader0420, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0420 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [420] <- Index 420
		if(replayMode)
		{
			long proxyDataRecordId =1624989973765L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [421] <- WEB ADMIN Index 637 ---
		String requestProt0421 = "https";
		String requestHost0421 = "apps.abcsys.com";
		int    requestPort0421 = 443;
		String requestFile0421 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0421 = Lib.replaceTextPattern(requestFile0421, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0421 = "GET " + requestFile0421 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0421, requestHost0421, requestPort0421, requestHeader0421, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0421 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2674
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [421] <- Index 421
		if(replayMode)
		{
			long proxyDataRecordId =1624989973795L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [422] <- WEB ADMIN Index 638 ---
		String requestProt0422 = "https";
		String requestHost0422 = "apps.abcsys.com";
		int    requestPort0422 = 443;
		String requestFile0422 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0422 = Lib.replaceTextPattern(requestFile0422, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0422 = "GET " + requestFile0422 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0422, requestHost0422, requestPort0422, requestHeader0422, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0422 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [422] <- Index 422
		if(replayMode)
		{
			long proxyDataRecordId =1624989973803L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [423] <- WEB ADMIN Index 639 ---
		String requestProt0423 = "https";
		String requestHost0423 = "apps.abcsys.com";
		int    requestPort0423 = 443;
		String requestFile0423 = "/EnterpriseWebAPI/api/Employee/EmployeeInfo/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0423 = Lib.replaceTextPattern(requestFile0423, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0423 = "GET " + requestFile0423 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0423, requestHost0423, requestPort0423, requestHeader0423, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0423 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1569
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [423] <- Index 423
		if(replayMode)
		{
			long proxyDataRecordId =1624989973804L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [424] <- WEB ADMIN Index 640 ---
		String requestProt0424 = "https";
		String requestHost0424 = "apps.abcsys.com";
		int    requestPort0424 = 443;
		String requestFile0424 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/QuickLinks";
		requestFile0424 = Lib.replaceTextPattern(requestFile0424, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0424 = "GET " + requestFile0424 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0424, requestHost0424, requestPort0424, requestHeader0424, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0424 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [424] <- Index 424
		if(replayMode)
		{
			long proxyDataRecordId =1624989973821L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [425] <- WEB ADMIN Index 641 ---
		String requestProt0425 = "https";
		String requestHost0425 = "apps.abcsys.com";
		int    requestPort0425 = 443;
		String requestFile0425 = "/EnterpriseWebAPI/api/Enrollment/CollectMissingData/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0425 = Lib.replaceTextPattern(requestFile0425, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0425 = "GET " + requestFile0425 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0425, requestHost0425, requestPort0425, requestHeader0425, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0425 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 83
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [425] <- Index 425
		if(replayMode)
		{
			long proxyDataRecordId =1624989973835L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [426] <- WEB ADMIN Index 642 ---
		String requestProt0426 = "https";
		String requestHost0426 = "apps.abcsys.com";
		int    requestPort0426 = 443;
		String requestFile0426 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0426 = Lib.replaceTextPattern(requestFile0426, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0426 = "GET " + requestFile0426 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0426, requestHost0426, requestPort0426, requestHeader0426, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0426 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [426] <- Index 426
		if(replayMode)
		{
			long proxyDataRecordId =1624989973860L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [427] <- WEB ADMIN Index 643 ---
		String requestProt0427 = "https";
		String requestHost0427 = "apps.abcsys.com";
		int    requestPort0427 = 443;
		String requestFile0427 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0427 = Lib.replaceTextPattern(requestFile0427, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0427 = "GET " + requestFile0427 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0427, requestHost0427, requestPort0427, requestHeader0427, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0427 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2674
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [427] <- Index 427
		if(replayMode)
		{
			long proxyDataRecordId =1624989973906L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [428] <- WEB ADMIN Index 644 ---
		String requestProt0428 = "https";
		String requestHost0428 = "apps.abcsys.com";
		int    requestPort0428 = 443;
		String requestFile0428 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0428 = Lib.replaceTextPattern(requestFile0428, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0428 = "OPTIONS " + requestFile0428 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0428, requestHost0428, requestPort0428, requestHeader0428, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0428 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [428] <- Index 428
		if(replayMode)
		{
			long proxyDataRecordId =1624989973946L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [429] <- WEB ADMIN Index 645 ---
		String requestProt0429 = "https";
		String requestHost0429 = "apps.abcsys.com";
		int    requestPort0429 = 443;
		String requestFile0429 = "/EnterpriseWebAPI/api/Employee/EmployeeInfo/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0429 = Lib.replaceTextPattern(requestFile0429, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0429 = "OPTIONS " + requestFile0429 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0429, requestHost0429, requestPort0429, requestHeader0429, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0429 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [429] <- Index 429
		if(replayMode)
		{
			long proxyDataRecordId =1624989973951L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [430] <- WEB ADMIN Index 646 ---
		String requestProt0430 = "https";
		String requestHost0430 = "apps.abcsys.com";
		int    requestPort0430 = 443;
		String requestFile0430 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/QuickLinks";
		requestFile0430 = Lib.replaceTextPattern(requestFile0430, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0430 = "OPTIONS " + requestFile0430 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0430, requestHost0430, requestPort0430, requestHeader0430, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0430 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [430] <- Index 430
		if(replayMode)
		{
			long proxyDataRecordId =1624989973953L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [431] <- WEB ADMIN Index 647 ---
		String requestProt0431 = "https";
		String requestHost0431 = "apps.abcsys.com";
		int    requestPort0431 = 443;
		String requestFile0431 = "/EnterpriseWebAPI/api/Enrollment/CollectMissingData/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0431 = Lib.replaceTextPattern(requestFile0431, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0431 = "OPTIONS " + requestFile0431 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0431, requestHost0431, requestPort0431, requestHeader0431, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0431 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [431] <- Index 431
		if(replayMode)
		{
			long proxyDataRecordId =1624989973989L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [432] <- WEB ADMIN Index 648 ---
		String requestProt0432 = "https";
		String requestHost0432 = "apps.abcsys.com";
		int    requestPort0432 = 443;
		String requestFile0432 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0432 = Lib.replaceTextPattern(requestFile0432, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0432 = "OPTIONS " + requestFile0432 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0432, requestHost0432, requestPort0432, requestHeader0432, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0432 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [432] <- Index 432
		if(replayMode)
		{
			long proxyDataRecordId =1624989974015L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [433] <- WEB ADMIN Index 649 ---
		String requestProt0433 = "https";
		String requestHost0433 = "apps.abcsys.com";
		int    requestPort0433 = 443;
		String requestFile0433 = "/EnterpriseWebAPI/api/Product/ProductVendorListPlusLinks/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&linkType=hometilelink";
		requestFile0433 = Lib.replaceTextPattern(requestFile0433, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0433 = "OPTIONS " + requestFile0433 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0433, requestHost0433, requestPort0433, requestHeader0433, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0433 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [433] <- Index 433
		if(replayMode)
		{
			long proxyDataRecordId =1624989974053L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [434] <- WEB ADMIN Index 650 ---
		String requestProt0434 = "https";
		String requestHost0434 = "apps.abcsys.com";
		int    requestPort0434 = 443;
		String requestFile0434 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0434 = Lib.replaceTextPattern(requestFile0434, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0434 = "GET " + requestFile0434 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0434, requestHost0434, requestPort0434, requestHeader0434, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0434 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [434] <- Index 434
		if(replayMode)
		{
			long proxyDataRecordId =1624989974055L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [435] <- WEB ADMIN Index 651 ---
		String requestProt0435 = "https";
		String requestHost0435 = "apps.abcsys.com";
		int    requestPort0435 = 443;
		String requestFile0435 = "/EnterpriseWebAPI/api/CMS/HomeContent/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0435 = Lib.replaceTextPattern(requestFile0435, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0435 = "OPTIONS " + requestFile0435 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0435, requestHost0435, requestPort0435, requestHeader0435, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0435 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [435] <- Index 435
		if(replayMode)
		{
			long proxyDataRecordId =1624989974056L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [436] <- WEB ADMIN Index 652 ---
		String requestProt0436 = "https";
		String requestHost0436 = "apps.abcsys.com";
		int    requestPort0436 = 443;
		String requestFile0436 = "/EnterpriseWebAPI/api/Employee/EmployeeInfo/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0436 = Lib.replaceTextPattern(requestFile0436, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0436 = "GET " + requestFile0436 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0436, requestHost0436, requestPort0436, requestHeader0436, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0436 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1569
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [436] <- Index 436
		if(replayMode)
		{
			long proxyDataRecordId =1624989974065L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [437] <- WEB ADMIN Index 653 ---
		String requestProt0437 = "https";
		String requestHost0437 = "apps.abcsys.com";
		int    requestPort0437 = 443;
		String requestFile0437 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/QuickLinks";
		requestFile0437 = Lib.replaceTextPattern(requestFile0437, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0437 = "GET " + requestFile0437 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0437, requestHost0437, requestPort0437, requestHeader0437, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0437 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [437] <- Index 437
		if(replayMode)
		{
			long proxyDataRecordId =1624989974081L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [438] <- WEB ADMIN Index 654 ---
		String requestProt0438 = "https";
		String requestHost0438 = "apps.abcsys.com";
		int    requestPort0438 = 443;
		String requestFile0438 = "/EnterpriseWebAPI/api/Enrollment/CollectMissingData/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0438 = Lib.replaceTextPattern(requestFile0438, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0438 = "GET " + requestFile0438 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0438, requestHost0438, requestPort0438, requestHeader0438, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0438 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 83
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [438] <- Index 438
		if(replayMode)
		{
			long proxyDataRecordId =1624989974109L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3_4 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3_5.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #3 (fragment 6 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [439] <- WEB ADMIN Index 655 ---
		String requestProt0439 = "https";
		String requestHost0439 = "apps.abcsys.com";
		int    requestPort0439 = 443;
		String requestFile0439 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0439 = Lib.replaceTextPattern(requestFile0439, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0439 = "GET " + requestFile0439 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0439, requestHost0439, requestPort0439, requestHeader0439, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0439 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [439] <- Index 439
		if(replayMode)
		{
			long proxyDataRecordId =1624989974168L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [440] <- WEB ADMIN Index 656 ---
		String requestProt0440 = "https";
		String requestHost0440 = "apps.abcsys.com";
		int    requestPort0440 = 443;
		String requestFile0440 = "/EnterpriseWebAPI/api/Product/ProductVendorListPlusLinks/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&linkType=hometilelink";
		requestFile0440 = Lib.replaceTextPattern(requestFile0440, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0440 = "GET " + requestFile0440 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0440, requestHost0440, requestPort0440, requestHeader0440, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0440 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 982
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [440] <- Index 440
		if(replayMode)
		{
			long proxyDataRecordId =1624989974169L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [441] <- WEB ADMIN Index 657 ---
		String requestProt0441 = "https";
		String requestHost0441 = "apps.abcsys.com";
		int    requestPort0441 = 443;
		String requestFile0441 = "/EnterpriseWebAPI/api/CMS/HomeContent/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0441 = Lib.replaceTextPattern(requestFile0441, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0441 = "GET " + requestFile0441 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0441, requestHost0441, requestPort0441, requestHeader0441, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0441 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 561
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [441] <- Index 441
		if(replayMode)
		{
			long proxyDataRecordId =1624989974195L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [442] <- WEB ADMIN Index 658 ---
		String requestProt0442 = "https";
		String requestHost0442 = "apps.abcsys.com";
		int    requestPort0442 = 443;
		String requestFile0442 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/null";
		requestFile0442 = Lib.replaceTextPattern(requestFile0442, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0442 = "OPTIONS " + requestFile0442 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0442, requestHost0442, requestPort0442, requestHeader0442, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0442 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [442] <- Index 442
		if(replayMode)
		{
			long proxyDataRecordId =1624989974196L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [443] <- WEB ADMIN Index 659 ---
		String requestProt0443 = "https";
		String requestHost0443 = "apps.abcsys.com";
		int    requestPort0443 = 443;
		String requestFile0443 = "/EnterpriseWebAPI/api/CMS/HomeContent/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0443 = Lib.replaceTextPattern(requestFile0443, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0443 = "GET " + requestFile0443 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0443, requestHost0443, requestPort0443, requestHeader0443, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0443 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 561
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [443] <- Index 443
		if(replayMode)
		{
			long proxyDataRecordId =1624989974230L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [444] <- WEB ADMIN Index 660 ---
		String requestProt0444 = "https";
		String requestHost0444 = "apps.abcsys.com";
		int    requestPort0444 = 443;
		String requestFile0444 = "/EnterpriseWebAPI/api/CMS/HomeContent/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0444 = Lib.replaceTextPattern(requestFile0444, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0444 = "OPTIONS " + requestFile0444 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0444, requestHost0444, requestPort0444, requestHeader0444, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0444 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [444] <- Index 444
		if(replayMode)
		{
			long proxyDataRecordId =1624989974244L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [445] <- WEB ADMIN Index 661 ---
		String requestProt0445 = "https";
		String requestHost0445 = "apps.abcsys.com";
		int    requestPort0445 = 443;
		String requestFile0445 = "/EnterpriseWebAPI/api/Product/ProductVendorListPlusLinks/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&linkType=hometilelink";
		requestFile0445 = Lib.replaceTextPattern(requestFile0445, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0445 = "GET " + requestFile0445 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0445, requestHost0445, requestPort0445, requestHeader0445, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0445 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 982
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [445] <- Index 445
		if(replayMode)
		{
			long proxyDataRecordId =1624989974303L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [446] <- WEB ADMIN Index 662 ---
		String requestProt0446 = "https";
		String requestHost0446 = "apps.abcsys.com";
		int    requestPort0446 = 443;
		String requestFile0446 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/null";
		requestFile0446 = Lib.replaceTextPattern(requestFile0446, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0446 = "GET " + requestFile0446 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0446, requestHost0446, requestPort0446, requestHeader0446, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0446 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [446] <- Index 446
		if(replayMode)
		{
			long proxyDataRecordId =1624989974336L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [447] <- WEB ADMIN Index 663 ---
		String requestProt0447 = "https";
		String requestHost0447 = "apps.abcsys.com";
		int    requestPort0447 = 443;
		String requestFile0447 = "/EnterpriseWebAPI/api/Product/ProductVendorListPlusLinks/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&linkType=hometilelink";
		requestFile0447 = Lib.replaceTextPattern(requestFile0447, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0447 = "OPTIONS " + requestFile0447 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0447, requestHost0447, requestPort0447, requestHeader0447, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0447 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [447] <- Index 447
		if(replayMode)
		{
			long proxyDataRecordId =1624989974342L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [448] <- WEB ADMIN Index 664 ---
		String requestProt0448 = "https";
		String requestHost0448 = "apps.abcsys.com";
		int    requestPort0448 = 443;
		String requestFile0448 = "/EnterpriseWebAPI/api/CMS/HomeContent/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0448 = Lib.replaceTextPattern(requestFile0448, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0448 = "GET " + requestFile0448 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0448, requestHost0448, requestPort0448, requestHeader0448, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0448 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 561
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [448] <- Index 448
		if(replayMode)
		{
			long proxyDataRecordId =1624989974356L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [449] <- WEB ADMIN Index 666 ---
		String requestProt0449 = "https";
		String requestHost0449 = "apps.abcsys.com";
		int    requestPort0449 = 443;
		String requestFile0449 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/null";
		requestFile0449 = Lib.replaceTextPattern(requestFile0449, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0449 = "OPTIONS " + requestFile0449 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0449, requestHost0449, requestPort0449, requestHeader0449, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0449 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [449] <- Index 449
		if(replayMode)
		{
			long proxyDataRecordId =1624989974381L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [450] <- WEB ADMIN Index 667 ---
		String requestProt0450 = "https";
		String requestHost0450 = "apps.abcsys.com";
		int    requestPort0450 = 443;
		String requestFile0450 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/null";
		requestFile0450 = Lib.replaceTextPattern(requestFile0450, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0450 = "OPTIONS " + requestFile0450 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0450, requestHost0450, requestPort0450, requestHeader0450, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0450 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [450] <- Index 450
		if(replayMode)
		{
			long proxyDataRecordId =1624989974383L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [451] <- WEB ADMIN Index 668 ---
		String requestProt0451 = "https";
		String requestHost0451 = "apps.abcsys.com";
		int    requestPort0451 = 443;
		String requestFile0451 = "/EnterpriseWebAPI/api/Employee/ValidateLoggedInUserSurveyQuestions/e2abaa02-80da-47db-aec8-981392dc655f/e14a22f5-f444-4222-a9a4-a303a2d6879c/bf69af09-741b-40c1-987f-ec721fdf7213/";
		requestFile0451 = Lib.replaceTextPattern(requestFile0451, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0451 = "OPTIONS " + requestFile0451 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0451, requestHost0451, requestPort0451, requestHeader0451, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0451 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [451] <- Index 451
		if(replayMode)
		{
			long proxyDataRecordId =1624989974449L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [452] <- WEB ADMIN Index 669 ---
		String requestProt0452 = "https";
		String requestHost0452 = "apps.abcsys.com";
		int    requestPort0452 = 443;
		String requestFile0452 = "/EnterpriseWebAPI/api/Product/ProductVendorListPlusLinks/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&linkType=hometilelink";
		requestFile0452 = Lib.replaceTextPattern(requestFile0452, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0452 = "GET " + requestFile0452 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0452, requestHost0452, requestPort0452, requestHeader0452, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0452 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 982
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [452] <- Index 452
		if(replayMode)
		{
			long proxyDataRecordId =1624989974454L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [453] <- WEB ADMIN Index 670 ---
		String requestProt0453 = "https";
		String requestHost0453 = "apps.abcsys.com";
		int    requestPort0453 = 443;
		String requestFile0453 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/null";
		requestFile0453 = Lib.replaceTextPattern(requestFile0453, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0453 = "GET " + requestFile0453 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0453, requestHost0453, requestPort0453, requestHeader0453, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0453 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [453] <- Index 453
		if(replayMode)
		{
			long proxyDataRecordId =1624989974477L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [454] <- WEB ADMIN Index 671 ---
		String requestProt0454 = "https";
		String requestHost0454 = "apps.abcsys.com";
		int    requestPort0454 = 443;
		String requestFile0454 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/null";
		requestFile0454 = Lib.replaceTextPattern(requestFile0454, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0454 = "GET " + requestFile0454 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0454, requestHost0454, requestPort0454, requestHeader0454, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0454 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [454] <- Index 454
		if(replayMode)
		{
			long proxyDataRecordId =1624989974483L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [455] <- WEB ADMIN Index 672 ---
		String requestProt0455 = "https";
		String requestHost0455 = "apps.abcsys.com";
		int    requestPort0455 = 443;
		String requestFile0455 = "/EnterpriseWebAPI/api/Employee/ValidateLoggedInUserSurveyQuestions/e2abaa02-80da-47db-aec8-981392dc655f/e14a22f5-f444-4222-a9a4-a303a2d6879c/bf69af09-741b-40c1-987f-ec721fdf7213/";
		requestFile0455 = Lib.replaceTextPattern(requestFile0455, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0455 = "OPTIONS " + requestFile0455 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0455, requestHost0455, requestPort0455, requestHeader0455, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0455 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [455] <- Index 455
		if(replayMode)
		{
			long proxyDataRecordId =1624989974510L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [456] <- WEB ADMIN Index 673 ---
		String requestProt0456 = "https";
		String requestHost0456 = "apps.abcsys.com";
		int    requestPort0456 = 443;
		String requestFile0456 = "/EnterpriseWebAPI/api/Employee/ValidateLoggedInUserSurveyQuestions/e2abaa02-80da-47db-aec8-981392dc655f/e14a22f5-f444-4222-a9a4-a303a2d6879c/bf69af09-741b-40c1-987f-ec721fdf7213/";
		requestFile0456 = Lib.replaceTextPattern(requestFile0456, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0456 = "GET " + requestFile0456 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0456, requestHost0456, requestPort0456, requestHeader0456, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0456 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 4
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [456] <- Index 456
		if(replayMode)
		{
			long proxyDataRecordId =1624989974551L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [457] <- WEB ADMIN Index 676 ---
		String requestProt0457 = "https";
		String requestHost0457 = "apps.abcsys.com";
		int    requestPort0457 = 443;
		String requestFile0457 = "/EnterpriseWebAPI/api/Employee/ValidateLoggedInUserSurveyQuestions/e2abaa02-80da-47db-aec8-981392dc655f/e14a22f5-f444-4222-a9a4-a303a2d6879c/bf69af09-741b-40c1-987f-ec721fdf7213/";
		requestFile0457 = Lib.replaceTextPattern(requestFile0457, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0457 = "GET " + requestFile0457 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0457, requestHost0457, requestPort0457, requestHeader0457, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0457 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 4
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [457] <- Index 457
		if(replayMode)
		{
			long proxyDataRecordId =1624989974608L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [458] <- WEB ADMIN Index 677 ---
		String requestProt0458 = "https";
		String requestHost0458 = "apps.abcsys.com";
		int    requestPort0458 = 443;
		String requestFile0458 = "/EnterpriseWebAPI/api/Employee/ValidateLoggedInUserSurveyQuestions/e2abaa02-80da-47db-aec8-981392dc655f/e14a22f5-f444-4222-a9a4-a303a2d6879c/bf69af09-741b-40c1-987f-ec721fdf7213/";
		requestFile0458 = Lib.replaceTextPattern(requestFile0458, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0458 = "GET " + requestFile0458 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0458, requestHost0458, requestPort0458, requestHeader0458, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0458 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 4
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [458] <- Index 458
		if(replayMode)
		{
			long proxyDataRecordId =1624989974647L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3_5 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #4: Pet Insurance
		// # ----------------------



		// --- HTTP REQUEST: Test [460] <- WEB ADMIN Index 679 ---
		log();
		log("# title: 404 - File or directory not found.");
		String requestProt0460 = "https";
		String requestHost0460 = "staging.abcsys.com";
		int    requestPort0460 = 443;
		String requestFile0460 = "/Medicare/index.html";
		String requestHeader0460 = "GET " + requestFile0460 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: staging.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0460, requestHost0460, requestPort0460, requestHeader0460, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0460 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 404, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 1245
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {404}, null, null, null);		// Test [460] <- Index 460
		if(replayMode)
		{
			long proxyDataRecordId =1624989996108L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [461] <- WEB ADMIN Index 680 ---
		log();
		log("# title: 404 - File or directory not found.");
		String requestProt0461 = "https";
		String requestHost0461 = "staging.abcsys.com";
		int    requestPort0461 = 443;
		String requestFile0461 = "/MMWebDev/Images/arrow_up.png";
		String requestHeader0461 = "GET " + requestFile0461 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: staging.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0461, requestHost0461, requestPort0461, requestHeader0461, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0461 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 404, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 1245
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {404}, null, null, null);		// Test [461] <- Index 461
		if(replayMode)
		{
			long proxyDataRecordId =1624989996214L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [462] <- WEB ADMIN Index 681 ---
		String requestProt0462 = "https";
		String requestHost0462 = "apps.abcsys.com";
		int    requestPort0462 = 443;
		String requestFile0462 = "/EnterpriseWebAPI/api/Product/ProductContent/e2abaa02-80da-47db-aec8-981392dc655f/febd4c8a-ca29-4636-affc-f6e2c990eb95/BenefitId";
		requestFile0462 = Lib.replaceTextPattern(requestFile0462, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0462 = "OPTIONS " + requestFile0462 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0462, requestHost0462, requestPort0462, requestHeader0462, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0462 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [462] <- Index 462
		if(replayMode)
		{
			long proxyDataRecordId =1624989996222L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [463] <- WEB ADMIN Index 684 ---
		String requestProt0463 = "https";
		String requestHost0463 = "apps.abcsys.com";
		int    requestPort0463 = 443;
		String requestFile0463 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0463 = Lib.replaceTextPattern(requestFile0463, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0463 = "OPTIONS " + requestFile0463 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0463, requestHost0463, requestPort0463, requestHeader0463, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0463 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [463] <- Index 463
		if(replayMode)
		{
			long proxyDataRecordId =1624989996259L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [464] <- WEB ADMIN Index 686 ---
		String requestProt0464 = "https";
		String requestHost0464 = "apps.abcsys.com";
		int    requestPort0464 = 443;
		String requestFile0464 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0464 = Lib.replaceTextPattern(requestFile0464, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0464 = "OPTIONS " + requestFile0464 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0464, requestHost0464, requestPort0464, requestHeader0464, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0464 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [464] <- Index 464
		if(replayMode)
		{
			long proxyDataRecordId =1624989996261L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [465] <- WEB ADMIN Index 693 ---
		String requestProt0465 = "https";
		String requestHost0465 = "apps.abcsys.com";
		int    requestPort0465 = 443;
		String requestFile0465 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0465 = Lib.replaceTextPattern(requestFile0465, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0465 = "GET " + requestFile0465 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0465, requestHost0465, requestPort0465, requestHeader0465, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0465 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [465] <- Index 465
		if(replayMode)
		{
			long proxyDataRecordId =1624989996376L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [466] <- WEB ADMIN Index 694 ---
		String requestProt0466 = "https";
		String requestHost0466 = "apps.abcsys.com";
		int    requestPort0466 = 443;
		String requestFile0466 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0466 = Lib.replaceTextPattern(requestFile0466, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0466 = "GET " + requestFile0466 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0466, requestHost0466, requestPort0466, requestHeader0466, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0466 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2674
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [466] <- Index 466
		if(replayMode)
		{
			long proxyDataRecordId =1624989996380L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [467] <- WEB ADMIN Index 701 ---
		String requestProt0467 = "https";
		String requestHost0467 = "apps.abcsys.com";
		int    requestPort0467 = 443;
		String requestFile0467 = "/EnterpriseWebAPI/api/Product/ProductContent/e2abaa02-80da-47db-aec8-981392dc655f/febd4c8a-ca29-4636-affc-f6e2c990eb95/BenefitId";
		requestFile0467 = Lib.replaceTextPattern(requestFile0467, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0467 = "GET " + requestFile0467 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0467, requestHost0467, requestPort0467, requestHeader0467, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0467 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1760
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [467] <- Index 467
		if(replayMode)
		{
			long proxyDataRecordId =1624989996516L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [468] <- WEB ADMIN Index 702 ---
		String requestProt0468 = "https";
		String requestHost0468 = "apps.abcsys.com";
		int    requestPort0468 = 443;
		String requestFile0468 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0468 = Lib.replaceTextPattern(requestFile0468, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0468 = "GET " + requestFile0468 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0468, requestHost0468, requestPort0468, requestHeader0468, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0468 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2674
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [468] <- Index 468
		if(replayMode)
		{
			long proxyDataRecordId =1624989996524L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [469] <- WEB ADMIN Index 705 ---
		String requestProt0469 = "https";
		String requestHost0469 = "apps.abcsys.com";
		int    requestPort0469 = 443;
		String requestFile0469 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0469 = Lib.replaceTextPattern(requestFile0469, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0469 = "GET " + requestFile0469 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0469, requestHost0469, requestPort0469, requestHeader0469, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0469 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [469] <- Index 469
		if(replayMode)
		{
			long proxyDataRecordId =1624989996562L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [470] <- WEB ADMIN Index 714 ---
		String requestProt0470 = "https";
		String requestHost0470 = "cdn.abcsys.com";
		int    requestPort0470 = 443;
		String requestFile0470 = "/Library/Enterprise/Content/App/SingleWeb.css";
		String requestHeader0470 = "GET " + requestFile0470 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0470, requestHost0470, requestPort0470, requestHeader0470, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0470 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 10883
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [470] <- Index 470
		if(replayMode)
		{
			long proxyDataRecordId =1624989996791L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [471] <- WEB ADMIN Index 715 ---
		String requestProt0471 = "https";
		String requestHost0471 = "cdn.abcsys.com";
		int    requestPort0471 = 443;
		String requestFile0471 = "/Library/Enterprise/AppLibrary/css/Style.css" +
				"?v=1.1";
		String requestHeader0471 = "GET " + requestFile0471 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0471, requestHost0471, requestPort0471, requestHeader0471, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0471 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 126321
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [471] <- Index 471
		if(replayMode)
		{
			long proxyDataRecordId =1624989996792L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [472] <- WEB ADMIN Index 716 ---
		String requestProt0472 = "https";
		String requestHost0472 = "cdn.abcsys.com";
		int    requestPort0472 = 443;
		String requestFile0472 = "/Library/Enterprise/Content/app.css";
		String requestHeader0472 = "GET " + requestFile0472 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0472, requestHost0472, requestPort0472, requestHeader0472, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0472 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 132702
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [472] <- Index 472
		if(replayMode)
		{
			long proxyDataRecordId =1624989996793L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [473] <- WEB ADMIN Index 717 ---
		String requestProt0473 = "https";
		String requestHost0473 = "cdn.abcsys.com";
		int    requestPort0473 = 443;
		String requestFile0473 = "/Library/Enterprise/js/jquery/jquery-ui.css";
		String requestHeader0473 = "GET " + requestFile0473 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0473, requestHost0473, requestPort0473, requestHeader0473, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0473 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 36435
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [473] <- Index 473
		if(replayMode)
		{
			long proxyDataRecordId =1624989996795L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [474] <- WEB ADMIN Index 718 ---
		String requestProt0474 = "https";
		String requestHost0474 = "apps.abcsys.com";
		int    requestPort0474 = 443;
		String requestFile0474 = "/EnterpriseWebAPI/api/Product/ProductVendorList/e14a22f5-f444-4222-a9a4-a303a2d6879c";
		String requestHeader0474 = "OPTIONS " + requestFile0474 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0474, requestHost0474, requestPort0474, requestHeader0474, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0474 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [474] <- Index 474
		if(replayMode)
		{
			long proxyDataRecordId =1624989996808L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [475] <- WEB ADMIN Index 719 ---
		String requestProt0475 = "https";
		String requestHost0475 = "cdn.abcsys.com";
		int    requestPort0475 = 443;
		String requestFile0475 = "/Library/Enterprise/js/angular/angular-animate.js" +
				"?_=1624989996487";
		String requestHeader0475 = "GET " + requestFile0475 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0475, requestHost0475, requestPort0475, requestHeader0475, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0475 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 104195
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [475] <- Index 475
		if(replayMode)
		{
			long proxyDataRecordId =1624989996880L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [476] <- WEB ADMIN Index 720 ---
		String requestProt0476 = "https";
		String requestHost0476 = "cdn.abcsys.com";
		int    requestPort0476 = 443;
		String requestFile0476 = "/Library/Enterprise/js/App/bootstrap.js" +
				"?_=1624989996488";
		String requestHeader0476 = "GET " + requestFile0476 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0476, requestHost0476, requestPort0476, requestHeader0476, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0476 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 77458
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [476] <- Index 476
		if(replayMode)
		{
			long proxyDataRecordId =1624989996890L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [477] <- WEB ADMIN Index 721 ---
		String requestProt0477 = "https";
		String requestHost0477 = "cdn.abcsys.com";
		int    requestPort0477 = 443;
		String requestFile0477 = "/Library/Enterprise/js/App/owl.carousel.min.js" +
				"?_=1624989996489";
		String requestHeader0477 = "GET " + requestFile0477 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0477, requestHost0477, requestPort0477, requestHeader0477, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0477 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15060
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [477] <- Index 477
		if(replayMode)
		{
			long proxyDataRecordId =1624989996901L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [478] <- WEB ADMIN Index 722 ---
		String requestProt0478 = "https";
		String requestHost0478 = "apps.abcsys.com";
		int    requestPort0478 = 443;
		String requestFile0478 = "/EnterpriseWebAPI/api/Product/ProductVendorList/e14a22f5-f444-4222-a9a4-a303a2d6879c";
		String requestHeader0478 = "GET " + requestFile0478 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0478, requestHost0478, requestPort0478, requestHeader0478, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0478 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 3081
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [478] <- Index 478
		if(replayMode)
		{
			long proxyDataRecordId =1624989996906L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [479] <- WEB ADMIN Index 723 ---
		String requestProt0479 = "https";
		String requestHost0479 = "cdn.abcsys.com";
		int    requestPort0479 = 443;
		String requestFile0479 = "/Library/Enterprise/js/App/jquery.parallax-1.1.js" +
				"?_=1624989996490";
		String requestHeader0479 = "GET " + requestFile0479 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0479, requestHost0479, requestPort0479, requestHeader0479, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0479 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2583
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [479] <- Index 479
		if(replayMode)
		{
			long proxyDataRecordId =1624989996959L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #4 (fragment 2 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [480] <- WEB ADMIN Index 724 ---
		String requestProt0480 = "https";
		String requestHost0480 = "apps.abcsys.com";
		int    requestPort0480 = 443;
		String requestFile0480 = "/EnterpriseWebAPI/api/Product/ProductContent/e14a22f5-f444-4222-a9a4-a303a2d6879c/febd4c8a-ca29-4636-affc-f6e2c990eb95/BenefitId";
		String requestHeader0480 = "OPTIONS " + requestFile0480 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0480, requestHost0480, requestPort0480, requestHeader0480, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0480 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [480] <- Index 480
		if(replayMode)
		{
			long proxyDataRecordId =1624989997130L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [481] <- WEB ADMIN Index 725 ---
		String requestProt0481 = "https";
		String requestHost0481 = "apps.abcsys.com";
		int    requestPort0481 = 443;
		String requestFile0481 = "/EnterpriseWebAPI/api/Product/ProductContent/e14a22f5-f444-4222-a9a4-a303a2d6879c/febd4c8a-ca29-4636-affc-f6e2c990eb95/BenefitId";
		String requestHeader0481 = "GET " + requestFile0481 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0481, requestHost0481, requestPort0481, requestHeader0481, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0481 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 36215
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [481] <- Index 481
		if(replayMode)
		{
			long proxyDataRecordId =1624989997239L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [482] <- WEB ADMIN Index 726 ---
		String requestProt0482 = "https";
		String requestHost0482 = "apps.abcsys.com";
		int    requestPort0482 = 443;
		String requestFile0482 = "/EnterpriseWebAPI/api/Enrollment/OpenEnrollmentDates/e2abaa02-80da-47db-aec8-981392dc655f/febd4c8a-ca29-4636-affc-f6e2c990eb95/BenefitId";
		requestFile0482 = Lib.replaceTextPattern(requestFile0482, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0482 = "OPTIONS " + requestFile0482 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0482, requestHost0482, requestPort0482, requestHeader0482, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0482 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [482] <- Index 482
		if(replayMode)
		{
			long proxyDataRecordId =1624989997630L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [483] <- WEB ADMIN Index 727 ---
		String requestProt0483 = "https";
		String requestHost0483 = "apps.abcsys.com";
		int    requestPort0483 = 443;
		String requestFile0483 = "/EnterpriseWebAPI/api/Product/EligibilityRules/e2abaa02-80da-47db-aec8-981392dc655f/febd4c8a-ca29-4636-affc-f6e2c990eb95/BenefitId";
		requestFile0483 = Lib.replaceTextPattern(requestFile0483, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0483 = "OPTIONS " + requestFile0483 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0483, requestHost0483, requestPort0483, requestHeader0483, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0483 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [483] <- Index 483
		if(replayMode)
		{
			long proxyDataRecordId =1624989997632L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [484] <- WEB ADMIN Index 729 ---
		String requestProt0484 = "https";
		String requestHost0484 = "apps.abcsys.com";
		int    requestPort0484 = 443;
		String requestFile0484 = "/EnterpriseWebAPI/api/CMS/ProductVideo/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0484 = Lib.replaceTextPattern(requestFile0484, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0484 = "OPTIONS " + requestFile0484 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0484, requestHost0484, requestPort0484, requestHeader0484, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0484 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [484] <- Index 484
		if(replayMode)
		{
			long proxyDataRecordId =1624989997643L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [485] <- WEB ADMIN Index 735 ---
		String requestProt0485 = "https";
		String requestHost0485 = "apps.abcsys.com";
		int    requestPort0485 = 443;
		String requestFile0485 = "/EnterpriseWebAPI/api/Product/EligibilityRules/e2abaa02-80da-47db-aec8-981392dc655f/febd4c8a-ca29-4636-affc-f6e2c990eb95/BenefitId";
		requestFile0485 = Lib.replaceTextPattern(requestFile0485, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0485 = "GET " + requestFile0485 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0485, requestHost0485, requestPort0485, requestHeader0485, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0485 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 3578
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [485] <- Index 485
		if(replayMode)
		{
			long proxyDataRecordId =1624989997780L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [486] <- WEB ADMIN Index 737 ---
		String requestProt0486 = "https";
		String requestHost0486 = "apps.abcsys.com";
		int    requestPort0486 = 443;
		String requestFile0486 = "/EnterpriseWebAPI/api/Enrollment/OpenEnrollmentDates/e2abaa02-80da-47db-aec8-981392dc655f/febd4c8a-ca29-4636-affc-f6e2c990eb95/BenefitId";
		requestFile0486 = Lib.replaceTextPattern(requestFile0486, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0486 = "GET " + requestFile0486 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0486, requestHost0486, requestPort0486, requestHeader0486, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0486 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 359
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [486] <- Index 486
		if(replayMode)
		{
			long proxyDataRecordId =1624989997788L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [487] <- WEB ADMIN Index 738 ---
		String requestProt0487 = "https";
		String requestHost0487 = "apps.abcsys.com";
		int    requestPort0487 = 443;
		String requestFile0487 = "/EnterpriseWebAPI/api/CMS/ProductVideo/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0487 = Lib.replaceTextPattern(requestFile0487, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0487 = "GET " + requestFile0487 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0487, requestHost0487, requestPort0487, requestHeader0487, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0487 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 380
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [487] <- Index 487
		if(replayMode)
		{
			long proxyDataRecordId =1624989997791L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [488] <- WEB ADMIN Index 740 ---
		String requestProt0488 = "https";
		String requestHost0488 = "cdn.abcsys.com";
		int    requestPort0488 = 443;
		String requestFile0488 = "/Library/Enterprise/AppLibrary/css/font-awesome.css";
		String requestHeader0488 = "GET " + requestFile0488 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://cdn.abcsys.com/Library/Enterprise/AppLibrary/css/Style.css?v=1.1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0488, requestHost0488, requestPort0488, requestHeader0488, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0488 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 28308
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [488] <- Index 488
		if(replayMode)
		{
			long proxyDataRecordId =1624989997810L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [489] <- WEB ADMIN Index 744 ---
		String requestProt0489 = "https";
		String requestHost0489 = "cdn.abcsys.com";
		int    requestPort0489 = 443;
		String requestFile0489 = "/Library/Enterprise/js/app.js" +
				"?_=1624989996491";
		String requestHeader0489 = "GET " + requestFile0489 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0489, requestHost0489, requestPort0489, requestHeader0489, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0489 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 316
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [489] <- Index 489
		if(replayMode)
		{
			long proxyDataRecordId =1624989998147L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [490] <- WEB ADMIN Index 745 ---
		String requestProt0490 = "https";
		String requestHost0490 = "cdn.abcsys.com";
		int    requestPort0490 = 443;
		String requestFile0490 = "/Library/Enterprise/js/App/jquery.cycle2.min.js" +
				"?_=1624989996493";
		String requestHeader0490 = "GET " + requestFile0490 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0490, requestHost0490, requestPort0490, requestHeader0490, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0490 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 22769
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [490] <- Index 490
		if(replayMode)
		{
			long proxyDataRecordId =1624989998156L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [491] <- WEB ADMIN Index 746 ---
		String requestProt0491 = "https";
		String requestHost0491 = "cdn.abcsys.com";
		int    requestPort0491 = 443;
		String requestFile0491 = "/Library/Enterprise/js/inspinia.js" +
				"?_=1624989996492";
		String requestHeader0491 = "GET " + requestFile0491 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0491, requestHost0491, requestPort0491, requestHeader0491, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0491 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1568
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [491] <- Index 491
		if(replayMode)
		{
			long proxyDataRecordId =1624989998159L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [492] <- WEB ADMIN Index 747 ---
		String requestProt0492 = "https";
		String requestHost0492 = "cdn.abcsys.com";
		int    requestPort0492 = 443;
		String requestFile0492 = "/Library/Enterprise/js/App/jquery.easing.1.3.js" +
				"?_=1624989996494";
		String requestHeader0492 = "GET " + requestFile0492 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0492, requestHost0492, requestPort0492, requestHeader0492, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0492 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8301
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [492] <- Index 492
		if(replayMode)
		{
			long proxyDataRecordId =1624989998179L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [493] <- WEB ADMIN Index 748 ---
		String requestProt0493 = "https";
		String requestHost0493 = "cdn.abcsys.com";
		int    requestPort0493 = 443;
		String requestFile0493 = "/Library/Enterprise/js/App/jquery.mousewheel.min.js" +
				"?_=1624989996495";
		String requestHeader0493 = "GET " + requestFile0493 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0493, requestHost0493, requestPort0493, requestHeader0493, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0493 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1392
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [493] <- Index 493
		if(replayMode)
		{
			long proxyDataRecordId =1624989998258L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [494] <- WEB ADMIN Index 749 ---
		String requestProt0494 = "https";
		String requestHost0494 = "cdn.abcsys.com";
		int    requestPort0494 = 443;
		String requestFile0494 = "/Library/Enterprise/js/App/jquery.mCustomScrollbar.js" +
				"?_=1624989996496";
		String requestHeader0494 = "GET " + requestFile0494 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0494, requestHost0494, requestPort0494, requestHeader0494, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0494 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 45599
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [494] <- Index 494
		if(replayMode)
		{
			long proxyDataRecordId =1624989998263L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [495] <- WEB ADMIN Index 750 ---
		String requestProt0495 = "https";
		String requestHost0495 = "cdn.abcsys.com";
		int    requestPort0495 = 443;
		String requestFile0495 = "/Library/Enterprise/js/App/grids.js" +
				"?_=1624989996497";
		String requestHeader0495 = "GET " + requestFile0495 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0495, requestHost0495, requestPort0495, requestHeader0495, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0495 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1891
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [495] <- Index 495
		if(replayMode)
		{
			long proxyDataRecordId =1624989998289L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [496] <- WEB ADMIN Index 751 ---
		String requestProt0496 = "https";
		String requestHost0496 = "cdn.abcsys.com";
		int    requestPort0496 = 443;
		String requestFile0496 = "/Library/Enterprise/js/App/bootstrap.touchspin.js" +
				"?_=1624989996498";
		String requestHeader0496 = "GET " + requestFile0496 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0496, requestHost0496, requestPort0496, requestHeader0496, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0496 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 19011
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [496] <- Index 496
		if(replayMode)
		{
			long proxyDataRecordId =1624989998290L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [497] <- WEB ADMIN Index 752 ---
		String requestProt0497 = "https";
		String requestHost0497 = "cdn.abcsys.com";
		int    requestPort0497 = 443;
		String requestFile0497 = "/Library/Enterprise/AppLibrary/js/Controllers/MainCtrl.js" +
				"?_=1624989996499";
		String requestHeader0497 = "GET " + requestFile0497 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0497, requestHost0497, requestPort0497, requestHeader0497, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0497 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 92216
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [497] <- Index 497
		if(replayMode)
		{
			long proxyDataRecordId =1624989998356L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [498] <- WEB ADMIN Index 753 ---
		String requestProt0498 = "https";
		String requestHost0498 = "cdn.abcsys.com";
		int    requestPort0498 = 443;
		String requestFile0498 = "/Library/Enterprise/AppLibrary/js/Controllers/controllers.js" +
				"?_=1624989996500";
		String requestHeader0498 = "GET " + requestFile0498 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0498, requestHost0498, requestPort0498, requestHeader0498, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0498 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 12376
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [498] <- Index 498
		if(replayMode)
		{
			long proxyDataRecordId =1624989998960L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [499] <- WEB ADMIN Index 754 ---
		String requestProt0499 = "https";
		String requestHost0499 = "cdn.abcsys.com";
		int    requestPort0499 = 443;
		String requestFile0499 = "/Library/Enterprise/AppLibrary/js/Controllers/TrainingVideosCtrl.js" +
				"?_=1624989996501";
		String requestHeader0499 = "GET " + requestFile0499 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0499, requestHost0499, requestPort0499, requestHeader0499, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0499 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3522
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [499] <- Index 499
		if(replayMode)
		{
			long proxyDataRecordId =1624989999085L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #4 (fragment 3 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [500] <- WEB ADMIN Index 755 ---
		String requestProt0500 = "https";
		String requestHost0500 = "cdn.abcsys.com";
		int    requestPort0500 = 443;
		String requestFile0500 = "/Library/Enterprise/AppLibrary/js/Controllers/AboutCtrl.js" +
				"?_=1624989996502";
		String requestHeader0500 = "GET " + requestFile0500 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0500, requestHost0500, requestPort0500, requestHeader0500, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0500 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 232
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [500] <- Index 500
		if(replayMode)
		{
			long proxyDataRecordId =1624989999193L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [501] <- WEB ADMIN Index 756 ---
		String requestProt0501 = "https";
		String requestHost0501 = "cdn.abcsys.com";
		int    requestPort0501 = 443;
		String requestFile0501 = "/Library/Enterprise/AppLibrary/js/Controllers/CompanyCtrl.js" +
				"?_=1624989996503";
		String requestHeader0501 = "GET " + requestFile0501 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0501, requestHost0501, requestPort0501, requestHeader0501, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0501 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 758
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [501] <- Index 501
		if(replayMode)
		{
			long proxyDataRecordId =1624989999290L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [502] <- WEB ADMIN Index 757 ---
		String requestProt0502 = "https";
		String requestHost0502 = "cdn.abcsys.com";
		int    requestPort0502 = 443;
		String requestFile0502 = "/Library/Enterprise/AppLibrary/js/Controllers/ContactUsCtrl.js" +
				"?_=1624989996504";
		String requestHeader0502 = "GET " + requestFile0502 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0502, requestHost0502, requestPort0502, requestHeader0502, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0502 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1173
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [502] <- Index 502
		if(replayMode)
		{
			long proxyDataRecordId =1624989999397L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [503] <- WEB ADMIN Index 758 ---
		String requestProt0503 = "https";
		String requestHost0503 = "cdn.abcsys.com";
		int    requestPort0503 = 443;
		String requestFile0503 = "/Library/Enterprise/AppLibrary/js/Controllers/DependentsCtrl.js" +
				"?_=1624989996505";
		String requestHeader0503 = "GET " + requestFile0503 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0503, requestHost0503, requestPort0503, requestHeader0503, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0503 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 14321
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [503] <- Index 503
		if(replayMode)
		{
			long proxyDataRecordId =1624989999501L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [504] <- WEB ADMIN Index 759 ---
		String requestProt0504 = "https";
		String requestHost0504 = "cdn.abcsys.com";
		int    requestPort0504 = 443;
		String requestFile0504 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollCtrl.js" +
				"?v=1" +
				"&_=1624989996506";
		String requestHeader0504 = "GET " + requestFile0504 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0504, requestHost0504, requestPort0504, requestHeader0504, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0504 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 226984
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [504] <- Index 504
		if(replayMode)
		{
			long proxyDataRecordId =1624989999615L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [505] <- WEB ADMIN Index 760 ---
		String requestProt0505 = "https";
		String requestHost0505 = "cdn.abcsys.com";
		int    requestPort0505 = 443;
		String requestFile0505 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollmentSummaryCtrl.js" +
				"?_=1624989996507";
		String requestHeader0505 = "GET " + requestFile0505 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0505, requestHost0505, requestPort0505, requestHeader0505, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0505 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 10734
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [505] <- Index 505
		if(replayMode)
		{
			long proxyDataRecordId =1624990000278L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [506] <- WEB ADMIN Index 762 ---
		String requestProt0506 = "https";
		String requestHost0506 = "cdn.abcsys.com";
		int    requestPort0506 = 443;
		String requestFile0506 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollmentSummary_PrintCtrl.js" +
				"?_=1624989996508";
		String requestHeader0506 = "GET " + requestFile0506 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0506, requestHost0506, requestPort0506, requestHeader0506, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0506 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3907
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [506] <- Index 506
		if(replayMode)
		{
			long proxyDataRecordId =1624990000382L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [507] <- WEB ADMIN Index 763 ---
		String requestProt0507 = "https";
		String requestHost0507 = "cdn.abcsys.com";
		int    requestPort0507 = 443;
		String requestFile0507 = "/Library/Enterprise/AppLibrary/js/Controllers/Error404Ctrl.js" +
				"?_=1624989996509";
		String requestHeader0507 = "GET " + requestFile0507 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0507, requestHost0507, requestPort0507, requestHeader0507, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0507 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 338
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [507] <- Index 507
		if(replayMode)
		{
			long proxyDataRecordId =1624990000489L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [508] <- WEB ADMIN Index 765 ---
		String requestProt0508 = "https";
		String requestHost0508 = "cdn.abcsys.com";
		int    requestPort0508 = 443;
		String requestFile0508 = "/Library/Enterprise/AppLibrary/js/Controllers/LoginCtrl.js" +
				"?_=1624989996511";
		String requestHeader0508 = "GET " + requestFile0508 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0508, requestHost0508, requestPort0508, requestHeader0508, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0508 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15880
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [508] <- Index 508
		if(replayMode)
		{
			long proxyDataRecordId =1624990000678L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [509] <- WEB ADMIN Index 766 ---
		String requestProt0509 = "https";
		String requestHost0509 = "cdn.abcsys.com";
		int    requestPort0509 = 443;
		String requestFile0509 = "/Library/Enterprise/AppLibrary/js/Controllers/PayrollDeductionCtrl.js" +
				"?_=1624989996512";
		String requestHeader0509 = "GET " + requestFile0509 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0509, requestHost0509, requestPort0509, requestHeader0509, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0509 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2580
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [509] <- Index 509
		if(replayMode)
		{
			long proxyDataRecordId =1624990000874L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [510] <- WEB ADMIN Index 767 ---
		String requestProt0510 = "https";
		String requestHost0510 = "cdn.abcsys.com";
		int    requestPort0510 = 443;
		String requestFile0510 = "/Library/Enterprise/AppLibrary/js/Controllers/ProductCtrl.js" +
				"?_=1624989996513";
		String requestHeader0510 = "GET " + requestFile0510 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0510, requestHost0510, requestPort0510, requestHeader0510, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0510 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 36391
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [510] <- Index 510
		if(replayMode)
		{
			long proxyDataRecordId =1624990000990L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [511] <- WEB ADMIN Index 768 ---
		String requestProt0511 = "https";
		String requestHost0511 = "cdn.abcsys.com";
		int    requestPort0511 = 443;
		String requestFile0511 = "/Library/Enterprise/AppLibrary/js/Controllers/ProfileCtrl.js" +
				"?_=1624989996514";
		String requestHeader0511 = "GET " + requestFile0511 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0511, requestHost0511, requestPort0511, requestHeader0511, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0511 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15041
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [511] <- Index 511
		if(replayMode)
		{
			long proxyDataRecordId =1624990001260L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [512] <- WEB ADMIN Index 769 ---
		String requestProt0512 = "https";
		String requestHost0512 = "cdn.abcsys.com";
		int    requestPort0512 = 443;
		String requestFile0512 = "/Library/Enterprise/AppLibrary/js/Controllers/RegisterCtrl.js" +
				"?_=1624989996515";
		String requestHeader0512 = "GET " + requestFile0512 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0512, requestHost0512, requestPort0512, requestHeader0512, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0512 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 18034
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [512] <- Index 512
		if(replayMode)
		{
			long proxyDataRecordId =1624990001443L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [513] <- WEB ADMIN Index 770 ---
		String requestProt0513 = "https";
		String requestHost0513 = "cdn.abcsys.com";
		int    requestPort0513 = 443;
		String requestFile0513 = "/Library/Enterprise/AppLibrary/js/Controllers/ResetPwdCtrl.js" +
				"?_=1624989996516";
		String requestHeader0513 = "GET " + requestFile0513 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0513, requestHost0513, requestPort0513, requestHeader0513, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0513 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4283
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [513] <- Index 513
		if(replayMode)
		{
			long proxyDataRecordId =1624990001627L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [514] <- WEB ADMIN Index 771 ---
		String requestProt0514 = "https";
		String requestHost0514 = "cdn.abcsys.com";
		int    requestPort0514 = 443;
		String requestFile0514 = "/Library/Enterprise/AppLibrary/js/Controllers/ResetUidPwdCtrl.js" +
				"?_=1624989996517";
		String requestHeader0514 = "GET " + requestFile0514 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0514, requestHost0514, requestPort0514, requestHeader0514, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0514 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6409
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [514] <- Index 514
		if(replayMode)
		{
			long proxyDataRecordId =1624990001741L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [515] <- WEB ADMIN Index 772 ---
		String requestProt0515 = "https";
		String requestHost0515 = "cdn.abcsys.com";
		int    requestPort0515 = 443;
		String requestFile0515 = "/Library/Enterprise/AppLibrary/js/Controllers/ThirdPartyPage.js" +
				"?_=1624989996518";
		String requestHeader0515 = "GET " + requestFile0515 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0515, requestHost0515, requestPort0515, requestHeader0515, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0515 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1047
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [515] <- Index 515
		if(replayMode)
		{
			long proxyDataRecordId =1624990001850L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [516] <- WEB ADMIN Index 773 ---
		String requestProt0516 = "https";
		String requestHost0516 = "cdn.abcsys.com";
		int    requestPort0516 = 443;
		String requestFile0516 = "/Library/Enterprise/AppLibrary/js/Controllers/SSOCtrl.js" +
				"?_=1624989996519";
		String requestHeader0516 = "GET " + requestFile0516 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0516, requestHost0516, requestPort0516, requestHeader0516, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0516 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6537
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [516] <- Index 516
		if(replayMode)
		{
			long proxyDataRecordId =1624990001971L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [517] <- WEB ADMIN Index 774 ---
		String requestProt0517 = "https";
		String requestHost0517 = "cdn.abcsys.com";
		int    requestPort0517 = 443;
		String requestFile0517 = "/Library/Enterprise/AppLibrary/js/Controllers/LifeEventChangeCtrl.js" +
				"?_=1624989996520";
		String requestHeader0517 = "GET " + requestFile0517 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0517, requestHost0517, requestPort0517, requestHeader0517, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0517 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2967
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [517] <- Index 517
		if(replayMode)
		{
			long proxyDataRecordId =1624990002073L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [518] <- WEB ADMIN Index 775 ---
		String requestProt0518 = "https";
		String requestHost0518 = "cdn.abcsys.com";
		int    requestPort0518 = 443;
		String requestFile0518 = "/Library/Enterprise/AppLibrary/js/Controllers/ForceResetCtrl.js" +
				"?_=1624989996521";
		String requestHeader0518 = "GET " + requestFile0518 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0518, requestHost0518, requestPort0518, requestHeader0518, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0518 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3747
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [518] <- Index 518
		if(replayMode)
		{
			long proxyDataRecordId =1624990002196L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [519] <- WEB ADMIN Index 776 ---
		String requestProt0519 = "https";
		String requestHost0519 = "apps.abcsys.com";
		int    requestPort0519 = 443;
		String requestFile0519 = "/EnterpriseWebAPI/api/Enrollment/EnrollmentMessages" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213" +
				"&operationCode=0" +
				"&IsCSREnrollment=0";
		requestFile0519 = Lib.replaceTextPattern(requestFile0519, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0519 = "OPTIONS " + requestFile0519 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0519, requestHost0519, requestPort0519, requestHeader0519, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0519 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [519] <- Index 519
		if(replayMode)
		{
			long proxyDataRecordId =1624990002343L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4_3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #4 (fragment 4 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [520] <- WEB ADMIN Index 777 ---
		String requestProt0520 = "https";
		String requestHost0520 = "apps.abcsys.com";
		int    requestPort0520 = 443;
		String requestFile0520 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0520 = Lib.replaceTextPattern(requestFile0520, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0520 = "OPTIONS " + requestFile0520 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0520, requestHost0520, requestPort0520, requestHeader0520, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0520 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [520] <- Index 520
		if(replayMode)
		{
			long proxyDataRecordId =1624990002350L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [521] <- WEB ADMIN Index 778 ---
		String requestProt0521 = "https";
		String requestHost0521 = "apps.abcsys.com";
		int    requestPort0521 = 443;
		String requestFile0521 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0521 = Lib.replaceTextPattern(requestFile0521, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0521 = "OPTIONS " + requestFile0521 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0521, requestHost0521, requestPort0521, requestHeader0521, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0521 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [521] <- Index 521
		if(replayMode)
		{
			long proxyDataRecordId =1624990002352L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [522] <- WEB ADMIN Index 779 ---
		String requestProt0522 = "https";
		String requestHost0522 = "apps.abcsys.com";
		int    requestPort0522 = 443;
		String requestFile0522 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/QuickLinks";
		requestFile0522 = Lib.replaceTextPattern(requestFile0522, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0522 = "OPTIONS " + requestFile0522 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0522, requestHost0522, requestPort0522, requestHeader0522, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0522 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [522] <- Index 522
		if(replayMode)
		{
			long proxyDataRecordId =1624990002370L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [523] <- WEB ADMIN Index 780 ---
		String requestProt0523 = "https";
		String requestHost0523 = "apps.abcsys.com";
		int    requestPort0523 = 443;
		String requestFile0523 = "/EnterpriseWebAPI/api/Employee/EmployeeInfo/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0523 = Lib.replaceTextPattern(requestFile0523, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0523 = "OPTIONS " + requestFile0523 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0523, requestHost0523, requestPort0523, requestHeader0523, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0523 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [523] <- Index 523
		if(replayMode)
		{
			long proxyDataRecordId =1624990002371L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [524] <- WEB ADMIN Index 782 ---
		String requestProt0524 = "https";
		String requestHost0524 = "apps.abcsys.com";
		int    requestPort0524 = 443;
		String requestFile0524 = "/EnterpriseWebAPI/api/Enrollment/CollectMissingData/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0524 = Lib.replaceTextPattern(requestFile0524, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0524 = "OPTIONS " + requestFile0524 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0524, requestHost0524, requestPort0524, requestHeader0524, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0524 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [524] <- Index 524
		if(replayMode)
		{
			long proxyDataRecordId =1624990002373L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [525] <- WEB ADMIN Index 783 ---
		String requestProt0525 = "https";
		String requestHost0525 = "apps.abcsys.com";
		int    requestPort0525 = 443;
		String requestFile0525 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0525 = Lib.replaceTextPattern(requestFile0525, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0525 = "OPTIONS " + requestFile0525 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0525, requestHost0525, requestPort0525, requestHeader0525, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0525 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [525] <- Index 525
		if(replayMode)
		{
			long proxyDataRecordId =1624990002443L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [526] <- WEB ADMIN Index 785 ---
		String requestProt0526 = "https";
		String requestHost0526 = "apps.abcsys.com";
		int    requestPort0526 = 443;
		String requestFile0526 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0526 = Lib.replaceTextPattern(requestFile0526, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0526 = "GET " + requestFile0526 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0526, requestHost0526, requestPort0526, requestHeader0526, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0526 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2674
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [526] <- Index 526
		if(replayMode)
		{
			long proxyDataRecordId =1624990002482L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [527] <- WEB ADMIN Index 786 ---
		String requestProt0527 = "https";
		String requestHost0527 = "apps.abcsys.com";
		int    requestPort0527 = 443;
		String requestFile0527 = "/EnterpriseWebAPI/api/Enrollment/EnrollmentMessages" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213" +
				"&operationCode=0" +
				"&IsCSREnrollment=0";
		requestFile0527 = Lib.replaceTextPattern(requestFile0527, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0527 = "GET " + requestFile0527 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0527, requestHost0527, requestPort0527, requestHeader0527, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0527 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 15
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [527] <- Index 527
		if(replayMode)
		{
			long proxyDataRecordId =1624990002484L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [528] <- WEB ADMIN Index 788 ---
		String requestProt0528 = "https";
		String requestHost0528 = "apps.abcsys.com";
		int    requestPort0528 = 443;
		String requestFile0528 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0528 = Lib.replaceTextPattern(requestFile0528, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0528 = "GET " + requestFile0528 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0528, requestHost0528, requestPort0528, requestHeader0528, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0528 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [528] <- Index 528
		if(replayMode)
		{
			long proxyDataRecordId =1624990002500L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [529] <- WEB ADMIN Index 789 ---
		String requestProt0529 = "https";
		String requestHost0529 = "apps.abcsys.com";
		int    requestPort0529 = 443;
		String requestFile0529 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/QuickLinks";
		requestFile0529 = Lib.replaceTextPattern(requestFile0529, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0529 = "GET " + requestFile0529 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0529, requestHost0529, requestPort0529, requestHeader0529, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0529 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [529] <- Index 529
		if(replayMode)
		{
			long proxyDataRecordId =1624990002504L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [530] <- WEB ADMIN Index 790 ---
		String requestProt0530 = "https";
		String requestHost0530 = "apps.abcsys.com";
		int    requestPort0530 = 443;
		String requestFile0530 = "/EnterpriseWebAPI/api/Employee/EmployeeInfo/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0530 = Lib.replaceTextPattern(requestFile0530, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0530 = "GET " + requestFile0530 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0530, requestHost0530, requestPort0530, requestHeader0530, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0530 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1569
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [530] <- Index 530
		if(replayMode)
		{
			long proxyDataRecordId =1624990002505L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [531] <- WEB ADMIN Index 791 ---
		String requestProt0531 = "https";
		String requestHost0531 = "apps.abcsys.com";
		int    requestPort0531 = 443;
		String requestFile0531 = "/EnterpriseWebAPI/api/Enrollment/CollectMissingData/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0531 = Lib.replaceTextPattern(requestFile0531, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0531 = "GET " + requestFile0531 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0531, requestHost0531, requestPort0531, requestHeader0531, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0531 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 83
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [531] <- Index 531
		if(replayMode)
		{
			long proxyDataRecordId =1624990002549L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [532] <- WEB ADMIN Index 793 ---
		String requestProt0532 = "https";
		String requestHost0532 = "apps.abcsys.com";
		int    requestPort0532 = 443;
		String requestFile0532 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0532 = Lib.replaceTextPattern(requestFile0532, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0532 = "GET " + requestFile0532 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0532, requestHost0532, requestPort0532, requestHeader0532, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0532 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2674
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [532] <- Index 532
		if(replayMode)
		{
			long proxyDataRecordId =1624990002611L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [533] <- WEB ADMIN Index 794 ---
		String requestProt0533 = "https";
		String requestHost0533 = "apps.abcsys.com";
		int    requestPort0533 = 443;
		String requestFile0533 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0533 = Lib.replaceTextPattern(requestFile0533, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0533 = "OPTIONS " + requestFile0533 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0533, requestHost0533, requestPort0533, requestHeader0533, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0533 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [533] <- Index 533
		if(replayMode)
		{
			long proxyDataRecordId =1624990002616L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [534] <- WEB ADMIN Index 795 ---
		String requestProt0534 = "https";
		String requestHost0534 = "apps.abcsys.com";
		int    requestPort0534 = 443;
		String requestFile0534 = "/EnterpriseWebAPI/api/Employee/EmployeeInfo/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0534 = Lib.replaceTextPattern(requestFile0534, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0534 = "OPTIONS " + requestFile0534 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0534, requestHost0534, requestPort0534, requestHeader0534, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0534 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [534] <- Index 534
		if(replayMode)
		{
			long proxyDataRecordId =1624990002625L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [535] <- WEB ADMIN Index 796 ---
		String requestProt0535 = "https";
		String requestHost0535 = "apps.abcsys.com";
		int    requestPort0535 = 443;
		String requestFile0535 = "/EnterpriseWebAPI/api/Enrollment/CollectMissingData/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0535 = Lib.replaceTextPattern(requestFile0535, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0535 = "OPTIONS " + requestFile0535 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0535, requestHost0535, requestPort0535, requestHeader0535, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0535 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [535] <- Index 535
		if(replayMode)
		{
			long proxyDataRecordId =1624990002724L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [536] <- WEB ADMIN Index 797 ---
		String requestProt0536 = "https";
		String requestHost0536 = "apps.abcsys.com";
		int    requestPort0536 = 443;
		String requestFile0536 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/QuickLinks";
		requestFile0536 = Lib.replaceTextPattern(requestFile0536, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0536 = "OPTIONS " + requestFile0536 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0536, requestHost0536, requestPort0536, requestHeader0536, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0536 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [536] <- Index 536
		if(replayMode)
		{
			long proxyDataRecordId =1624990002725L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [537] <- WEB ADMIN Index 798 ---
		String requestProt0537 = "https";
		String requestHost0537 = "apps.abcsys.com";
		int    requestPort0537 = 443;
		String requestFile0537 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0537 = Lib.replaceTextPattern(requestFile0537, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0537 = "OPTIONS " + requestFile0537 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0537, requestHost0537, requestPort0537, requestHeader0537, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0537 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [537] <- Index 537
		if(replayMode)
		{
			long proxyDataRecordId =1624990002737L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [538] <- WEB ADMIN Index 799 ---
		String requestProt0538 = "https";
		String requestHost0538 = "apps.abcsys.com";
		int    requestPort0538 = 443;
		String requestFile0538 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0538 = Lib.replaceTextPattern(requestFile0538, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0538 = "GET " + requestFile0538 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0538, requestHost0538, requestPort0538, requestHeader0538, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0538 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [538] <- Index 538
		if(replayMode)
		{
			long proxyDataRecordId =1624990002749L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [539] <- WEB ADMIN Index 800 ---
		String requestProt0539 = "https";
		String requestHost0539 = "apps.abcsys.com";
		int    requestPort0539 = 443;
		String requestFile0539 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0539 = Lib.replaceTextPattern(requestFile0539, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0539 = "GET " + requestFile0539 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0539, requestHost0539, requestPort0539, requestHeader0539, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0539 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [539] <- Index 539
		if(replayMode)
		{
			long proxyDataRecordId =1624990002754L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4_3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4_4.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #4 (fragment 5 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [540] <- WEB ADMIN Index 801 ---
		String requestProt0540 = "https";
		String requestHost0540 = "apps.abcsys.com";
		int    requestPort0540 = 443;
		String requestFile0540 = "/EnterpriseWebAPI/api/Employee/EmployeeInfo/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0540 = Lib.replaceTextPattern(requestFile0540, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0540 = "GET " + requestFile0540 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0540, requestHost0540, requestPort0540, requestHeader0540, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0540 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1569
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [540] <- Index 540
		if(replayMode)
		{
			long proxyDataRecordId =1624990002755L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [541] <- WEB ADMIN Index 802 ---
		String requestProt0541 = "https";
		String requestHost0541 = "apps.abcsys.com";
		int    requestPort0541 = 443;
		String requestFile0541 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0541 = Lib.replaceTextPattern(requestFile0541, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0541 = "OPTIONS " + requestFile0541 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0541, requestHost0541, requestPort0541, requestHeader0541, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0541 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [541] <- Index 541
		if(replayMode)
		{
			long proxyDataRecordId =1624990002823L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [542] <- WEB ADMIN Index 803 ---
		String requestProt0542 = "https";
		String requestHost0542 = "apps.abcsys.com";
		int    requestPort0542 = 443;
		String requestFile0542 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0542 = Lib.replaceTextPattern(requestFile0542, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0542 = "OPTIONS " + requestFile0542 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0542, requestHost0542, requestPort0542, requestHeader0542, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0542 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [542] <- Index 542
		if(replayMode)
		{
			long proxyDataRecordId =1624990002824L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [543] <- WEB ADMIN Index 804 ---
		String requestProt0543 = "https";
		String requestHost0543 = "apps.abcsys.com";
		int    requestPort0543 = 443;
		String requestFile0543 = "/EnterpriseWebAPI/api/Enrollment/CollectMissingData/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0543 = Lib.replaceTextPattern(requestFile0543, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0543 = "GET " + requestFile0543 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0543, requestHost0543, requestPort0543, requestHeader0543, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0543 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 83
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [543] <- Index 543
		if(replayMode)
		{
			long proxyDataRecordId =1624990002856L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [544] <- WEB ADMIN Index 805 ---
		String requestProt0544 = "https";
		String requestHost0544 = "apps.abcsys.com";
		int    requestPort0544 = 443;
		String requestFile0544 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/QuickLinks";
		requestFile0544 = Lib.replaceTextPattern(requestFile0544, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0544 = "GET " + requestFile0544 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0544, requestHost0544, requestPort0544, requestHeader0544, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0544 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [544] <- Index 544
		if(replayMode)
		{
			long proxyDataRecordId =1624990002880L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [545] <- WEB ADMIN Index 806 ---
		String requestProt0545 = "https";
		String requestHost0545 = "apps.abcsys.com";
		int    requestPort0545 = 443;
		String requestFile0545 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0545 = Lib.replaceTextPattern(requestFile0545, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0545 = "GET " + requestFile0545 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0545, requestHost0545, requestPort0545, requestHeader0545, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0545 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [545] <- Index 545
		if(replayMode)
		{
			long proxyDataRecordId =1624990002919L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [546] <- WEB ADMIN Index 807 ---
		String requestProt0546 = "https";
		String requestHost0546 = "apps.abcsys.com";
		int    requestPort0546 = 443;
		String requestFile0546 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0546 = Lib.replaceTextPattern(requestFile0546, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0546 = "GET " + requestFile0546 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0546, requestHost0546, requestPort0546, requestHeader0546, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0546 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [546] <- Index 546
		if(replayMode)
		{
			long proxyDataRecordId =1624990002924L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [547] <- WEB ADMIN Index 808 ---
		String requestProt0547 = "https";
		String requestHost0547 = "apps.abcsys.com";
		int    requestPort0547 = 443;
		String requestFile0547 = "/EnterpriseWebAPI/api/KeyValue/GetKeyValues/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0547 = Lib.replaceTextPattern(requestFile0547, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0547 = "GET " + requestFile0547 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0547, requestHost0547, requestPort0547, requestHeader0547, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0547 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2674
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [547] <- Index 547
		if(replayMode)
		{
			long proxyDataRecordId =1624990002942L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [548] <- WEB ADMIN Index 809 ---
		String requestProt0548 = "https";
		String requestHost0548 = "apps.abcsys.com";
		int    requestPort0548 = 443;
		String requestFile0548 = "/EnterpriseWebAPI/api/Employee/EmployeeInfo/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0548 = Lib.replaceTextPattern(requestFile0548, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0548 = "OPTIONS " + requestFile0548 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0548, requestHost0548, requestPort0548, requestHeader0548, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0548 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [548] <- Index 548
		if(replayMode)
		{
			long proxyDataRecordId =1624990002950L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [549] <- WEB ADMIN Index 811 ---
		String requestProt0549 = "https";
		String requestHost0549 = "apps.abcsys.com";
		int    requestPort0549 = 443;
		String requestFile0549 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/QuickLinks";
		requestFile0549 = Lib.replaceTextPattern(requestFile0549, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0549 = "OPTIONS " + requestFile0549 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0549, requestHost0549, requestPort0549, requestHeader0549, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0549 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [549] <- Index 549
		if(replayMode)
		{
			long proxyDataRecordId =1624990002991L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [550] <- WEB ADMIN Index 812 ---
		String requestProt0550 = "https";
		String requestHost0550 = "apps.abcsys.com";
		int    requestPort0550 = 443;
		String requestFile0550 = "/EnterpriseWebAPI/api/Enrollment/CollectMissingData/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0550 = Lib.replaceTextPattern(requestFile0550, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0550 = "OPTIONS " + requestFile0550 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0550, requestHost0550, requestPort0550, requestHeader0550, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0550 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [550] <- Index 550
		if(replayMode)
		{
			long proxyDataRecordId =1624990002992L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [551] <- WEB ADMIN Index 813 ---
		String requestProt0551 = "https";
		String requestHost0551 = "apps.abcsys.com";
		int    requestPort0551 = 443;
		String requestFile0551 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0551 = Lib.replaceTextPattern(requestFile0551, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0551 = "OPTIONS " + requestFile0551 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0551, requestHost0551, requestPort0551, requestHeader0551, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0551 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [551] <- Index 551
		if(replayMode)
		{
			long proxyDataRecordId =1624990003060L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [552] <- WEB ADMIN Index 814 ---
		String requestProt0552 = "https";
		String requestHost0552 = "apps.abcsys.com";
		int    requestPort0552 = 443;
		String requestFile0552 = "/EnterpriseWebAPI/api/CMS/HomeContent/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0552 = Lib.replaceTextPattern(requestFile0552, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0552 = "OPTIONS " + requestFile0552 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0552, requestHost0552, requestPort0552, requestHeader0552, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0552 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [552] <- Index 552
		if(replayMode)
		{
			long proxyDataRecordId =1624990003062L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [553] <- WEB ADMIN Index 815 ---
		String requestProt0553 = "https";
		String requestHost0553 = "apps.abcsys.com";
		int    requestPort0553 = 443;
		String requestFile0553 = "/EnterpriseWebAPI/api/Employee/EmployeeInfo/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0553 = Lib.replaceTextPattern(requestFile0553, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0553 = "GET " + requestFile0553 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0553, requestHost0553, requestPort0553, requestHeader0553, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0553 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1569
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [553] <- Index 553
		if(replayMode)
		{
			long proxyDataRecordId =1624990003094L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [554] <- WEB ADMIN Index 816 ---
		String requestProt0554 = "https";
		String requestHost0554 = "apps.abcsys.com";
		int    requestPort0554 = 443;
		String requestFile0554 = "/EnterpriseWebAPI/api/Enrollment/CollectMissingData/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&employeeGuid=bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0554 = Lib.replaceTextPattern(requestFile0554, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0554 = "GET " + requestFile0554 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0554, requestHost0554, requestPort0554, requestHeader0554, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0554 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 83
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [554] <- Index 554
		if(replayMode)
		{
			long proxyDataRecordId =1624990003103L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [555] <- WEB ADMIN Index 817 ---
		String requestProt0555 = "https";
		String requestHost0555 = "apps.abcsys.com";
		int    requestPort0555 = 443;
		String requestFile0555 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/QuickLinks";
		requestFile0555 = Lib.replaceTextPattern(requestFile0555, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0555 = "GET " + requestFile0555 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0555, requestHost0555, requestPort0555, requestHeader0555, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0555 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [555] <- Index 555
		if(replayMode)
		{
			long proxyDataRecordId =1624990003104L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [556] <- WEB ADMIN Index 818 ---
		String requestProt0556 = "https";
		String requestHost0556 = "apps.abcsys.com";
		int    requestPort0556 = 443;
		String requestFile0556 = "/EnterpriseWebAPI/api/Product/ProductVendorListPlusLinks/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&linkType=hometilelink";
		requestFile0556 = Lib.replaceTextPattern(requestFile0556, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0556 = "OPTIONS " + requestFile0556 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0556, requestHost0556, requestPort0556, requestHeader0556, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0556 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [556] <- Index 556
		if(replayMode)
		{
			long proxyDataRecordId =1624990003113L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [557] <- WEB ADMIN Index 819 ---
		String requestProt0557 = "https";
		String requestHost0557 = "apps.abcsys.com";
		int    requestPort0557 = 443;
		String requestFile0557 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/null";
		requestFile0557 = Lib.replaceTextPattern(requestFile0557, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0557 = "OPTIONS " + requestFile0557 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0557, requestHost0557, requestPort0557, requestHeader0557, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0557 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [557] <- Index 557
		if(replayMode)
		{
			long proxyDataRecordId =1624990003155L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [558] <- WEB ADMIN Index 820 ---
		String requestProt0558 = "https";
		String requestHost0558 = "apps.abcsys.com";
		int    requestPort0558 = 443;
		String requestFile0558 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0558 = Lib.replaceTextPattern(requestFile0558, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0558 = "GET " + requestFile0558 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0558, requestHost0558, requestPort0558, requestHeader0558, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0558 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [558] <- Index 558
		if(replayMode)
		{
			long proxyDataRecordId =1624990003160L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [559] <- WEB ADMIN Index 821 ---
		String requestProt0559 = "https";
		String requestHost0559 = "apps.abcsys.com";
		int    requestPort0559 = 443;
		String requestFile0559 = "/EnterpriseWebAPI/api/CMS/HomeContent/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0559 = Lib.replaceTextPattern(requestFile0559, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0559 = "GET " + requestFile0559 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0559, requestHost0559, requestPort0559, requestHeader0559, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0559 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 561
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [559] <- Index 559
		if(replayMode)
		{
			long proxyDataRecordId =1624990003236L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4_4 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4_5.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #4 (fragment 6 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [560] <- WEB ADMIN Index 822 ---
		String requestProt0560 = "https";
		String requestHost0560 = "apps.abcsys.com";
		int    requestPort0560 = 443;
		String requestFile0560 = "/EnterpriseWebAPI/api/Product/ProductVendorListPlusLinks/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&linkType=hometilelink";
		requestFile0560 = Lib.replaceTextPattern(requestFile0560, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0560 = "GET " + requestFile0560 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0560, requestHost0560, requestPort0560, requestHeader0560, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0560 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 982
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [560] <- Index 560
		if(replayMode)
		{
			long proxyDataRecordId =1624990003246L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [561] <- WEB ADMIN Index 823 ---
		String requestProt0561 = "https";
		String requestHost0561 = "apps.abcsys.com";
		int    requestPort0561 = 443;
		String requestFile0561 = "/EnterpriseWebAPI/api/CMS/HomeContent/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0561 = Lib.replaceTextPattern(requestFile0561, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0561 = "OPTIONS " + requestFile0561 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0561, requestHost0561, requestPort0561, requestHeader0561, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0561 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [561] <- Index 561
		if(replayMode)
		{
			long proxyDataRecordId =1624990003247L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [562] <- WEB ADMIN Index 824 ---
		String requestProt0562 = "https";
		String requestHost0562 = "apps.abcsys.com";
		int    requestPort0562 = 443;
		String requestFile0562 = "/EnterpriseWebAPI/api/Product/ProductVendorListPlusLinks/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&linkType=hometilelink";
		requestFile0562 = Lib.replaceTextPattern(requestFile0562, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0562 = "OPTIONS " + requestFile0562 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0562, requestHost0562, requestPort0562, requestHeader0562, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0562 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [562] <- Index 562
		if(replayMode)
		{
			long proxyDataRecordId =1624990003257L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [563] <- WEB ADMIN Index 825 ---
		String requestProt0563 = "https";
		String requestHost0563 = "apps.abcsys.com";
		int    requestPort0563 = 443;
		String requestFile0563 = "/EnterpriseWebAPI/api/CMS/HomeContent/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0563 = Lib.replaceTextPattern(requestFile0563, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0563 = "GET " + requestFile0563 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0563, requestHost0563, requestPort0563, requestHeader0563, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0563 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 561
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [563] <- Index 563
		if(replayMode)
		{
			long proxyDataRecordId =1624990003259L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [564] <- WEB ADMIN Index 826 ---
		String requestProt0564 = "https";
		String requestHost0564 = "apps.abcsys.com";
		int    requestPort0564 = 443;
		String requestFile0564 = "/EnterpriseWebAPI/api/CMS/HomeContent/e2abaa02-80da-47db-aec8-981392dc655f/bf69af09-741b-40c1-987f-ec721fdf7213";
		requestFile0564 = Lib.replaceTextPattern(requestFile0564, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0564 = "GET " + requestFile0564 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0564, requestHost0564, requestPort0564, requestHeader0564, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0564 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 561
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [564] <- Index 564
		if(replayMode)
		{
			long proxyDataRecordId =1624990003364L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [565] <- WEB ADMIN Index 827 ---
		String requestProt0565 = "https";
		String requestHost0565 = "apps.abcsys.com";
		int    requestPort0565 = 443;
		String requestFile0565 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/null";
		requestFile0565 = Lib.replaceTextPattern(requestFile0565, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0565 = "GET " + requestFile0565 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0565, requestHost0565, requestPort0565, requestHeader0565, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0565 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [565] <- Index 565
		if(replayMode)
		{
			long proxyDataRecordId =1624990003365L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [566] <- WEB ADMIN Index 828 ---
		String requestProt0566 = "https";
		String requestHost0566 = "apps.abcsys.com";
		int    requestPort0566 = 443;
		String requestFile0566 = "/EnterpriseWebAPI/api/Product/ProductVendorListPlusLinks/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&linkType=hometilelink";
		requestFile0566 = Lib.replaceTextPattern(requestFile0566, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0566 = "GET " + requestFile0566 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0566, requestHost0566, requestPort0566, requestHeader0566, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0566 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 982
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [566] <- Index 566
		if(replayMode)
		{
			long proxyDataRecordId =1624990003366L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [567] <- WEB ADMIN Index 829 ---
		String requestProt0567 = "https";
		String requestHost0567 = "apps.abcsys.com";
		int    requestPort0567 = 443;
		String requestFile0567 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/null";
		requestFile0567 = Lib.replaceTextPattern(requestFile0567, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0567 = "OPTIONS " + requestFile0567 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0567, requestHost0567, requestPort0567, requestHeader0567, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0567 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [567] <- Index 567
		if(replayMode)
		{
			long proxyDataRecordId =1624990003380L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [568] <- WEB ADMIN Index 831 ---
		String requestProt0568 = "https";
		String requestHost0568 = "apps.abcsys.com";
		int    requestPort0568 = 443;
		String requestFile0568 = "/EnterpriseWebAPI/api/Product/ProductVendorListPlusLinks/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&linkType=hometilelink";
		requestFile0568 = Lib.replaceTextPattern(requestFile0568, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0568 = "OPTIONS " + requestFile0568 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0568, requestHost0568, requestPort0568, requestHeader0568, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0568 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [568] <- Index 568
		if(replayMode)
		{
			long proxyDataRecordId =1624990003433L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [569] <- WEB ADMIN Index 832 ---
		String requestProt0569 = "https";
		String requestHost0569 = "apps.abcsys.com";
		int    requestPort0569 = 443;
		String requestFile0569 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/null";
		requestFile0569 = Lib.replaceTextPattern(requestFile0569, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0569 = "OPTIONS " + requestFile0569 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0569, requestHost0569, requestPort0569, requestHeader0569, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0569 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [569] <- Index 569
		if(replayMode)
		{
			long proxyDataRecordId =1624990003441L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [570] <- WEB ADMIN Index 835 ---
		String requestProt0570 = "https";
		String requestHost0570 = "apps.abcsys.com";
		int    requestPort0570 = 443;
		String requestFile0570 = "/EnterpriseWebAPI/api/Employee/ValidateLoggedInUserSurveyQuestions/e2abaa02-80da-47db-aec8-981392dc655f/e14a22f5-f444-4222-a9a4-a303a2d6879c/bf69af09-741b-40c1-987f-ec721fdf7213/";
		requestFile0570 = Lib.replaceTextPattern(requestFile0570, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0570 = "OPTIONS " + requestFile0570 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: authorization,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0570, requestHost0570, requestPort0570, requestHeader0570, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0570 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [570] <- Index 570
		if(replayMode)
		{
			long proxyDataRecordId =1624990003478L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [571] <- WEB ADMIN Index 836 ---
		String requestProt0571 = "https";
		String requestHost0571 = "apps.abcsys.com";
		int    requestPort0571 = 443;
		String requestFile0571 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/null";
		requestFile0571 = Lib.replaceTextPattern(requestFile0571, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0571 = "GET " + requestFile0571 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0571, requestHost0571, requestPort0571, requestHeader0571, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0571 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [571] <- Index 571
		if(replayMode)
		{
			long proxyDataRecordId =1624990003482L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [572] <- WEB ADMIN Index 837 ---
		String requestProt0572 = "https";
		String requestHost0572 = "apps.abcsys.com";
		int    requestPort0572 = 443;
		String requestFile0572 = "/EnterpriseWebAPI/api/Product/ProductVendorListPlusLinks/" +
				"?clientId=e2abaa02-80da-47db-aec8-981392dc655f" +
				"&linkType=hometilelink";
		requestFile0572 = Lib.replaceTextPattern(requestFile0572, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0572 = "GET " + requestFile0572 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0572, requestHost0572, requestPort0572, requestHeader0572, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0572 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 982
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [572] <- Index 572
		if(replayMode)
		{
			long proxyDataRecordId =1624990003530L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [573] <- WEB ADMIN Index 838 ---
		String requestProt0573 = "https";
		String requestHost0573 = "apps.abcsys.com";
		int    requestPort0573 = 443;
		String requestFile0573 = "/EnterpriseWebAPI/api/CMS/AllProductMediaHyperLinks/e2abaa02-80da-47db-aec8-981392dc655f/null";
		requestFile0573 = Lib.replaceTextPattern(requestFile0573, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0573 = "GET " + requestFile0573 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0573, requestHost0573, requestPort0573, requestHeader0573, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0573 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [573] <- Index 573
		if(replayMode)
		{
			long proxyDataRecordId =1624990003535L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [574] <- WEB ADMIN Index 839 ---
		String requestProt0574 = "https";
		String requestHost0574 = "apps.abcsys.com";
		int    requestPort0574 = 443;
		String requestFile0574 = "/EnterpriseWebAPI/api/Employee/ValidateLoggedInUserSurveyQuestions/e2abaa02-80da-47db-aec8-981392dc655f/e14a22f5-f444-4222-a9a4-a303a2d6879c/bf69af09-741b-40c1-987f-ec721fdf7213/";
		requestFile0574 = Lib.replaceTextPattern(requestFile0574, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0574 = "GET " + requestFile0574 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0574, requestHost0574, requestPort0574, requestHeader0574, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0574 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 4
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [574] <- Index 574
		if(replayMode)
		{
			long proxyDataRecordId =1624990003590L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [575] <- WEB ADMIN Index 840 ---
		String requestProt0575 = "https";
		String requestHost0575 = "apps.abcsys.com";
		int    requestPort0575 = 443;
		String requestFile0575 = "/EnterpriseWebAPI/api/Employee/ValidateLoggedInUserSurveyQuestions/e2abaa02-80da-47db-aec8-981392dc655f/e14a22f5-f444-4222-a9a4-a303a2d6879c/bf69af09-741b-40c1-987f-ec721fdf7213/";
		requestFile0575 = Lib.replaceTextPattern(requestFile0575, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0575 = "GET " + requestFile0575 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0575, requestHost0575, requestPort0575, requestHeader0575, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0575 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 4
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [575] <- Index 575
		if(replayMode)
		{
			long proxyDataRecordId =1624990003595L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [576] <- WEB ADMIN Index 841 ---
		String requestProt0576 = "https";
		String requestHost0576 = "apps.abcsys.com";
		int    requestPort0576 = 443;
		String requestFile0576 = "/EnterpriseWebAPI/api/Employee/ValidateLoggedInUserSurveyQuestions/e2abaa02-80da-47db-aec8-981392dc655f/e14a22f5-f444-4222-a9a4-a303a2d6879c/bf69af09-741b-40c1-987f-ec721fdf7213/";
		requestFile0576 = Lib.replaceTextPattern(requestFile0576, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0576 = "GET " + requestFile0576 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0576, requestHost0576, requestPort0576, requestHeader0576, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0576 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 4
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [576] <- Index 576
		if(replayMode)
		{
			long proxyDataRecordId =1624990003762L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4_5 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #5: Log Out
		// # ----------------



		// --- HTTP REQUEST: Test [578] <- WEB ADMIN Index 845 ---
		String requestProt0578 = "https";
		String requestHost0578 = "apps.abcsys.com";
		int    requestPort0578 = 443;
		String requestFile0578 = "/EnterpriseWebAPI/api/security/Logout/";
		String requestHeader0578 = "OPTIONS " + requestFile0578 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: POST\r\n" + 
				"Access-Control-Request-Headers: authorization,content-type,securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0578, requestHost0578, requestPort0578, requestHeader0578, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0578 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [578] <- Index 578
		if(replayMode)
		{
			long proxyDataRecordId =1624990044102L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [579] <- WEB ADMIN Index 846 ---
		String requestProt0579 = "https";
		String requestHost0579 = "apps.abcsys.com";
		int    requestPort0579 = 443;
		String requestFile0579 = "/EnterpriseWebAPI/api/security/Logout/";
		String requestContent0579 = 
				"{\"ClientId\":\"e2abaa02-80da-47db-aec8-981392dc655f\",\"RefreshTokenId\":\"cd91e04e82d34d9a99eda70931b7c84f\"}";
		requestContent0579 = ReplaceVarPattern.replaceVarPatternWithVarName(requestContent0579, "clientId1", clientId1);
		requestContent0579 = Lib.replaceTextPattern(requestContent0579, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace content fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences
		requestContent0579 = ReplaceVarPattern.replaceVarPatternWithVarName(requestContent0579, "refreshtoken", refreshtoken);
		requestContent0579 = Lib.replaceTextPattern(requestContent0579, "cd91e04e82d34d9a99eda70931b7c84f", refreshtoken, 0);		// search and replace content fragment "cd91e04e82d34d9a99eda70931b7c84f" with variable 'refreshtoken' on all occurrences

		byte[] requestContentBinary0579 = requestContent0579.getBytes("UTF-8");
		String requestHeader0579 = "POST " + requestFile0579 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/json;charset=utf-8\r\n" + 
				"Authorization: Bearer nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Content-Length: " + requestContentBinary0579.length + "\r\n" + 		// Content-Length: 103
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0579, requestHost0579, requestPort0579, requestHeader0579, requestContentBinary0579, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nqTVfLfgoGBFXkqteKuFckvKCeFi-6aD14XDerUy1KwVP1hfMRLBDb9WbQ5eHSl0-MaI5IBy-Ho58WaQW4HqKY17e4iRcur1gSlOxtAbcnt4TtQHq07lZ-dheDIJ0kT1EnG1t6IPtKUEj_N_rdVifhqmchXmT1EmuZnag3VXCyZ0t2VA7uqBJ1vXGPoIwfh04gRE9_cz6xtTWXTayJfmJawgy9NNOzBA_FdTs5K6r2NTAbLR7qxjuTDk78U8anm2qkqi-bQ6lr6HjDoTp6tKLjMTd4ArdlNJHeA3AdVnt0eunRPdwpLqGQhsE_441mgtCD6LvKCR4Ezi7KVBLFEsnweTevR8kO04wDQVjWXh7mcThMW3RJTlxM1ESfgIXeQM6MY9LMrGtog9tgudV-3p1xqg435oRyUgqhdJYGuVumXhTarDuTBo-xcCTrhKXiE48s602nc18xM6dKZhJlov_D6O6FiuSL2nymXi7083rxZaUaFQBicr6_sF6S5F3WhzVwFm0MXfp-i19MXEhI3byA", access_oken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0579 = null;		// support garbage collector to reduce memory
		requestContent0579 = null;		// support garbage collector to reduce memory
		requestContentBinary0579 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [579] <- Index 579
		if(replayMode)
		{
			long proxyDataRecordId =1624990044204L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [580] <- WEB ADMIN Index 868 ---
		String requestProt0580 = "https";
		String requestHost0580 = "cdn.abcsys.com";
		int    requestPort0580 = 443;
		String requestFile0580 = "/Library/Enterprise/Content/app.css";
		String requestHeader0580 = "GET " + requestFile0580 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0580, requestHost0580, requestPort0580, requestHeader0580, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0580 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 132702
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [580] <- Index 580
		if(replayMode)
		{
			long proxyDataRecordId =1624990045089L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [581] <- WEB ADMIN Index 869 ---
		String requestProt0581 = "https";
		String requestHost0581 = "cdn.abcsys.com";
		int    requestPort0581 = 443;
		String requestFile0581 = "/Library/Enterprise/Content/App/SingleWeb.css";
		String requestHeader0581 = "GET " + requestFile0581 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0581, requestHost0581, requestPort0581, requestHeader0581, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0581 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 10883
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [581] <- Index 581
		if(replayMode)
		{
			long proxyDataRecordId =1624990045090L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [582] <- WEB ADMIN Index 870 ---
		String requestProt0582 = "https";
		String requestHost0582 = "cdn.abcsys.com";
		int    requestPort0582 = 443;
		String requestFile0582 = "/Library/Enterprise/AppLibrary/css/Style.css" +
				"?v=1.1";
		String requestHeader0582 = "GET " + requestFile0582 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0582, requestHost0582, requestPort0582, requestHeader0582, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0582 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 126321
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [582] <- Index 582
		if(replayMode)
		{
			long proxyDataRecordId =1624990045093L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [583] <- WEB ADMIN Index 871 ---
		String requestProt0583 = "https";
		String requestHost0583 = "cdn.abcsys.com";
		int    requestPort0583 = 443;
		String requestFile0583 = "/Library/Enterprise/js/jquery/jquery-ui.css";
		String requestHeader0583 = "GET " + requestFile0583 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0583, requestHost0583, requestPort0583, requestHeader0583, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0583 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 36435
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [583] <- Index 583
		if(replayMode)
		{
			long proxyDataRecordId =1624990045141L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [584] <- WEB ADMIN Index 872 ---
		String requestProt0584 = "https";
		String requestHost0584 = "cdn.abcsys.com";
		int    requestPort0584 = 443;
		String requestFile0584 = "/Library/Enterprise/js/angular/angular-animate.js" +
				"?_=1624990044832";
		String requestHeader0584 = "GET " + requestFile0584 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0584, requestHost0584, requestPort0584, requestHeader0584, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0584 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 104195
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [584] <- Index 584
		if(replayMode)
		{
			long proxyDataRecordId =1624990045158L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [585] <- WEB ADMIN Index 873 ---
		String requestProt0585 = "https";
		String requestHost0585 = "cdn.abcsys.com";
		int    requestPort0585 = 443;
		String requestFile0585 = "/Library/Enterprise/js/App/bootstrap.js" +
				"?_=1624990044833";
		String requestHeader0585 = "GET " + requestFile0585 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0585, requestHost0585, requestPort0585, requestHeader0585, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0585 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 77458
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [585] <- Index 585
		if(replayMode)
		{
			long proxyDataRecordId =1624990045163L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [586] <- WEB ADMIN Index 874 ---
		String requestProt0586 = "https";
		String requestHost0586 = "cdn.abcsys.com";
		int    requestPort0586 = 443;
		String requestFile0586 = "/Library/Enterprise/js/App/owl.carousel.min.js" +
				"?_=1624990044834";
		String requestHeader0586 = "GET " + requestFile0586 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0586, requestHost0586, requestPort0586, requestHeader0586, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0586 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15060
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [586] <- Index 586
		if(replayMode)
		{
			long proxyDataRecordId =1624990045195L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [587] <- WEB ADMIN Index 875 ---
		String requestProt0587 = "https";
		String requestHost0587 = "cdn.abcsys.com";
		int    requestPort0587 = 443;
		String requestFile0587 = "/Library/Enterprise/js/App/jquery.parallax-1.1.js" +
				"?_=1624990044835";
		String requestHeader0587 = "GET " + requestFile0587 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0587, requestHost0587, requestPort0587, requestHeader0587, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0587 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2583
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [587] <- Index 587
		if(replayMode)
		{
			long proxyDataRecordId =1624990045298L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [588] <- WEB ADMIN Index 876 ---
		String requestProt0588 = "https";
		String requestHost0588 = "cdn.abcsys.com";
		int    requestPort0588 = 443;
		String requestFile0588 = "/Library/Enterprise/AppLibrary/css/font-awesome.css";
		String requestHeader0588 = "GET " + requestFile0588 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://cdn.abcsys.com/Library/Enterprise/AppLibrary/css/Style.css?v=1.1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0588, requestHost0588, requestPort0588, requestHeader0588, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0588 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 28308
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [588] <- Index 588
		if(replayMode)
		{
			long proxyDataRecordId =1624990045441L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [589] <- WEB ADMIN Index 877 ---
		String requestProt0589 = "https";
		String requestHost0589 = "cdn.abcsys.com";
		int    requestPort0589 = 443;
		String requestFile0589 = "/Library/Enterprise/js/inspinia.js" +
				"?_=1624990044837";
		String requestHeader0589 = "GET " + requestFile0589 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0589, requestHost0589, requestPort0589, requestHeader0589, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0589 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1568
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [589] <- Index 589
		if(replayMode)
		{
			long proxyDataRecordId =1624990045565L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [590] <- WEB ADMIN Index 878 ---
		String requestProt0590 = "https";
		String requestHost0590 = "cdn.abcsys.com";
		int    requestPort0590 = 443;
		String requestFile0590 = "/Library/Enterprise/js/app.js" +
				"?_=1624990044836";
		String requestHeader0590 = "GET " + requestFile0590 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0590, requestHost0590, requestPort0590, requestHeader0590, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0590 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 316
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [590] <- Index 590
		if(replayMode)
		{
			long proxyDataRecordId =1624990045566L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [591] <- WEB ADMIN Index 879 ---
		String requestProt0591 = "https";
		String requestHost0591 = "cdn.abcsys.com";
		int    requestPort0591 = 443;
		String requestFile0591 = "/Library/Enterprise/js/App/jquery.cycle2.min.js" +
				"?_=1624990044838";
		String requestHeader0591 = "GET " + requestFile0591 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0591, requestHost0591, requestPort0591, requestHeader0591, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0591 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 22769
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [591] <- Index 591
		if(replayMode)
		{
			long proxyDataRecordId =1624990045567L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [592] <- WEB ADMIN Index 880 ---
		String requestProt0592 = "https";
		String requestHost0592 = "cdn.abcsys.com";
		int    requestPort0592 = 443;
		String requestFile0592 = "/Library/Enterprise/js/App/jquery.easing.1.3.js" +
				"?_=1624990044839";
		String requestHeader0592 = "GET " + requestFile0592 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0592, requestHost0592, requestPort0592, requestHeader0592, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0592 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8301
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [592] <- Index 592
		if(replayMode)
		{
			long proxyDataRecordId =1624990045568L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [593] <- WEB ADMIN Index 881 ---
		String requestProt0593 = "https";
		String requestHost0593 = "cdn.abcsys.com";
		int    requestPort0593 = 443;
		String requestFile0593 = "/Library/Enterprise/js/App/jquery.mousewheel.min.js" +
				"?_=1624990044840";
		String requestHeader0593 = "GET " + requestFile0593 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0593, requestHost0593, requestPort0593, requestHeader0593, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0593 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1392
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [593] <- Index 593
		if(replayMode)
		{
			long proxyDataRecordId =1624990045576L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [594] <- WEB ADMIN Index 883 ---
		String requestProt0594 = "https";
		String requestHost0594 = "cdn.abcsys.com";
		int    requestPort0594 = 443;
		String requestFile0594 = "/Library/Enterprise/js/App/jquery.mCustomScrollbar.js" +
				"?_=1624990044841";
		String requestHeader0594 = "GET " + requestFile0594 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0594, requestHost0594, requestPort0594, requestHeader0594, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0594 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 45599
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [594] <- Index 594
		if(replayMode)
		{
			long proxyDataRecordId =1624990045588L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [595] <- WEB ADMIN Index 884 ---
		String requestProt0595 = "https";
		String requestHost0595 = "cdn.abcsys.com";
		int    requestPort0595 = 443;
		String requestFile0595 = "/Library/Enterprise/js/App/grids.js" +
				"?_=1624990044842";
		String requestHeader0595 = "GET " + requestFile0595 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0595, requestHost0595, requestPort0595, requestHeader0595, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0595 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1891
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [595] <- Index 595
		if(replayMode)
		{
			long proxyDataRecordId =1624990045672L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [596] <- WEB ADMIN Index 885 ---
		String requestProt0596 = "https";
		String requestHost0596 = "cdn.abcsys.com";
		int    requestPort0596 = 443;
		String requestFile0596 = "/Library/Enterprise/js/App/bootstrap.touchspin.js" +
				"?_=1624990044843";
		String requestHeader0596 = "GET " + requestFile0596 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0596, requestHost0596, requestPort0596, requestHeader0596, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0596 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 19011
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [596] <- Index 596
		if(replayMode)
		{
			long proxyDataRecordId =1624990045677L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [597] <- WEB ADMIN Index 886 ---
		String requestProt0597 = "https";
		String requestHost0597 = "cdn.abcsys.com";
		int    requestPort0597 = 443;
		String requestFile0597 = "/Library/Enterprise/AppLibrary/js/Controllers/MainCtrl.js" +
				"?_=1624990044844";
		String requestHeader0597 = "GET " + requestFile0597 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0597, requestHost0597, requestPort0597, requestHeader0597, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0597 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 92216
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [597] <- Index 597
		if(replayMode)
		{
			long proxyDataRecordId =1624990045683L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #5 (fragment 2 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [598] <- WEB ADMIN Index 910 ---
		String requestProt0598 = "https";
		String requestHost0598 = "cdn.abcsys.com";
		int    requestPort0598 = 443;
		String requestFile0598 = "/Library/Enterprise/AppLibrary/js/Controllers/controllers.js" +
				"?_=1624990044845";
		String requestHeader0598 = "GET " + requestFile0598 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0598, requestHost0598, requestPort0598, requestHeader0598, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0598 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 12376
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [598] <- Index 598
		if(replayMode)
		{
			long proxyDataRecordId =1624990046147L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [599] <- WEB ADMIN Index 912 ---
		String requestProt0599 = "https";
		String requestHost0599 = "cdn.abcsys.com";
		int    requestPort0599 = 443;
		String requestFile0599 = "/Library/Enterprise/js/angular/angular-animate.js" +
				"?_=1624990045811";
		String requestHeader0599 = "GET " + requestFile0599 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0599, requestHost0599, requestPort0599, requestHeader0599, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0599 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 104195
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [599] <- Index 599
		if(replayMode)
		{
			long proxyDataRecordId =1624990046178L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [600] <- WEB ADMIN Index 913 ---
		String requestProt0600 = "https";
		String requestHost0600 = "cdn.abcsys.com";
		int    requestPort0600 = 443;
		String requestFile0600 = "/Library/Enterprise/js/App/bootstrap.js" +
				"?_=1624990045812";
		String requestHeader0600 = "GET " + requestFile0600 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0600, requestHost0600, requestPort0600, requestHeader0600, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0600 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 77458
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [600] <- Index 600
		if(replayMode)
		{
			long proxyDataRecordId =1624990046196L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [601] <- WEB ADMIN Index 914 ---
		String requestProt0601 = "https";
		String requestHost0601 = "cdn.abcsys.com";
		int    requestPort0601 = 443;
		String requestFile0601 = "/Library/Enterprise/js/App/owl.carousel.min.js" +
				"?_=1624990045813";
		String requestHeader0601 = "GET " + requestFile0601 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0601, requestHost0601, requestPort0601, requestHeader0601, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0601 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15060
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [601] <- Index 601
		if(replayMode)
		{
			long proxyDataRecordId =1624990046217L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [602] <- WEB ADMIN Index 915 ---
		String requestProt0602 = "https";
		String requestHost0602 = "cdn.abcsys.com";
		int    requestPort0602 = 443;
		String requestFile0602 = "/Library/Enterprise/js/App/jquery.parallax-1.1.js" +
				"?_=1624990045814";
		String requestHeader0602 = "GET " + requestFile0602 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0602, requestHost0602, requestPort0602, requestHeader0602, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0602 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2583
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [602] <- Index 602
		if(replayMode)
		{
			long proxyDataRecordId =1624990046237L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [603] <- WEB ADMIN Index 917 ---
		String requestProt0603 = "https";
		String requestHost0603 = "cdn.abcsys.com";
		int    requestPort0603 = 443;
		String requestFile0603 = "/Library/Enterprise/AppLibrary/js/Controllers/TrainingVideosCtrl.js" +
				"?_=1624990044846";
		String requestHeader0603 = "GET " + requestFile0603 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0603, requestHost0603, requestPort0603, requestHeader0603, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0603 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3522
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [603] <- Index 603
		if(replayMode)
		{
			long proxyDataRecordId =1624990046258L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [604] <- WEB ADMIN Index 918 ---
		String requestProt0604 = "https";
		String requestHost0604 = "cdn.abcsys.com";
		int    requestPort0604 = 443;
		String requestFile0604 = "/Library/Enterprise/js/app.js" +
				"?_=1624990045815";
		String requestHeader0604 = "GET " + requestFile0604 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0604, requestHost0604, requestPort0604, requestHeader0604, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0604 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 316
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [604] <- Index 604
		if(replayMode)
		{
			long proxyDataRecordId =1624990046367L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [605] <- WEB ADMIN Index 919 ---
		String requestProt0605 = "https";
		String requestHost0605 = "cdn.abcsys.com";
		int    requestPort0605 = 443;
		String requestFile0605 = "/Library/Enterprise/js/inspinia.js" +
				"?_=1624990045816";
		String requestHeader0605 = "GET " + requestFile0605 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0605, requestHost0605, requestPort0605, requestHeader0605, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0605 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1568
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [605] <- Index 605
		if(replayMode)
		{
			long proxyDataRecordId =1624990046371L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [606] <- WEB ADMIN Index 920 ---
		String requestProt0606 = "https";
		String requestHost0606 = "cdn.abcsys.com";
		int    requestPort0606 = 443;
		String requestFile0606 = "/Library/Enterprise/js/App/jquery.easing.1.3.js" +
				"?_=1624990045818";
		String requestHeader0606 = "GET " + requestFile0606 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0606, requestHost0606, requestPort0606, requestHeader0606, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0606 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8301
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [606] <- Index 606
		if(replayMode)
		{
			long proxyDataRecordId =1624990046381L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [607] <- WEB ADMIN Index 921 ---
		String requestProt0607 = "https";
		String requestHost0607 = "cdn.abcsys.com";
		int    requestPort0607 = 443;
		String requestFile0607 = "/Library/Enterprise/js/App/jquery.cycle2.min.js" +
				"?_=1624990045817";
		String requestHeader0607 = "GET " + requestFile0607 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0607, requestHost0607, requestPort0607, requestHeader0607, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0607 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 22769
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [607] <- Index 607
		if(replayMode)
		{
			long proxyDataRecordId =1624990046383L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [608] <- WEB ADMIN Index 922 ---
		String requestProt0608 = "https";
		String requestHost0608 = "cdn.abcsys.com";
		int    requestPort0608 = 443;
		String requestFile0608 = "/Library/Enterprise/js/App/jquery.mousewheel.min.js" +
				"?_=1624990045819";
		String requestHeader0608 = "GET " + requestFile0608 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0608, requestHost0608, requestPort0608, requestHeader0608, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0608 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1392
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [608] <- Index 608
		if(replayMode)
		{
			long proxyDataRecordId =1624990046395L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [609] <- WEB ADMIN Index 923 ---
		String requestProt0609 = "https";
		String requestHost0609 = "cdn.abcsys.com";
		int    requestPort0609 = 443;
		String requestFile0609 = "/Library/Enterprise/js/App/jquery.mCustomScrollbar.js" +
				"?_=1624990045820";
		String requestHeader0609 = "GET " + requestFile0609 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0609, requestHost0609, requestPort0609, requestHeader0609, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0609 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 45599
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [609] <- Index 609
		if(replayMode)
		{
			long proxyDataRecordId =1624990046435L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [610] <- WEB ADMIN Index 924 ---
		String requestProt0610 = "https";
		String requestHost0610 = "cdn.abcsys.com";
		int    requestPort0610 = 443;
		String requestFile0610 = "/Library/Enterprise/js/App/grids.js" +
				"?_=1624990045821";
		String requestHeader0610 = "GET " + requestFile0610 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0610, requestHost0610, requestPort0610, requestHeader0610, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0610 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1891
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [610] <- Index 610
		if(replayMode)
		{
			long proxyDataRecordId =1624990046462L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [611] <- WEB ADMIN Index 925 ---
		String requestProt0611 = "https";
		String requestHost0611 = "cdn.abcsys.com";
		int    requestPort0611 = 443;
		String requestFile0611 = "/Library/Enterprise/js/App/bootstrap.touchspin.js" +
				"?_=1624990045822";
		String requestHeader0611 = "GET " + requestFile0611 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0611, requestHost0611, requestPort0611, requestHeader0611, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0611 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 19011
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [611] <- Index 611
		if(replayMode)
		{
			long proxyDataRecordId =1624990046473L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [612] <- WEB ADMIN Index 926 ---
		String requestProt0612 = "https";
		String requestHost0612 = "cdn.abcsys.com";
		int    requestPort0612 = 443;
		String requestFile0612 = "/Library/Enterprise/AppLibrary/js/Controllers/MainCtrl.js" +
				"?_=1624990045823";
		String requestHeader0612 = "GET " + requestFile0612 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0612, requestHost0612, requestPort0612, requestHeader0612, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0612 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 92216
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [612] <- Index 612
		if(replayMode)
		{
			long proxyDataRecordId =1624990046492L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [613] <- WEB ADMIN Index 927 ---
		String requestProt0613 = "https";
		String requestHost0613 = "cdn.abcsys.com";
		int    requestPort0613 = 443;
		String requestFile0613 = "/Library/Enterprise/AppLibrary/js/Controllers/AboutCtrl.js" +
				"?_=1624990044847";
		String requestHeader0613 = "GET " + requestFile0613 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0613, requestHost0613, requestPort0613, requestHeader0613, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0613 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 232
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [613] <- Index 613
		if(replayMode)
		{
			long proxyDataRecordId =1624990046497L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [614] <- WEB ADMIN Index 928 ---
		String requestProt0614 = "https";
		String requestHost0614 = "cdn.abcsys.com";
		int    requestPort0614 = 443;
		String requestFile0614 = "/Library/Enterprise/AppLibrary/js/Controllers/CompanyCtrl.js" +
				"?_=1624990044848";
		String requestHeader0614 = "GET " + requestFile0614 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0614, requestHost0614, requestPort0614, requestHeader0614, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0614 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 758
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [614] <- Index 614
		if(replayMode)
		{
			long proxyDataRecordId =1624990046593L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [615] <- WEB ADMIN Index 929 ---
		String requestProt0615 = "https";
		String requestHost0615 = "cdn.abcsys.com";
		int    requestPort0615 = 443;
		String requestFile0615 = "/Library/Enterprise/AppLibrary/js/Controllers/controllers.js" +
				"?_=1624990045824";
		String requestHeader0615 = "GET " + requestFile0615 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0615, requestHost0615, requestPort0615, requestHeader0615, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0615 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 12376
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [615] <- Index 615
		if(replayMode)
		{
			long proxyDataRecordId =1624990046688L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [616] <- WEB ADMIN Index 930 ---
		String requestProt0616 = "https";
		String requestHost0616 = "cdn.abcsys.com";
		int    requestPort0616 = 443;
		String requestFile0616 = "/Library/Enterprise/AppLibrary/js/Controllers/ContactUsCtrl.js" +
				"?_=1624990044849";
		String requestHeader0616 = "GET " + requestFile0616 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0616, requestHost0616, requestPort0616, requestHeader0616, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0616 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1173
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [616] <- Index 616
		if(replayMode)
		{
			long proxyDataRecordId =1624990046701L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [617] <- WEB ADMIN Index 931 ---
		String requestProt0617 = "https";
		String requestHost0617 = "cdn.abcsys.com";
		int    requestPort0617 = 443;
		String requestFile0617 = "/Library/Enterprise/AppLibrary/js/Controllers/TrainingVideosCtrl.js" +
				"?_=1624990045825";
		String requestHeader0617 = "GET " + requestFile0617 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0617, requestHost0617, requestPort0617, requestHeader0617, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0617 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3522
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [617] <- Index 617
		if(replayMode)
		{
			long proxyDataRecordId =1624990046786L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #5 (fragment 3 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [618] <- WEB ADMIN Index 932 ---
		String requestProt0618 = "https";
		String requestHost0618 = "cdn.abcsys.com";
		int    requestPort0618 = 443;
		String requestFile0618 = "/Library/Enterprise/AppLibrary/js/Controllers/DependentsCtrl.js" +
				"?_=1624990044850";
		String requestHeader0618 = "GET " + requestFile0618 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0618, requestHost0618, requestPort0618, requestHeader0618, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0618 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 14321
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [618] <- Index 618
		if(replayMode)
		{
			long proxyDataRecordId =1624990046799L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [619] <- WEB ADMIN Index 933 ---
		String requestProt0619 = "https";
		String requestHost0619 = "cdn.abcsys.com";
		int    requestPort0619 = 443;
		String requestFile0619 = "/Library/Enterprise/AppLibrary/js/Controllers/AboutCtrl.js" +
				"?_=1624990045826";
		String requestHeader0619 = "GET " + requestFile0619 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0619, requestHost0619, requestPort0619, requestHeader0619, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0619 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 232
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [619] <- Index 619
		if(replayMode)
		{
			long proxyDataRecordId =1624990046883L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [620] <- WEB ADMIN Index 934 ---
		String requestProt0620 = "https";
		String requestHost0620 = "cdn.abcsys.com";
		int    requestPort0620 = 443;
		String requestFile0620 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollCtrl.js" +
				"?v=1" +
				"&_=1624990044851";
		String requestHeader0620 = "GET " + requestFile0620 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0620, requestHost0620, requestPort0620, requestHeader0620, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0620 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 226984
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [620] <- Index 620
		if(replayMode)
		{
			long proxyDataRecordId =1624990046902L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [621] <- WEB ADMIN Index 935 ---
		String requestProt0621 = "https";
		String requestHost0621 = "cdn.abcsys.com";
		int    requestPort0621 = 443;
		String requestFile0621 = "/Library/Enterprise/AppLibrary/js/Controllers/CompanyCtrl.js" +
				"?_=1624990045827";
		String requestHeader0621 = "GET " + requestFile0621 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0621, requestHost0621, requestPort0621, requestHeader0621, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0621 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 758
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [621] <- Index 621
		if(replayMode)
		{
			long proxyDataRecordId =1624990046985L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [622] <- WEB ADMIN Index 936 ---
		String requestProt0622 = "https";
		String requestHost0622 = "cdn.abcsys.com";
		int    requestPort0622 = 443;
		String requestFile0622 = "/Library/Enterprise/AppLibrary/js/Controllers/ContactUsCtrl.js" +
				"?_=1624990045828";
		String requestHeader0622 = "GET " + requestFile0622 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0622, requestHost0622, requestPort0622, requestHeader0622, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0622 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1173
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [622] <- Index 622
		if(replayMode)
		{
			long proxyDataRecordId =1624990047090L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [623] <- WEB ADMIN Index 937 ---
		String requestProt0623 = "https";
		String requestHost0623 = "cdn.abcsys.com";
		int    requestPort0623 = 443;
		String requestFile0623 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollmentSummaryCtrl.js" +
				"?_=1624990044852";
		String requestHeader0623 = "GET " + requestFile0623 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0623, requestHost0623, requestPort0623, requestHeader0623, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0623 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 10734
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [623] <- Index 623
		if(replayMode)
		{
			long proxyDataRecordId =1624990047186L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [624] <- WEB ADMIN Index 938 ---
		String requestProt0624 = "https";
		String requestHost0624 = "cdn.abcsys.com";
		int    requestPort0624 = 443;
		String requestFile0624 = "/Library/Enterprise/AppLibrary/js/Controllers/DependentsCtrl.js" +
				"?_=1624990045829";
		String requestHeader0624 = "GET " + requestFile0624 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0624, requestHost0624, requestPort0624, requestHeader0624, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0624 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 14321
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [624] <- Index 624
		if(replayMode)
		{
			long proxyDataRecordId =1624990047191L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [625] <- WEB ADMIN Index 939 ---
		String requestProt0625 = "https";
		String requestHost0625 = "cdn.abcsys.com";
		int    requestPort0625 = 443;
		String requestFile0625 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollmentSummary_PrintCtrl.js" +
				"?_=1624990044853";
		String requestHeader0625 = "GET " + requestFile0625 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0625, requestHost0625, requestPort0625, requestHeader0625, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0625 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3907
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [625] <- Index 625
		if(replayMode)
		{
			long proxyDataRecordId =1624990047290L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [626] <- WEB ADMIN Index 940 ---
		String requestProt0626 = "https";
		String requestHost0626 = "cdn.abcsys.com";
		int    requestPort0626 = 443;
		String requestFile0626 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollCtrl.js" +
				"?v=1" +
				"&_=1624990045830";
		String requestHeader0626 = "GET " + requestFile0626 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0626, requestHost0626, requestPort0626, requestHeader0626, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0626 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 226984
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [626] <- Index 626
		if(replayMode)
		{
			long proxyDataRecordId =1624990047296L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [627] <- WEB ADMIN Index 941 ---
		String requestProt0627 = "https";
		String requestHost0627 = "cdn.abcsys.com";
		int    requestPort0627 = 443;
		String requestFile0627 = "/Library/Enterprise/AppLibrary/js/Controllers/Error404Ctrl.js" +
				"?_=1624990044854";
		String requestHeader0627 = "GET " + requestFile0627 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0627, requestHost0627, requestPort0627, requestHeader0627, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0627 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 338
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [627] <- Index 627
		if(replayMode)
		{
			long proxyDataRecordId =1624990047385L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [628] <- WEB ADMIN Index 943 ---
		String requestProt0628 = "https";
		String requestHost0628 = "cdn.abcsys.com";
		int    requestPort0628 = 443;
		String requestFile0628 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollmentSummaryCtrl.js" +
				"?_=1624990045831";
		String requestHeader0628 = "GET " + requestFile0628 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0628, requestHost0628, requestPort0628, requestHeader0628, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0628 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 10734
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [628] <- Index 628
		if(replayMode)
		{
			long proxyDataRecordId =1624990047569L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [629] <- WEB ADMIN Index 944 ---
		String requestProt0629 = "https";
		String requestHost0629 = "cdn.abcsys.com";
		int    requestPort0629 = 443;
		String requestFile0629 = "/Library/Enterprise/AppLibrary/js/Controllers/LoginCtrl.js" +
				"?_=1624990044856";
		String requestHeader0629 = "GET " + requestFile0629 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0629, requestHost0629, requestPort0629, requestHeader0629, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0629 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15880
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [629] <- Index 629
		if(replayMode)
		{
			long proxyDataRecordId =1624990047591L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [630] <- WEB ADMIN Index 945 ---
		String requestProt0630 = "https";
		String requestHost0630 = "cdn.abcsys.com";
		int    requestPort0630 = 443;
		String requestFile0630 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollmentSummary_PrintCtrl.js" +
				"?_=1624990045832";
		String requestHeader0630 = "GET " + requestFile0630 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0630, requestHost0630, requestPort0630, requestHeader0630, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0630 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3907
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [630] <- Index 630
		if(replayMode)
		{
			long proxyDataRecordId =1624990047670L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [631] <- WEB ADMIN Index 946 ---
		String requestProt0631 = "https";
		String requestHost0631 = "cdn.abcsys.com";
		int    requestPort0631 = 443;
		String requestFile0631 = "/Library/Enterprise/AppLibrary/js/Controllers/PayrollDeductionCtrl.js" +
				"?_=1624990044857";
		String requestHeader0631 = "GET " + requestFile0631 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0631, requestHost0631, requestPort0631, requestHeader0631, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0631 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2580
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [631] <- Index 631
		if(replayMode)
		{
			long proxyDataRecordId =1624990047691L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [632] <- WEB ADMIN Index 947 ---
		String requestProt0632 = "https";
		String requestHost0632 = "cdn.abcsys.com";
		int    requestPort0632 = 443;
		String requestFile0632 = "/Library/Enterprise/AppLibrary/js/Controllers/Error404Ctrl.js" +
				"?_=1624990045833";
		String requestHeader0632 = "GET " + requestFile0632 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0632, requestHost0632, requestPort0632, requestHeader0632, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0632 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 338
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [632] <- Index 632
		if(replayMode)
		{
			long proxyDataRecordId =1624990047781L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [633] <- WEB ADMIN Index 948 ---
		String requestProt0633 = "https";
		String requestHost0633 = "cdn.abcsys.com";
		int    requestPort0633 = 443;
		String requestFile0633 = "/Library/Enterprise/AppLibrary/js/Controllers/ProductCtrl.js" +
				"?_=1624990044858";
		String requestHeader0633 = "GET " + requestFile0633 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0633, requestHost0633, requestPort0633, requestHeader0633, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0633 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 36391
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [633] <- Index 633
		if(replayMode)
		{
			long proxyDataRecordId =1624990047793L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [634] <- WEB ADMIN Index 950 ---
		String requestProt0634 = "https";
		String requestHost0634 = "cdn.abcsys.com";
		int    requestPort0634 = 443;
		String requestFile0634 = "/Library/Enterprise/AppLibrary/js/Controllers/ProfileCtrl.js" +
				"?_=1624990044859";
		String requestHeader0634 = "GET " + requestFile0634 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0634, requestHost0634, requestPort0634, requestHeader0634, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0634 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15041
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [634] <- Index 634
		if(replayMode)
		{
			long proxyDataRecordId =1624990047898L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [635] <- WEB ADMIN Index 951 ---
		String requestProt0635 = "https";
		String requestHost0635 = "cdn.abcsys.com";
		int    requestPort0635 = 443;
		String requestFile0635 = "/Library/Enterprise/AppLibrary/js/Controllers/LoginCtrl.js" +
				"?_=1624990045835";
		String requestHeader0635 = "GET " + requestFile0635 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0635, requestHost0635, requestPort0635, requestHeader0635, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0635 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15880
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [635] <- Index 635
		if(replayMode)
		{
			long proxyDataRecordId =1624990047981L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [636] <- WEB ADMIN Index 952 ---
		String requestProt0636 = "https";
		String requestHost0636 = "cdn.abcsys.com";
		int    requestPort0636 = 443;
		String requestFile0636 = "/Library/Enterprise/AppLibrary/js/Controllers/RegisterCtrl.js" +
				"?_=1624990044860";
		String requestHeader0636 = "GET " + requestFile0636 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0636, requestHost0636, requestPort0636, requestHeader0636, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0636 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 18034
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [636] <- Index 636
		if(replayMode)
		{
			long proxyDataRecordId =1624990048000L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [637] <- WEB ADMIN Index 953 ---
		String requestProt0637 = "https";
		String requestHost0637 = "cdn.abcsys.com";
		int    requestPort0637 = 443;
		String requestFile0637 = "/Library/Enterprise/AppLibrary/js/Controllers/PayrollDeductionCtrl.js" +
				"?_=1624990045836";
		String requestHeader0637 = "GET " + requestFile0637 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0637, requestHost0637, requestPort0637, requestHeader0637, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0637 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2580
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [637] <- Index 637
		if(replayMode)
		{
			long proxyDataRecordId =1624990048108L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5_3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #5 (fragment 4 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [638] <- WEB ADMIN Index 954 ---
		String requestProt0638 = "https";
		String requestHost0638 = "cdn.abcsys.com";
		int    requestPort0638 = 443;
		String requestFile0638 = "/Library/Enterprise/AppLibrary/js/Controllers/ResetPwdCtrl.js" +
				"?_=1624990044861";
		String requestHeader0638 = "GET " + requestFile0638 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0638, requestHost0638, requestPort0638, requestHeader0638, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0638 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4283
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [638] <- Index 638
		if(replayMode)
		{
			long proxyDataRecordId =1624990048113L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [639] <- WEB ADMIN Index 955 ---
		String requestProt0639 = "https";
		String requestHost0639 = "cdn.abcsys.com";
		int    requestPort0639 = 443;
		String requestFile0639 = "/Library/Enterprise/AppLibrary/js/Controllers/ProductCtrl.js" +
				"?_=1624990045837";
		String requestHeader0639 = "GET " + requestFile0639 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0639, requestHost0639, requestPort0639, requestHeader0639, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0639 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 36391
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [639] <- Index 639
		if(replayMode)
		{
			long proxyDataRecordId =1624990048214L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [640] <- WEB ADMIN Index 956 ---
		String requestProt0640 = "https";
		String requestHost0640 = "cdn.abcsys.com";
		int    requestPort0640 = 443;
		String requestFile0640 = "/Library/Enterprise/AppLibrary/js/Controllers/ResetUidPwdCtrl.js" +
				"?_=1624990044862";
		String requestHeader0640 = "GET " + requestFile0640 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0640, requestHost0640, requestPort0640, requestHeader0640, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0640 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6409
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [640] <- Index 640
		if(replayMode)
		{
			long proxyDataRecordId =1624990048219L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [641] <- WEB ADMIN Index 957 ---
		String requestProt0641 = "https";
		String requestHost0641 = "cdn.abcsys.com";
		int    requestPort0641 = 443;
		String requestFile0641 = "/Library/Enterprise/AppLibrary/js/Controllers/ProfileCtrl.js" +
				"?_=1624990045838";
		String requestHeader0641 = "GET " + requestFile0641 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0641, requestHost0641, requestPort0641, requestHeader0641, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0641 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15041
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [641] <- Index 641
		if(replayMode)
		{
			long proxyDataRecordId =1624990048326L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [642] <- WEB ADMIN Index 958 ---
		String requestProt0642 = "https";
		String requestHost0642 = "cdn.abcsys.com";
		int    requestPort0642 = 443;
		String requestFile0642 = "/Library/Enterprise/AppLibrary/js/Controllers/ThirdPartyPage.js" +
				"?_=1624990044863";
		String requestHeader0642 = "GET " + requestFile0642 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0642, requestHost0642, requestPort0642, requestHeader0642, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0642 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1047
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [642] <- Index 642
		if(replayMode)
		{
			long proxyDataRecordId =1624990048328L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [643] <- WEB ADMIN Index 959 ---
		String requestProt0643 = "https";
		String requestHost0643 = "cdn.abcsys.com";
		int    requestPort0643 = 443;
		String requestFile0643 = "/Library/Enterprise/AppLibrary/js/Controllers/RegisterCtrl.js" +
				"?_=1624990045839";
		String requestHeader0643 = "GET " + requestFile0643 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0643, requestHost0643, requestPort0643, requestHeader0643, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0643 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 18034
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [643] <- Index 643
		if(replayMode)
		{
			long proxyDataRecordId =1624990048424L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [644] <- WEB ADMIN Index 960 ---
		String requestProt0644 = "https";
		String requestHost0644 = "cdn.abcsys.com";
		int    requestPort0644 = 443;
		String requestFile0644 = "/Library/Enterprise/AppLibrary/js/Controllers/SSOCtrl.js" +
				"?_=1624990044864";
		String requestHeader0644 = "GET " + requestFile0644 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0644, requestHost0644, requestPort0644, requestHeader0644, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0644 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6537
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [644] <- Index 644
		if(replayMode)
		{
			long proxyDataRecordId =1624990048429L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [645] <- WEB ADMIN Index 961 ---
		String requestProt0645 = "https";
		String requestHost0645 = "cdn.abcsys.com";
		int    requestPort0645 = 443;
		String requestFile0645 = "/Library/Enterprise/AppLibrary/js/Controllers/LifeEventChangeCtrl.js" +
				"?_=1624990044865";
		String requestHeader0645 = "GET " + requestFile0645 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0645, requestHost0645, requestPort0645, requestHeader0645, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0645 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2967
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [645] <- Index 645
		if(replayMode)
		{
			long proxyDataRecordId =1624990048539L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [646] <- WEB ADMIN Index 962 ---
		String requestProt0646 = "https";
		String requestHost0646 = "cdn.abcsys.com";
		int    requestPort0646 = 443;
		String requestFile0646 = "/Library/Enterprise/AppLibrary/js/Controllers/ResetPwdCtrl.js" +
				"?_=1624990045840";
		String requestHeader0646 = "GET " + requestFile0646 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0646, requestHost0646, requestPort0646, requestHeader0646, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0646 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4283
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [646] <- Index 646
		if(replayMode)
		{
			long proxyDataRecordId =1624990048544L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [647] <- WEB ADMIN Index 963 ---
		String requestProt0647 = "https";
		String requestHost0647 = "cdn.abcsys.com";
		int    requestPort0647 = 443;
		String requestFile0647 = "/Library/Enterprise/AppLibrary/js/Controllers/ForceResetCtrl.js" +
				"?_=1624990044866";
		String requestHeader0647 = "GET " + requestFile0647 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0647, requestHost0647, requestPort0647, requestHeader0647, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0647 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3747
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [647] <- Index 647
		if(replayMode)
		{
			long proxyDataRecordId =1624990048652L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [648] <- WEB ADMIN Index 964 ---
		String requestProt0648 = "https";
		String requestHost0648 = "cdn.abcsys.com";
		int    requestPort0648 = 443;
		String requestFile0648 = "/Library/Enterprise/AppLibrary/js/Controllers/ResetUidPwdCtrl.js" +
				"?_=1624990045841";
		String requestHeader0648 = "GET " + requestFile0648 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0648, requestHost0648, requestPort0648, requestHeader0648, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0648 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6409
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [648] <- Index 648
		if(replayMode)
		{
			long proxyDataRecordId =1624990048660L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [649] <- WEB ADMIN Index 967 ---
		String requestProt0649 = "https";
		String requestHost0649 = "apps.abcsys.com";
		int    requestPort0649 = 443;
		String requestFile0649 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0649 = Lib.replaceTextPattern(requestFile0649, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0649 = "OPTIONS " + requestFile0649 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0649, requestHost0649, requestPort0649, requestHeader0649, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0649 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [649] <- Index 649
		if(replayMode)
		{
			long proxyDataRecordId =1624990048882L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [650] <- WEB ADMIN Index 968 ---
		String requestProt0650 = "https";
		String requestHost0650 = "apps.abcsys.com";
		int    requestPort0650 = 443;
		String requestFile0650 = "/EnterpriseWebAPI/api/CMS/LoginContent/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0650 = Lib.replaceTextPattern(requestFile0650, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0650 = "OPTIONS " + requestFile0650 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: securitysessionid\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0650, requestHost0650, requestPort0650, requestHeader0650, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0650 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [650] <- Index 650
		if(replayMode)
		{
			long proxyDataRecordId =1624990048885L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [651] <- WEB ADMIN Index 977 ---
		String requestProt0651 = "https";
		String requestHost0651 = "apps.abcsys.com";
		int    requestPort0651 = 443;
		String requestFile0651 = "/EnterpriseWebAPI/api/Client/Client/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0651 = Lib.replaceTextPattern(requestFile0651, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0651 = "GET " + requestFile0651 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0651, requestHost0651, requestPort0651, requestHeader0651, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0651 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1977
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [651] <- Index 651
		if(replayMode)
		{
			long proxyDataRecordId =1624990048990L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [652] <- WEB ADMIN Index 978 ---
		String requestProt0652 = "https";
		String requestHost0652 = "apps.abcsys.com";
		int    requestPort0652 = 443;
		String requestFile0652 = "/EnterpriseWebAPI/api/CMS/LoginContent/e2abaa02-80da-47db-aec8-981392dc655f";
		requestFile0652 = Lib.replaceTextPattern(requestFile0652, "e2abaa02-80da-47db-aec8-981392dc655f", clientId1, 0);		// search and replace request file fragment "e2abaa02-80da-47db-aec8-981392dc655f" with variable 'clientId1' on all occurrences

		String requestHeader0652 = "GET " + requestFile0652 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: apps.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"SecuritySessionId: caSlF1a3m0is5Fd2yHPVw\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0652, requestHost0652, requestPort0652, requestHeader0652, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0652 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 257
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [652] <- Index 652
		if(replayMode)
		{
			long proxyDataRecordId =1624990048994L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [653] <- WEB ADMIN Index 984 ---
		log();
		log("# title: 404 - File or directory not found.");
		String requestProt0653 = "https";
		String requestHost0653 = "cdn.abcsys.com";
		int    requestPort0653 = 443;
		String requestFile0653 = "/Library/Enterprise/AppLibrary/css/fonts/fontawesome-webfont.woff" +
				"?v=4.2.0";
		String requestHeader0653 = "GET " + requestFile0653 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Origin: https://www.creditsuisseaddedbenefits.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://cdn.abcsys.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0653, requestHost0653, requestPort0653, requestHeader0653, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0653 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 404, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 1245
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {404}, null, null, null);		// Test [653] <- Index 653
		if(replayMode)
		{
			long proxyDataRecordId =1624990049134L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [654] <- WEB ADMIN Index 1002 ---
		String requestProt0654 = "https";
		String requestHost0654 = "cdn.abcsys.com";
		int    requestPort0654 = 443;
		String requestFile0654 = "/Library/Enterprise/js/angular/angular-animate.js" +
				"?_=1624990049207";
		String requestHeader0654 = "GET " + requestFile0654 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0654, requestHost0654, requestPort0654, requestHeader0654, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0654 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 104195
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [654] <- Index 654
		if(replayMode)
		{
			long proxyDataRecordId =1624990049518L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [655] <- WEB ADMIN Index 1003 ---
		String requestProt0655 = "https";
		String requestHost0655 = "cdn.abcsys.com";
		int    requestPort0655 = 443;
		String requestFile0655 = "/Library/Enterprise/js/App/bootstrap.js" +
				"?_=1624990049208";
		String requestHeader0655 = "GET " + requestFile0655 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0655, requestHost0655, requestPort0655, requestHeader0655, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0655 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 77458
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [655] <- Index 655
		if(replayMode)
		{
			long proxyDataRecordId =1624990049522L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [656] <- WEB ADMIN Index 1004 ---
		String requestProt0656 = "https";
		String requestHost0656 = "cdn.abcsys.com";
		int    requestPort0656 = 443;
		String requestFile0656 = "/Library/Enterprise/js/App/owl.carousel.min.js" +
				"?_=1624990049209";
		String requestHeader0656 = "GET " + requestFile0656 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0656, requestHost0656, requestPort0656, requestHeader0656, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0656 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15060
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [656] <- Index 656
		if(replayMode)
		{
			long proxyDataRecordId =1624990049526L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [657] <- WEB ADMIN Index 1005 ---
		String requestProt0657 = "https";
		String requestHost0657 = "cdn.abcsys.com";
		int    requestPort0657 = 443;
		String requestFile0657 = "/Library/Enterprise/js/App/jquery.parallax-1.1.js" +
				"?_=1624990049210";
		String requestHeader0657 = "GET " + requestFile0657 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0657, requestHost0657, requestPort0657, requestHeader0657, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0657 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2583
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [657] <- Index 657
		if(replayMode)
		{
			long proxyDataRecordId =1624990049534L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5_3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5_4.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #5 (fragment 5 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [658] <- WEB ADMIN Index 1006 ---
		String requestProt0658 = "https";
		String requestHost0658 = "cdn.abcsys.com";
		int    requestPort0658 = 443;
		String requestFile0658 = "/Library/Enterprise/js/app.js" +
				"?_=1624990049211";
		String requestHeader0658 = "GET " + requestFile0658 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0658, requestHost0658, requestPort0658, requestHeader0658, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0658 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 316
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [658] <- Index 658
		if(replayMode)
		{
			long proxyDataRecordId =1624990049538L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [659] <- WEB ADMIN Index 1007 ---
		String requestProt0659 = "https";
		String requestHost0659 = "cdn.abcsys.com";
		int    requestPort0659 = 443;
		String requestFile0659 = "/Library/Enterprise/js/inspinia.js" +
				"?_=1624990049212";
		String requestHeader0659 = "GET " + requestFile0659 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0659, requestHost0659, requestPort0659, requestHeader0659, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0659 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1568
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [659] <- Index 659
		if(replayMode)
		{
			long proxyDataRecordId =1624990049591L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [660] <- WEB ADMIN Index 1008 ---
		String requestProt0660 = "https";
		String requestHost0660 = "cdn.abcsys.com";
		int    requestPort0660 = 443;
		String requestFile0660 = "/Library/Enterprise/js/App/jquery.cycle2.min.js" +
				"?_=1624990049213";
		String requestHeader0660 = "GET " + requestFile0660 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0660, requestHost0660, requestPort0660, requestHeader0660, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0660 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 22769
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [660] <- Index 660
		if(replayMode)
		{
			long proxyDataRecordId =1624990049625L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [661] <- WEB ADMIN Index 1009 ---
		String requestProt0661 = "https";
		String requestHost0661 = "cdn.abcsys.com";
		int    requestPort0661 = 443;
		String requestFile0661 = "/Library/Enterprise/js/App/jquery.easing.1.3.js" +
				"?_=1624990049214";
		String requestHeader0661 = "GET " + requestFile0661 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0661, requestHost0661, requestPort0661, requestHeader0661, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0661 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8301
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [661] <- Index 661
		if(replayMode)
		{
			long proxyDataRecordId =1624990049628L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [662] <- WEB ADMIN Index 1010 ---
		String requestProt0662 = "https";
		String requestHost0662 = "cdn.abcsys.com";
		int    requestPort0662 = 443;
		String requestFile0662 = "/Library/Enterprise/js/App/jquery.mCustomScrollbar.js" +
				"?_=1624990049216";
		String requestHeader0662 = "GET " + requestFile0662 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0662, requestHost0662, requestPort0662, requestHeader0662, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0662 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 45599
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [662] <- Index 662
		if(replayMode)
		{
			long proxyDataRecordId =1624990049650L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [663] <- WEB ADMIN Index 1011 ---
		String requestProt0663 = "https";
		String requestHost0663 = "cdn.abcsys.com";
		int    requestPort0663 = 443;
		String requestFile0663 = "/Library/Enterprise/js/App/jquery.mousewheel.min.js" +
				"?_=1624990049215";
		String requestHeader0663 = "GET " + requestFile0663 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0663, requestHost0663, requestPort0663, requestHeader0663, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0663 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1392
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [663] <- Index 663
		if(replayMode)
		{
			long proxyDataRecordId =1624990049651L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [664] <- WEB ADMIN Index 1012 ---
		String requestProt0664 = "https";
		String requestHost0664 = "cdn.abcsys.com";
		int    requestPort0664 = 443;
		String requestFile0664 = "/Library/Enterprise/js/App/grids.js" +
				"?_=1624990049217";
		String requestHeader0664 = "GET " + requestFile0664 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0664, requestHost0664, requestPort0664, requestHeader0664, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0664 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1891
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [664] <- Index 664
		if(replayMode)
		{
			long proxyDataRecordId =1624990049688L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [665] <- WEB ADMIN Index 1014 ---
		String requestProt0665 = "https";
		String requestHost0665 = "cdn.abcsys.com";
		int    requestPort0665 = 443;
		String requestFile0665 = "/Library/Enterprise/js/App/bootstrap.touchspin.js" +
				"?_=1624990049218";
		String requestHeader0665 = "GET " + requestFile0665 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0665, requestHost0665, requestPort0665, requestHeader0665, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0665 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 19011
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [665] <- Index 665
		if(replayMode)
		{
			long proxyDataRecordId =1624990049698L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [666] <- WEB ADMIN Index 1015 ---
		String requestProt0666 = "https";
		String requestHost0666 = "cdn.abcsys.com";
		int    requestPort0666 = 443;
		String requestFile0666 = "/Library/Enterprise/AppLibrary/js/Controllers/MainCtrl.js" +
				"?_=1624990049219";
		String requestHeader0666 = "GET " + requestFile0666 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0666, requestHost0666, requestPort0666, requestHeader0666, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0666 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 92216
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [666] <- Index 666
		if(replayMode)
		{
			long proxyDataRecordId =1624990049735L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [667] <- WEB ADMIN Index 1016 ---
		String requestProt0667 = "https";
		String requestHost0667 = "cdn.abcsys.com";
		int    requestPort0667 = 443;
		String requestFile0667 = "/Library/Enterprise/AppLibrary/js/Controllers/controllers.js" +
				"?_=1624990049220";
		String requestHeader0667 = "GET " + requestFile0667 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0667, requestHost0667, requestPort0667, requestHeader0667, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0667 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 12376
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [667] <- Index 667
		if(replayMode)
		{
			long proxyDataRecordId =1624990049851L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [668] <- WEB ADMIN Index 1017 ---
		String requestProt0668 = "https";
		String requestHost0668 = "cdn.abcsys.com";
		int    requestPort0668 = 443;
		String requestFile0668 = "/Library/Enterprise/AppLibrary/js/Controllers/TrainingVideosCtrl.js" +
				"?_=1624990049221";
		String requestHeader0668 = "GET " + requestFile0668 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0668, requestHost0668, requestPort0668, requestHeader0668, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0668 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3522
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [668] <- Index 668
		if(replayMode)
		{
			long proxyDataRecordId =1624990049951L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [669] <- WEB ADMIN Index 1018 ---
		String requestProt0669 = "https";
		String requestHost0669 = "cdn.abcsys.com";
		int    requestPort0669 = 443;
		String requestFile0669 = "/Library/Enterprise/AppLibrary/js/Controllers/AboutCtrl.js" +
				"?_=1624990049222";
		String requestHeader0669 = "GET " + requestFile0669 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0669, requestHost0669, requestPort0669, requestHeader0669, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0669 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 232
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [669] <- Index 669
		if(replayMode)
		{
			long proxyDataRecordId =1624990050052L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [670] <- WEB ADMIN Index 1019 ---
		String requestProt0670 = "https";
		String requestHost0670 = "cdn.abcsys.com";
		int    requestPort0670 = 443;
		String requestFile0670 = "/Library/Enterprise/AppLibrary/js/Controllers/CompanyCtrl.js" +
				"?_=1624990049223";
		String requestHeader0670 = "GET " + requestFile0670 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0670, requestHost0670, requestPort0670, requestHeader0670, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0670 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 758
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [670] <- Index 670
		if(replayMode)
		{
			long proxyDataRecordId =1624990050152L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [671] <- WEB ADMIN Index 1020 ---
		String requestProt0671 = "https";
		String requestHost0671 = "cdn.abcsys.com";
		int    requestPort0671 = 443;
		String requestFile0671 = "/Library/Enterprise/AppLibrary/js/Controllers/ContactUsCtrl.js" +
				"?_=1624990049224";
		String requestHeader0671 = "GET " + requestFile0671 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0671, requestHost0671, requestPort0671, requestHeader0671, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0671 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1173
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [671] <- Index 671
		if(replayMode)
		{
			long proxyDataRecordId =1624990050251L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [672] <- WEB ADMIN Index 1021 ---
		String requestProt0672 = "https";
		String requestHost0672 = "cdn.abcsys.com";
		int    requestPort0672 = 443;
		String requestFile0672 = "/Library/Enterprise/AppLibrary/js/Controllers/DependentsCtrl.js" +
				"?_=1624990049225";
		String requestHeader0672 = "GET " + requestFile0672 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0672, requestHost0672, requestPort0672, requestHeader0672, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0672 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 14321
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [672] <- Index 672
		if(replayMode)
		{
			long proxyDataRecordId =1624990050348L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [673] <- WEB ADMIN Index 1022 ---
		String requestProt0673 = "https";
		String requestHost0673 = "cdn.abcsys.com";
		int    requestPort0673 = 443;
		String requestFile0673 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollCtrl.js" +
				"?v=1" +
				"&_=1624990049226";
		String requestHeader0673 = "GET " + requestFile0673 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0673, requestHost0673, requestPort0673, requestHeader0673, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0673 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 226984
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [673] <- Index 673
		if(replayMode)
		{
			long proxyDataRecordId =1624990050451L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [674] <- WEB ADMIN Index 1023 ---
		String requestProt0674 = "https";
		String requestHost0674 = "cdn.abcsys.com";
		int    requestPort0674 = 443;
		String requestFile0674 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollmentSummaryCtrl.js" +
				"?_=1624990049227";
		String requestHeader0674 = "GET " + requestFile0674 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0674, requestHost0674, requestPort0674, requestHeader0674, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0674 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 10734
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [674] <- Index 674
		if(replayMode)
		{
			long proxyDataRecordId =1624990050660L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [675] <- WEB ADMIN Index 1024 ---
		String requestProt0675 = "https";
		String requestHost0675 = "cdn.abcsys.com";
		int    requestPort0675 = 443;
		String requestFile0675 = "/Library/Enterprise/AppLibrary/js/Controllers/EnrollmentSummary_PrintCtrl.js" +
				"?_=1624990049228";
		String requestHeader0675 = "GET " + requestFile0675 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0675, requestHost0675, requestPort0675, requestHeader0675, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0675 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3907
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [675] <- Index 675
		if(replayMode)
		{
			long proxyDataRecordId =1624990050778L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [676] <- WEB ADMIN Index 1025 ---
		String requestProt0676 = "https";
		String requestHost0676 = "cdn.abcsys.com";
		int    requestPort0676 = 443;
		String requestFile0676 = "/Library/Enterprise/AppLibrary/js/Controllers/Error404Ctrl.js" +
				"?_=1624990049229";
		String requestHeader0676 = "GET " + requestFile0676 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0676, requestHost0676, requestPort0676, requestHeader0676, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0676 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 338
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [676] <- Index 676
		if(replayMode)
		{
			long proxyDataRecordId =1624990051174L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [677] <- WEB ADMIN Index 1027 ---
		String requestProt0677 = "https";
		String requestHost0677 = "cdn.abcsys.com";
		int    requestPort0677 = 443;
		String requestFile0677 = "/Library/Enterprise/AppLibrary/js/Controllers/LoginCtrl.js" +
				"?_=1624990049231";
		String requestHeader0677 = "GET " + requestFile0677 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0677, requestHost0677, requestPort0677, requestHeader0677, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0677 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15880
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [677] <- Index 677
		if(replayMode)
		{
			long proxyDataRecordId =1624990051369L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5_4 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5_5.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #5 (fragment 6 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [678] <- WEB ADMIN Index 1028 ---
		String requestProt0678 = "https";
		String requestHost0678 = "cdn.abcsys.com";
		int    requestPort0678 = 443;
		String requestFile0678 = "/Library/Enterprise/AppLibrary/js/Controllers/PayrollDeductionCtrl.js" +
				"?_=1624990049232";
		String requestHeader0678 = "GET " + requestFile0678 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0678, requestHost0678, requestPort0678, requestHeader0678, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0678 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2580
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [678] <- Index 678
		if(replayMode)
		{
			long proxyDataRecordId =1624990051546L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [679] <- WEB ADMIN Index 1029 ---
		String requestProt0679 = "https";
		String requestHost0679 = "cdn.abcsys.com";
		int    requestPort0679 = 443;
		String requestFile0679 = "/Library/Enterprise/AppLibrary/js/Controllers/ProductCtrl.js" +
				"?_=1624990049233";
		String requestHeader0679 = "GET " + requestFile0679 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.abcsys.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://www.creditsuisseaddedbenefits.com/\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0679, requestHost0679, requestPort0679, requestHeader0679, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0679 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 36391
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [679] <- Index 679
		if(replayMode)
		{
			long proxyDataRecordId =1624990051642L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5_5 successful done
		return true;
	}



	boolean synchResponsesParallelRequestsPage_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 1 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_1(loopPluginContext,lastThreadStepInMainThread, innerLoopContext))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_1 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread, InnerLoopContext innerLoopContext) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 2 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_2(loopPluginContext,lastThreadStepInMainThread, innerLoopContext))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_2 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread, InnerLoopContext innerLoopContext) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 3 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_3(loopPluginContext,lastThreadStepInMainThread, innerLoopContext))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_3 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread, InnerLoopContext innerLoopContext) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 4 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_4(loopPluginContext,lastThreadStepInMainThread, innerLoopContext))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_4 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread, InnerLoopContext innerLoopContext) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 5 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_5(loopPluginContext,lastThreadStepInMainThread, innerLoopContext))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_5 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread, InnerLoopContext innerLoopContext) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	/**
	 * implement GetRealTimeUserInputFieldsInterface: get the definition and the value of all real-time user input fields.
	 */
	public ArrayList<RealTimeUserInputField> getRealTimeUserInputFields()
	{
		try
		{
			ArrayList<RealTimeUserInputField> realTimeUserInputFieldList = new ArrayList<RealTimeUserInputField>();
			return realTimeUserInputFieldList;
		}
		catch (Exception e)
		{
			log(e);
			return null;
		}
	}



	/**
	 * implement ThreadStepInterface: get the current execution step (current URL call or page break) of a simulated user.
	 */
	public int getExecutionStep()
	{
		return threadStep;
	}



	/**
	 * implement SetThreadStepInterface: set the current execution step (current URL call or page break) of a simulated user.
	 */
	public void setExecutionStep(int threadStep)
	{
		this.threadStep = threadStep;
	}



	/**
	 * implement SSLSessionCacheStatisticInterface: get statistic data about the SSL session cache behavior of a simulated user.
	 */
	public SSLSessionCacheStatistic getSSLSessionCacheStatistic()
	{
		return sslStatistic;
	}



	/**
	 * implement VaryingTestDurationInterface: support to extend or to reduce the planned test duration.
	 */
	public int getPlannedTestDuration()
	{
		return plannedTestDuration;
	}
	
	public void setExtendTestDuration(int deltaSeconds)
	{
		if (plannedTestDuration == 0)
		{
			plannedTestDuration = deltaSeconds;		// the old planned test duration was unlimited but is now limited
			return;
		}
		if (deltaSeconds == 0)
		{
			plannedTestDuration = 0;		// the new planned test duration is now unlimited
			return;
		}
		plannedTestDuration = plannedTestDuration + deltaSeconds;
	}



	/**
	 * implement SuspendResumeInterface: support to suspend and to resume the test execution.
	 */
	public int getPlannedStartupDelay()
	{
		return plannedStartupDelay;
	}
	
	public void setUserResumeStartWaitDelay(int millis)
	{
		userResumeStartWaitDelay = millis;
	}



	/**
	 * implement VaryingLoadInterface: support to decrement the number of simulated users at runtime.
	 */
	public void setDecrementEndOfLoopFlag(boolean decrementEndOfLoopFlag)
	{
		this.decrementEndOfLoopFlag = decrementEndOfLoopFlag;
	}

	public boolean isDecrementEndOfLoopFlag()
	{
		return decrementEndOfLoopFlag;
	}



	/**
	 * internal method: execute the loops for one simulated user as a thread.
	 * controls the thread and displays the (thread-)log if one loop has been completed.
	 */
	public void run()
	{
		// user terminated by inline script, at start of user ?
		if (isTerminateUser())
		{
			System.out.println("# --- thread " + Thread.currentThread().getName() + " aborted --- " + ZoneTime.dateToShortString() + " ---");
			return;
		}
		try
		{
			while (true)
			{
				threadStep = ThreadStepInterface.THREAD_NO_STEP;
				clearLog();
				
				// execute loop
				log("--- loop started --- " + ZoneTime.dateToShortString() + " ---");
				long loopStartTime = System.nanoTime();
				if(replayMode)
				{
					createReplaySnapShot(threadLoopCounter, replaySnapShotsDump);
				}
				boolean loopPassed = this.execute(totalLoopCounter.getAndIncrement());
				if(isNonModularMode())
				{
					performanceData.addUserTransactionMeasuredSamples(transactionHandler.getPendingTransactions());
					ArrayList<UserTransactionContext> nonExecutedTransactions = transactionHandler.getNotExecutedTransactions();

					for (UserTransactionContext nonExecutedTransaction : new ArrayList<>(nonExecutedTransactions))
					{
						if(transactionContextMap.containsKey(nonExecutedTransaction.getTransactionId()+"") && transactionContextMap.get(nonExecutedTransaction.getTransactionId()+"") == null)
						{
							transactionContextMap.remove(nonExecutedTransaction.getTransactionId()+"");
							nonExecutedTransactions.remove(nonExecutedTransaction);
						}
					}

					performanceData.addUserTransactionNotExecutedSamples(nonExecutedTransactions);
				}
				performanceData.addSocktPoolStatistic(socketPool);
				socketPool.closePool();
				performanceData.addSSLCacheStatistic(sslStatistic.getSSLSessionCacheStatisticResult());
				sslStatistic.reset();
				
				// eof of input file or out of values for an unique number ?
				if (abortedByEofInputFile() || abortedByUniqueNumberVar())
					return;		// endOfRun() not called in such a case
				
				// check loop result
				String remainingLoopInfo = "";
				if (checkLoopCount)
					remainingLoopInfo = " [remaining loops = " + (remainingLoops - 1) + "]";
				if (loopPassed)
				{
					performanceData.addPassedLoop();
					log("--- loop passed ---  " + ZoneTime.dateToShortString() + " ---" + remainingLoopInfo);
				}
				else
				{
					performanceData.addFailedLoop();
					log("--- loop failed ---  " + ZoneTime.dateToShortString() + " ---" + remainingLoopInfo);
				}
					if (!loopVarMap.isEmpty())
					{
						log();
						log("+----------------------------------------------------------------+");
						log("Loop Variables Values");
						log("----------------------------------------------------");
						for(Map.Entry<String, String> entry : loopVarMap.entrySet())
						{
							log("|" + entry.getKey() + " = " + entry.getValue()+"|");
							log("");
						}
						log("+----------------------------------------------------------------+");
					}
				threadStep = ThreadStepInterface.THREAD_NO_STEP;
				
				// display thread log to standard output
				if (debugLoops || (debugFailedLoops && (!loopPassed)))
				{
					synchronized (dumpLock)
					{
						dumpLog(System.out);				// full log
					}
				}
				
				// check if max loops reached
				if (checkLoopCount)
				{
					// all done ?
					remainingLoops--;
					if (remainingLoops <= 0)
					{
						endOfRun();
						return;
					}
				}
				
				// check if simulated user must be decremented
				if (decrementEndOfLoopFlag && (getOwnLoadTestUserContext().getDecrementEndOfLoopPointInTime() <= System.currentTimeMillis()))
				{
					return;
				}
				
				// check if max test duration reached
				if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				{
					endOfRun();
					return;
				}
				
				// check if this specific user is terminated earlier than planned by a HTTP content verification or by a plug-in
				if (isTerminateUser())
				{
					endOfRun();
					System.out.println("# --- thread " + Thread.currentThread().getName() + " terminate failed user --- " + ZoneTime.dateToShortString() + " ---");
					return;
				}
				
				// check if load test execution is temporary suspended
				boolean wasSuspended = false;
				while (isSuspend())
				{
					wasSuspended = true;
					try { Thread.currentThread().sleep(20); } catch (InterruptedException ie) {}
					if (abortedByRemote() || abortedByEofInputFile() || abortedByUniqueNumberVar())
					{
						endOfRun();
						return;
					}
					
					// check if max test duration reached during suspend
					if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
					{
						endOfRun();
						return;
					}
				}
				// check if load test execution is resumed
				if (wasSuspended)
				{
					try { sleepRemoteInterruptable(userResumeStartWaitDelay); } catch (InterruptedException ie) {}
				}
				
				// wait 20 milliseconds if loop has failed
				if (!loopPassed)
					try { Thread.currentThread().sleep(loopErrorDelay); } catch (InterruptedException ie) {}
				
				// enable pacing for the loop
				if(pacing > 0)
				{
					long loopElaspedTime = (System.nanoTime() - loopStartTime) / 1000000l;
					long loopPacingValue = Long.valueOf(pacing).longValue() * 1000l;
					if (loopElaspedTime < loopPacingValue)
					{
						threadStep = threadStep - 1;
						log(" - loop pacing: sleeping for "+ (loopPacingValue - loopElaspedTime)+" ms ...");
						Thread.currentThread().sleep(loopPacingValue - loopElaspedTime);
						threadStep++;
					}
				}
				// execute next loop
				threadLoopCounter++;
			}	// end: while (true)
		}
		catch (Throwable tex)
		{
			log("*** INTERNAL ERROR / LOAD TEST ABORTED ***");
			log(tex);
			log();
			synchronized (dumpLock)
			{
				if(replayMode)
				{
					saveReplaySnapShots("ZTReplay.snapshot");
				}
				saveATSTablesData();
				dumpLog(System.out);				// full log
				System.err.println("*** INTERNAL ERROR / LOAD TEST ABORTED ***");
				tex.printStackTrace(System.err);
				System.exit(-2);
			}
		}
		finally
		{
			// remove the reference to this load test instance and the reference to the thread that runs this instance
			try
			{
				if (!decrementEndOfLoopFlag)
				{
					getUserContextTable().getWriteLock().lock();
					getOwnLoadTestUserContext().setLoadTestUserFinallyEnded();
					getUserContextTable().getWriteLock().unlock();
				}
				else
					decrementEndOfLoopFlag = false;
			}
			catch (Throwable texFinal)
			{
				System.err.println("*** INTERNAL FINALLY ERROR / LOAD TEST ABORTED ***");
				texFinal.printStackTrace(System.err);
				System.exit(-2);
			}
		}
	}



	/**
	 * internal method: called when a user has completed the test-run.
	 */
	public void endOfRun()
	{
		clearLog();
		
		if (debugLoops && (getLog().size() > 0))
		{
			synchronized (dumpLock)
			{
				dumpLog(System.out);		// dump log of inline scripts and load test plug-ins which are executed at end of user
			}
		}
	}



	/**
	 * Main program. Starts the test and waits until all have been done.
	 */
	public static void main(String[] args)
	{
		// check command line argument -h or -help
		if ((ParseArgs.hasOption(args, "-h")) || (ParseArgs.hasOption(args, "-help")))
		{
			System.out.println();
			System.out.println("Help - Proxy Sniffer Load Test Program:");
			System.out.println();
			System.out.println("-u <number>              ->> required argument: number of concurrent users");
			System.out.println("-d <seconds>             ->> required argument: planned test duration in seconds (default: 30, 0 = unlimited)");
			System.out.println("-t <seconds>             ->> required argument: request timeout per url in seconds");
			System.out.println();
			System.out.println("-tconnect <seconds>      ->> TCP/IP socket connect timeout in seconds (default: use value of -t <seconds>)");
			System.out.println();
			System.out.println("-sdelay <milliseconds>   ->> startup delay time between concurrent users in milliseconds (default: 200)");
			System.out.println("-mtpu <number>           ->> maximum number of parallel threads per user (default: " + MAX_PARALLEL_THREADS_PER_USER + ")");
			System.out.println("-maxloops <number>       ->> maximum number of loops per user (default: 0 = unlimited)");
			System.out.println("-pacing <seconds>        ->> sets a minimum time for all in the loop executed page breaks and url calls which must be elapsed before the next loop starts (default: 0 = no pacing)");
			System.out.println("-downlink <kbps>         ->> maximum downlink network bandwidth per user in kilobits per second (default: 0 = unlimited)");
			System.out.println("-uplink <kbps>           ->> maximum uplink network bandwidth per user in kilobits per second (default: 0 = unlimited)");
			System.out.println("-multihomed <filename>   ->> use serveral client ip addresses - file format: <addr1>, <addr2>, ... (all on the same line)");
			System.out.println("-sampling <seconds>      ->> statistic sampling interval in seconds (default: 15)");
			System.out.println("-percpage <percent>      ->> additional sampling rate per web page call in percent (default: 100)");
			System.out.println("-percurl <percent>       ->> additional sampling rate per url call in percent (default: 0)");
			System.out.println("-percurlopt <level>      ->> extended sampling level per url call, see application reference manual (default: 0 = disabled)");
			System.out.println("-maxerrsnap <number>     ->> maximum number of error snapshots per url (default: 0 = unlimited)");
			System.out.println("-maxerrmem <megabytes>   ->> maximum size of memory in megabytes which can be used for error snapshots (default: 20, -1 = unlimited)");
			System.out.println("-nosdelayCluster         ->> apply startup delay time between concurrent users per exec agent, but not per cluster job (default: apply per cluster job)");
			System.out.println("-setuseragent \"<text>\"   ->> replace the recorded value of the HTTP request header field User-Agent with a new value");
			System.out.println("-collect <host>[:<port>] ->> collect additional data from external measuring agents (data collectors)");
			System.out.println("-res <filename>          ->> overrides the default name of the binary output file");
			System.out.println("-nores                   ->> disables to create the binary output file");
			System.out.println();
			System.out.println("-ssl <version>           ->> set SSL version: possible options are \"all\" (default), \"v3\", \"tls\", \"tls11\", \"tls12\" or \"tls13\"");
			System.out.println("-sslcache <seconds>      ->> timeout of user-related SSL session cache (default: 300, 0 = cache disabled)");
			System.out.println("-sslrandom <type>        ->> set the type of the random generator used for SSL handshakes: possible options are \"fast\", \"iaik\" (default) or \"java\"");
			System.out.println("-sslcmode                ->> apply SSL/HTTPS compatibility workarounds for deficient SSL servers");
			System.out.println("-noECC                   ->> disable support of elliptic curve cryptography (ECC)");
			System.out.println("-nosni                   ->> disable support of server name indication (SNI)");
			System.out.println("-snicritical             ->> set the TLS SNI extension as critical (default: non-critical)");
			System.out.println("-tlssessiontickets       ->> set the TLS to use Session Tickets (non-critical)");
			System.out.println("-iaikLast                ->> adds the IAIK security provider at the last position (instead of default: IAIK at first position)");
			System.out.println();
			System.out.println("-dnssrv <IP-1>[,IP-N])   ->> use specific DNS server(s) to resolve DNS host names (default: use OS to resolve host names)");
			System.out.println("-dnshosts <filename>     ->> use specific DNS hosts file (default: use OS to resolve host names)");
			System.out.println("-dnstranslation <filename> ->> use a DNS translation file that converts DNS names. It might be needed to disable TLS SNI if this option is used");
			System.out.println("-dnsenattl               ->> enable consideration of DNS TTL by using the received TTL-values from the DNS Server(s) (default: TTL disabled)");
			System.out.println("-dnsfixttl <seconds>     ->> enable DNS TTL by using a fixed TTL-value of seconds for all DNS resolves");
			System.out.println("-dnsperloop              ->> perform new DNS resolves for each executed loop. All resolves are stable within the same loop (no consideration of DNS TTL within a loop)");
			System.out.println("-dnsstatistic            ->> collect statistical data about DNS resolutions. Note: use this option only if not any other, more specific DNS option is enabled");
			System.out.println("-dnsdebug                ->> debug DNS resolves and the DNS cache");
			System.out.println("-enableIPv6 <networkinterface-name>  ->> enable only IPv6 support for recording, also can provide the IPv6 network interface of the load generator");
			System.out.println("-enableIPv6v4 <networkinterface-name> ->> enable both IPv6 and IPv4 (first will try with IPv6 ,if fails will try with IPv4 support for recording),also can provide the IPv6 network interface of the load generator");
			System.out.println();
			System.out.println("-dfl                     ->> debug execution steps of all failed loops to standard output");
			System.out.println("-dl                      ->> debug execution steps of all loops to standard output");
			System.out.println("-dh                      ->> debug HTTP protocol headers to standard output, includes the -dl option");
			System.out.println("-dc                      ->> debug HTTP content data to standard output, includes the -dl option");
			System.out.println("-dhc                     ->> debug HTTP protocol headers and HTTP content data to standard output, includes the -dl option");
			System.out.println("-dC                      ->> debug cookies to standard output, includes the -dl option");
			System.out.println("-dK                      ->> debug keep-alive (socket pool) to standard output, includes the -dl option");
			System.out.println("-dssl                    ->> debug SSL handshake (https) to standard output, includes the -dl and the -dK option");
			System.out.println();
			System.out.println("-tz <timezone>           ->> set time zone (see Application Reference Manual: supported time zones)");
			System.out.println("-dgs a|c                 ->> set number format (decimal group separator) a = '  c = ,");
			System.out.println("-browserlang <text>      ->> set the browser language for the test");
			System.out.println("-enablebrowcache         ->> set the browser cache mode on");
			System.out.println("-checknewpageversion     ->> set the conditional GET mode on");
			System.out.println("-cachehtml               ->> set the cache html resources flag");
			System.out.println("-newvuperloop            ->> simulate new VU per loop");
			System.out.println("-replay                  ->> Indicates the replay mode");
			System.out.println("-annotation <text>       ->> adds an annotation for this test run");
			System.out.println();
			System.out.println("-execAgentHost <ip address or dns name>      ->> set the ip address or the dns name of the exec agent from which the license is used (default: 127.0.0.1)");
			System.out.println("-execAgentPort <port>                        ->> set the tcp/ip port of the exec agent (default: 7993)");
			System.out.println("-execAgentProtocol <plain | http | https>    ->> set the protocol of the exec agent (default: plain)");
			System.out.println("-execAgentUsername <string>                  ->> set the auth. username for the exec agent (default: [no username])");
			System.out.println("-execAgentPassword <string>                  ->> set the auth. password for the exec agent (default: [no password])");
			System.out.println();
			System.out.println("-h                       ->> display this help text");
			System.out.println("-help                    ->> display this help text");
			System.out.println();
			System.exit(-1);
		}
		
		System.out.println("+----------------------------------------------------------------+");
		System.out.println("| Welcome to the ZebraTester Load Test Program.                  |");
		System.out.println("| Additional help available with program argument \"-help\"        |");
		System.out.println("| Procedure Copyright by Apica. |");
		System.out.println("| All rights reserved.             |");
		System.out.println("+----------------------------------------------------------------+");
		
		
		if (commonNextProxyConfig != null)
		{
			System.out.println();
			System.out.println("*** Warning: Loadtest over HTTP(S) Proxy ***");
		}
		
		// check command line argument -tz <timezone>
		String timeZoneString = ParseArgs.getString(args, "-tz");
		if (timeZoneString != null)
			defaultTimeZone = timeZoneString; // set time zone?
		ZoneTime.setDefaultTimeZone(defaultTimeZone);
		
		// check command line argument -noECC
		sslECC = (!ParseArgs.hasOption(args, "-noECC"));       // disable ssl ecc ?
		
		// initialize ssl/https support
		SSLInit.execute(!ParseArgs.hasOption(args, "-iaikLast"), true);
		if (sslECC)
			SSLInit.enableECC();
		
		// check command line argument -nosni
		if (ParseArgs.hasOption(args, "-nosni"))            // disable ssl sni ?
			sslSNI = false;
		
		// check command line argument -snicritical
		if (ParseArgs.hasOption(args, "-snicritical"))      // set ssl sni as critical tls extension ?
			sslSNICirical = true;
		
		// check command line argument -tlssessiontickets
		if (ParseArgs.hasOption(args, "-tlssessiontickets"))      // set tls extension session tickets?
			useTlsSessionTickets = true;
		
		// set default character set for response content tests
		setCharEncoding(prxCharEncoding);
		
		// check command line argument -dgs a|c
		String dgs = ParseArgs.getString(args, "-dgs");
		if (dgs != null)
		{
			if (dgs.equalsIgnoreCase("a"))
				defaultNumberGroupingSeparator = '\'';
			if (dgs.equalsIgnoreCase("c"))
				defaultNumberGroupingSeparator = ',';
		}
		Lib.setDefaultNumberGroupingSeparator(defaultNumberGroupingSeparator);
		
		// check command line argument -browserlang <text>
		browserLanguage = ParseArgs.getString(args, "-browserlang");
		
		// check command line argument -enablebrowcache
		if (ParseArgs.hasOption(args, "-enablebrowcache"))
		{
			enableBrowserCache = true;
			browserCacheStatistic = new BrowserCacheStatistic();
		}
		
		// check command line argument -checknewpageversion
		if (ParseArgs.hasOption(args, "-checknewpageversion"))
		{
			conditionalGet = true;
		}
		
		// check command line argument -replay
		if (ParseArgs.hasOption(args, "-replay"))
		{
			replayMode = true;
		}
		
		// check command line argument -annotation <text>
		String testRunAnnotation = ParseArgs.getString(args, "-annotation");
		if (testRunAnnotation != null)
		{
			if (testRunAnnotation.startsWith("\"") && testRunAnnotation.endsWith("\""))
				testRunAnnotation = testRunAnnotation.substring(1, testRunAnnotation.length() - 1);
		}
		
		// check command line argument -ssl
		String newSslProtocolVersion = ParseArgs.getString(args, "-ssl");
		if (newSslProtocolVersion != null)
		{
			if (newSslProtocolVersion.equalsIgnoreCase("v2"))
				sslProtocolVersion = "v2";
			if (newSslProtocolVersion.equalsIgnoreCase("v3"))
				sslProtocolVersion = "v3";
			if (newSslProtocolVersion.equalsIgnoreCase("tls"))
				sslProtocolVersion = "tls";
			if (newSslProtocolVersion.equalsIgnoreCase("tls11"))
				sslProtocolVersion = "tls11";
			if (newSslProtocolVersion.equalsIgnoreCase("tls12"))
				sslProtocolVersion = "tls12";
			if (newSslProtocolVersion.equalsIgnoreCase("tls13"))
				sslProtocolVersion = "tls13";
		}
		
		// check command line argument -sslcache <seconds>
		Integer newSslSessionCacheTimeout = ParseArgs.getInteger(args, "-sslcache");
		if (newSslSessionCacheTimeout != null)
			sslSessionCacheTimeout = newSslSessionCacheTimeout.intValue();
		
		// check command line argument -sslrandom
		String sslHandshakeRandomGeneratorTypeStr = ParseArgs.getString(args, "-sslrandom");
		if (sslHandshakeRandomGeneratorTypeStr != null)
		{
			if (sslHandshakeRandomGeneratorTypeStr.equalsIgnoreCase("java"))
				sslHandshakeRandomGeneratorType = HttpSocketPool.SSL_HANDSHAKE_RANDOM_GENERATOR_TYPE_JAVA_DEFAULT;
			if (sslHandshakeRandomGeneratorTypeStr.equalsIgnoreCase("iaik"))
				sslHandshakeRandomGeneratorType = HttpSocketPool.SSL_HANDSHAKE_RANDOM_GENERATOR_TYPE_IAIK_DEFAULT;
			if (sslHandshakeRandomGeneratorTypeStr.equalsIgnoreCase("fast"))
				sslHandshakeRandomGeneratorType = HttpSocketPool.SSL_HANDSHAKE_RANDOM_GENERATOR_TYPE_FAST;
		}
		
		// check command line argument -sslcmode
		sslcmode = ParseArgs.hasOption(args, "-sslcmode");  // enable ssl/https compatibility workarounds?
		
		// check command line argument -dfl
		debugFailedLoops = ParseArgs.hasOption(args, "-dfl"); // debug failed loops?
		
		// check command line argument -dl
		debugLoops = ParseArgs.hasOption(args, "-dl");      // debug loops?
		
		// check command line argument -dh
		debugHttp = ParseArgs.hasOption(args, "-dh");       // debug http?
		if (debugHttp)
			debugLoops = true;
		
		// check command line argument -dc
		debugContent = ParseArgs.hasOption(args, "-dc");    // debug content?
		if (debugContent)
			debugLoops = true;
		
		// check command line argument -dhc
		if (ParseArgs.hasOption(args, "-dhc"))				// debug http and content
		{
			debugLoops = true;
			debugHttp = true;
			debugContent = true;
		}
		
		// check command line argument -dC
		debugCookies = ParseArgs.hasOption(args, "-dC");    // debug cookies?
		if (debugCookies)
			debugLoops = true;
		
		// check command line argument -dK
		debugKeepAlive = ParseArgs.hasOption(args, "-dK");  // debug keep.alive (socket pool)?
		if (debugKeepAlive)
			debugLoops = true;
		
		// check command line argument -dssl
		debugSsl = ParseArgs.hasOption(args, "-dssl");      // debug keep.alive (socket pool)?
		if (debugSsl)
		{
			debugLoops = true;
			debugKeepAlive = true;
		}
		
		// get startup delay
		Integer newStartupDelay = ParseArgs.getInteger(args, "-sdelay");
		if (newStartupDelay != null)
			plannedStartupDelay = newStartupDelay.intValue();
		
		// get max. parallel threads per user - note: only valid if CONTAINS_PARALLEL_EXECUTED_URLS = true
		Integer newMaxParallelThreadsPerUser = ParseArgs.getInteger(args, "-mtpu");
		if (newMaxParallelThreadsPerUser != null)
		{
			if (newMaxParallelThreadsPerUser.intValue() > 0)
				maxParallelThreadsPerUser = newMaxParallelThreadsPerUser.intValue();
		}
		// get maximum number of loops per user
		maxPlannedLoops = 0;  // maximum loops per user, 0 = unlimited
		Integer newLoops = ParseArgs.getInteger(args, "-maxloops");
		if (newLoops != null)
			maxPlannedLoops = newLoops.intValue();
		
		// pacing of loops per user
		Integer pacingObj = ParseArgs.getInteger(args, "-pacing");
		if (pacingObj != null)
			pacing = pacingObj.intValue();
		
		// get maximum downlink network bandwidth per user (default = unlimited)
		Integer newDownlinkBandwidth = ParseArgs.getInteger(args, "-downlink");
		if (newDownlinkBandwidth != null)
			downlinkBandwidth = newDownlinkBandwidth.intValue();
		
		// get maximum uplink network bandwidth per user (default = unlimited)
		Integer newUplinkBandwidth = ParseArgs.getInteger(args, "-uplink");
		if (newUplinkBandwidth != null)
			uplinkBandwidth = newUplinkBandwidth.intValue();
		
		// get statistic sampling interval
		int samplingInterval = 15;  // statistic sampling interval in seconds
		Integer newSamplingInterval = ParseArgs.getInteger(args, "-sampling");
		if (newSamplingInterval != null)
			samplingInterval = newSamplingInterval.intValue();
		
		// get additional sampling rate per web page call
		int percentilePageSampling = 100;  // additional sampling rate per web page call in percent
		Integer newPercentilePageSampling = ParseArgs.getInteger(args, "-percpage");
		if (newPercentilePageSampling != null)
			percentilePageSampling = newPercentilePageSampling.intValue();
		
		// get additional sampling rate per url call
		int percentileUrlSampling = 0;  // additional sampling rate per url call in percent
		Integer newPercentileUrlSampling = ParseArgs.getInteger(args, "-percurl");
		if (newPercentileUrlSampling != null)
			percentileUrlSampling = newPercentileUrlSampling.intValue();
		
		// get extended sampling level per url call
		int percentileUrlSamplingAddOption = 0;  // extended sampling level per url call, 0 = disabled
		Integer newPercentileUrlSamplingAddOption = ParseArgs.getInteger(args, "-percurlopt");
		if (newPercentileUrlSamplingAddOption != null)
			percentileUrlSamplingAddOption = newPercentileUrlSamplingAddOption.intValue();
		
		// get maximum number of error snapshots per URL (0 = unlimited)
		int maxErrorSnapshots = 0;
		Integer newMaxErrorSnapshots = ParseArgs.getInteger(args, "-maxerrsnap");
		if (newMaxErrorSnapshots != null)
			maxErrorSnapshots = newMaxErrorSnapshots.intValue();
		
		// get maximum memory in megabytes which can be used for error snapshots (-1 = unlimited, default = 10)
		long maxErrorSnapshotMemory = 20;
		Long newMaxErrorSnapshotMemory = ParseArgs.getLong(args, "-maxerrmem");
		if (newMaxErrorSnapshotMemory != null)
			maxErrorSnapshotMemory = newMaxErrorSnapshotMemory.longValue();
		
		// single user mode ?
		boolean singleUserMode = ParseArgs.hasOption(args, "-singleuser");
		
		// override value for http user agent field ?
		String setUserAgentStr = ParseArgs.getIgnoreCaseString(args, "-setuseragent");
		if (setUserAgentStr != null)
		{
			USER_AGENT_1 = setUserAgentStr;
		}
		// get required input arguments
		int concurrentUsers = 0;     // number of concurrent users
		plannedRequestTimeout = 0;   // request timeout in seconds
		
		System.out.println();
		
		// parse -u argument or ask --> <number of concurrent users>
		Integer i = ParseArgs.getIntegerOrAsk(args, "-u", "Concurrent Users, <RETURN>=1 : ", new Integer(1));
		if (i == null)
			System.exit(-1);
		else
			concurrentUsers = i.intValue();
		
		// parse -d argument or ask --> <test duration in seconds>
		i = ParseArgs.getIntegerOrAsk(args, "-d", "Test Duration in Seconds, <RETURN>=30 : ", new Integer(30));
		if (i == null)
			System.exit(-1);
		else
			plannedTestDuration = i.intValue();
		
		// parse -t argument or ask --> <request timeout in seconds>
		i = ParseArgs.getIntegerOrAsk(args, "-t", "HTTP Request Timeout per URL in Seconds, <RETURN>=60 : ", new Integer(60));
		if (i == null)
			System.exit(-1);
		else
			plannedRequestTimeout = i.intValue();
		
		// parse optional -tconnect argument (TCP/IP socket connect timeout in seconds)
		i = ParseArgs.getInteger(args, "-tconnect");
		if (i != null)
			plannedConnectTimeout = i.intValue();
		
		String genericFileName = PerformanceData.proposeFileName("creditsuisse_v3_2021", concurrentUsers, ParseArgs.getString(args, "-executionPlan"));
		
		// auto-configure binary result file
		if (!ParseArgs.hasOption(args, "-nores"))
		{
			String newResultFile = ParseArgs.getString(args, "-res");
			if (newResultFile == null)
				resultFile = genericFileName + ".prxres";
			else
				resultFile = newResultFile;
			System.out.println("Result File : " + resultFile);
		}
		
		// display common arguments at console output
		System.out.println();
		System.out.println("# concurrent users = " + concurrentUsers);
		System.out.println("# max. parallel threads per user = [serial execution order for all URLs]");
		System.out.print("# planned test duration = ");
		if (plannedTestDuration == 0 || plannedTestDuration == -1)
			System.out.println("unlimited");
		else
			System.out.println("" + plannedTestDuration + " seconds");
		System.out.println("# http request timeout = " + plannedRequestTimeout + " seconds");
		if (plannedConnectTimeout != 0)
			System.out.println("# tcp/ip socket connect timeout = " + plannedConnectTimeout + " seconds");
		System.out.println("# startup delay = " + plannedStartupDelay + " milliseconds");
		System.out.println("# statistic sampling interval = " + samplingInterval + " seconds");
		System.out.println("# additional sampling rate per web page call = " + percentilePageSampling + " %");
		System.out.println("# additional sampling rate per url call = " + percentileUrlSampling + " %");
		System.out.println("# extended sampling per url call = " + PerformanceDataTickExtension.extTypeToString(percentileUrlSamplingAddOption).toLowerCase());
		System.out.print("# max loops per user = ");
		if (maxPlannedLoops == 0)
			System.out.println("unlimited");
		else
			System.out.println("" + maxPlannedLoops + " loops");
		System.out.print("# pacing for loops = ");
		if (pacing == 0)
			System.out.println("no pacing");
		else
			System.out.println("" + pacing + " seconds");
		if (downlinkBandwidth > 0)
			System.out.println("# max downlink bandwidth per user = " + downlinkBandwidth + " kbps");
		if (uplinkBandwidth > 0)
			System.out.println("# max uplink bandwidth per user = " + uplinkBandwidth + " kbps");
		System.out.println("# http protocol version = v" + httpProtocolVersion);
		System.out.println("# ssl protocol version = " + sslProtocolVersion);
		if (sslSessionCacheTimeout != 0)
			System.out.println("# ssl session cache timeout = " + sslSessionCacheTimeout + " seconds");
		else
			System.out.println("# ssl session cache disabled");
		if (resultFile != null)
			System.out.println("# result file = " + resultFile);
		else
			System.out.println("# no result file");
		if (debugFailedLoops)
			System.out.println("# debug failed loops");
		if (debugLoops)
			System.out.println("# debug loops");
		if (debugHttp)
			System.out.println("# debug http protocol headers");
		if (debugContent)
			System.out.println("# debug http content data");
		if (debugCookies)
			System.out.println("# debug cookies");
		if (debugKeepAlive)
			System.out.println("# debug keep-alive (socket pool)");
		if (debugSsl)
			System.out.println("# debug ssl (https)");
		if (enableBrowserCache)
		{
			if (conditionalGet)
			System.out.println("# browser cache - conditional GET is enabled");
		}
		
		
		// ----------------------------
		// *** initialize load test ***
		// ----------------------------
		
		
		// initialize performance data
		// ---------------------------
		final int PAGE_BREAKS = 5;  // number of page breaks in execute()  - modify this value if you add or delete some page breaks
		final int MAX_THREAD_STEPS = 675;  // number of URL requests in execute() - modify this value if you add or delete some requests
		performanceData = new PerformanceData(PAGE_BREAKS, MAX_THREAD_STEPS, concurrentUsers, -1, plannedTestDuration, maxPlannedLoops, httpProtocolVersion, plannedStartupDelay, plannedRequestTimeout, samplingInterval, percentilePageSampling, percentileUrlSampling, percentileUrlSamplingAddOption);
		performanceData.setInfoText("creditsuisse_v3_2021");
		performanceData.setExecutorsAnnotation(testRunAnnotation);
		if (commonNextProxyConfig != null)
		{
			performanceData.setProxyInfo(proxyHttpHost, proxyHttpPort, proxyHttpsHost, proxyHttpsPort);
			performanceData.addTestDescription("*** Warning: Load test executed via outbound proxy ***");
		}
		performanceData.setResultFileName(resultFile);
		performanceData.setDumpStream(System.out, "# ");
		performanceData.setMaxErrorSnapshots(maxErrorSnapshots);		// 0 = unlimited
		if (maxErrorSnapshotMemory >= 0)
			performanceData.setMaxErrorSnapshotsMemory(maxErrorSnapshotMemory * 1048576l);		// value in bytes
		
		if (sslECC)
			performanceData.addTestDescription("*** SSL/TLS ECC is enabled ***");
		
		if ((downlinkBandwidth != 0) || (uplinkBandwidth != 0))
		{
			String downlinkBandwidthStr = "unlimited";
			String uplinkBandwidthStr = "unlimited";
			
			if (downlinkBandwidth != 0)
				downlinkBandwidthStr = "" + downlinkBandwidth + " kbps";
			if (uplinkBandwidth != 0)
				uplinkBandwidthStr = "" + uplinkBandwidth + " kbps";
			
			performanceData.addTestDescription("*** Warning: Max. network bandwidth per user limited. downlink = " + downlinkBandwidthStr + ", uplink = " + uplinkBandwidthStr + " ***");
		}
		
		if ((percentileUrlSamplingAddOption != PerformanceDataTickExtension.EXT_TYPE_NOTYPE) && (percentileUrlSampling > 0))
			performanceData.addTestDescription("*** Warning: Option \"" + PerformanceDataTickExtension.extTypeToString(percentileUrlSamplingAddOption).toLowerCase() + "\" enabled for additional sampling rate per URL call ***");
		if (debugFailedLoops)
			performanceData.addTestDescription("*** Warning: Debug failed loops enabled ***");
		if (debugLoops)
			performanceData.addTestDescription("*** Warning: Debug loops enabled ***");
		if (debugHttp)
			performanceData.addTestDescription("*** Warning: Debug HTTP protocol headers enabled ***");
		if (debugContent)
			performanceData.addTestDescription("*** Warning: Debug HTTP content data enabled ***");
		if (debugCookies)
			performanceData.addTestDescription("*** Warning: Debug cookies enabled ***");
		if (debugKeepAlive)
			performanceData.addTestDescription("*** Warning: Debug keep-alive enabled ***");
		if (debugSsl)
			performanceData.addTestDescription("*** Warning: Debug SSL/TLS enabled ***");
		if (!sslProtocolVersion.equalsIgnoreCase("all"))
			performanceData.addTestDescription("*** Warning: SSL/TLS protocol version fixed to " + sslProtocolVersion.toUpperCase() + " ***");
		if (sslSessionCacheTimeout == 0)
			performanceData.addTestDescription("*** Warning: SSL/TLS session cache disabled ***");
		if (singleUserMode)
		{
			String singleUserModeWarning = "*** Warning: Single user mode enabled ***";
			System.out.println(singleUserModeWarning);
			performanceData.addTestDescription(singleUserModeWarning);
		}
		if (setUserAgentStr != null)
		{
			String overrideUserAgentWarning = "*** Warning: User agent set to \"" + setUserAgentStr + "\" ***";
			System.out.println(overrideUserAgentWarning);
			performanceData.addTestDescription(overrideUserAgentWarning);
		}
		
		
		// ready to start load test...
		initNull(concurrentUsers);
		performanceData.setUserContextTable(getUserContextTable());
		
		// ... but init first remote interface ...
		initRemote(args);
		
		// ... and init plug-in class loader ...
		try
		{
			if (getPluginClassLoader() == null)
				setPluginClassLoader(new LoadtestPluginClassLoader(getSymmetricEncryptContext(), getEncryptedClasspathList()));
		}
		catch (Throwable pluginClassLoaderThrowable)
		{
			System.out.println("*** ERROR: Unable to load encrypted files ***");
			pluginClassLoaderThrowable.printStackTrace();
			System.exit(-1);
		}
		
		// ... and check multihomed option ...
		initMultihomed(args);
		
		// ... and add dynaTrace session ID to load test result - if available ...
		initDynaTrace();
		
		
		// use test-specific DNS hosts file (optional) ?
		String dnsHostsFile = ParseArgs.getIgnoreCaseString(args, "-dnshosts");
		if (dnsHostsFile != null)
		{
			try
			{
				dnsCache = new DNSCache(getSymmetricEncryptContext(), dnsHostsFile);
			}
			catch (IOException ie)
			{
				System.out.println("*** ERROR: unable to read DNS hosts file " + dnsHostsFile + " ***");
				System.out.println("*** Hint: you have to ZIP " + dnsHostsFile + " together with the compiled class of the load test program ***");
				ie.printStackTrace();
				System.exit(-1);
			}
		}
		
		// use test-specific DNS translation table (optional) ?
		String dnsTranslationTableFile = ParseArgs.getIgnoreCaseString(args, "-dnstranslation");
		if (dnsTranslationTableFile != null)
		{
			try
			{
				DNSTranslationTable dnsTranslationTable = new DNSTranslationTable(getSymmetricEncryptContext(), new File(dnsTranslationTableFile));
				if (dnsCache == null)
					dnsCache = new DNSCache();
				dnsCache.setDNSTranslationTable(dnsTranslationTable);
			}
			catch (IOException ie)
			{
				System.out.println("*** ERROR: unable to read DNS translation table file " + dnsTranslationTableFile + " ***");
				System.out.println("*** Hint: you have to ZIP " + dnsTranslationTableFile + " together with the compiled class of the load test program ***");
				ie.printStackTrace();
				System.exit(-1);
			}
		}
		
		// use test-specific DNS servers (optional) ?
		String dnsSrvStr = ParseArgs.getIgnoreCaseString(args, "-dnssrv");
		if (dnsSrvStr != null)
		{
			ArrayList<String> dnsSrvList = new ArrayList<String>();
			StringTokenizer dnsTok = new StringTokenizer(dnsSrvStr, ",;");
			while (dnsTok.hasMoreTokens())
				dnsSrvList.add(dnsTok.nextToken());
			if (dnsCache == null)
				dnsCache = new DNSCache(dnsSrvList);
			else
				dnsCache.setDnsServers(dnsSrvList);
		}
		
		// enable DNS TTL ?
		if (ParseArgs.hasOption(args, "-dnsenattl"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.enableTTL();
		}
		
		// set fixed DNS TTL ?
		Integer dnsFixTTL = ParseArgs.getInteger(args, "-dnsfixttl");
		{
			if (dnsFixTTL != null)
			{
				if (dnsCache == null)
					dnsCache = new DNSCache();
				dnsCache.setFixedTTL(dnsFixTTL.intValue());
			}
		}
		
		// enable DNS resolves per loop ?
		if (ParseArgs.hasOption(args, "-dnsperloop"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsPerLoop = true;
		}
		
		// enable DNS statistic ?   // note: use this option only if not any other, more specific DNS option is enabled.
		if (ParseArgs.hasOption(args, "-dnsstatistic"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
		}
		
		// debug DNS resolver ?
		if (ParseArgs.hasOption(args, "-dnsdebug"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.setDebugToStdout(true);
		}
		
		// enable IPv6 
		if (ParseArgs.hasIgnoreCaseOption(args, "-enableIPv6"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.setEnableIPv6(true);
			String networkInterfaceName = ParseArgs.getString(args, "-enableIPv6");
			if(null != networkInterfaceName && !networkInterfaceName.startsWith("-"))
				dnsCache.setNetworkInterfaceName(networkInterfaceName);
		}
		
		// enable IPv6 and V4 
		if (ParseArgs.hasIgnoreCaseOption(args, "-enableIPv6v4"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.setEnableIPv6v4(true);
			String networkInterfaceName = ParseArgs.getString(args, "-enableIPv6v4");
			if(null != networkInterfaceName && !networkInterfaceName.startsWith("-"))
				dnsCache.setNetworkInterfaceName(networkInterfaceName);
		}
		
		if (dnsCache != null)
		{
			// update performance data with DNS settings
			performanceData.addDNSCacheStatistic(dnsCache.getCacheStatistic());
			performanceData.addTestDescription("*** Warning: OS-independent DNS access enabled. " + dnsCache.getConfigInfoText() + " ***");
			if (dnsPerLoop)
				performanceData.addTestDescription("*** Warning: DNS option -dnsperloop enabled ***");
			
			// log DNS settings
			System.out.println("# OS-independent DNS access enabled. " + dnsCache.getConfigInfoText());
			if (dnsPerLoop)
				System.out.println("# DNS option -dnsperloop enabled");
		}
		
		// calculate sampling offset and virtual user startup offset for cluster jobs (time shift per cluster member)
		int samplingTimeshift = 0;	// value in seconds
		if (!ParseArgs.hasOption(args, "-nosdelayCluster"))
		{
			if ((getClusterTotalMemberCount() > 1) && (getClusterMemberLocalId() > 0))
			{
				samplingTimeshift = Math.round(((float) samplingInterval / (float) getClusterTotalMemberCount()) * (float) getClusterMemberLocalId());
				System.out.println("# samplingTimeshift = " + samplingTimeshift + " seconds");
				
				long startupDelayOffset = (plannedStartupDelay / ((long) getClusterTotalMemberCount())) * ((long) getClusterMemberLocalId());
				System.out.println("# startupDelayTimeshift = " + startupDelayOffset + " milliseconds");
				System.out.println();
				if (startupDelayOffset > 0)
				{
					try { sleepRemoteInterruptable(startupDelayOffset); } catch (InterruptedException ie) {}
				}
			}
		}
		
		
		// Add user defined data point sequences to performance data
		// -----------------------
		initializeDataCollectionSequences();
		
		
		// update performance data
		// -----------------------
		testDurationStart = System.currentTimeMillis();
		performanceData.setStartDate();
		performanceData.addSnapshot(getCpuUsagePercent());
		performanceData.setSnapshotsTimeshift(samplingTimeshift);
		performanceData.setEndDate();
		if(browserCacheStatistic != null)
		{
			performanceData.setBrowserCacheStatistic(browserCacheStatistic);
		}
		
		// initialize global context for plug-ins  
		LoadtestPluginContext globalPluginContext = new LoadtestPluginContext(prxVersion, prxCharEncoding, new creditsuisse_v3_2021());
		
		
		// --------------------------
		// *** start of load test ***
		// ---------------------------
		
		
		// special case for execution plans - start test with zero virtual users
		// ---------------------------------------------------------------------
		if (hasExecutionPlan())
		{
			if (concurrentUsers != 0)
			{
				System.out.println("*** Fatal Error: Load test with execution plan must start with zero number of virtual users - Load test program aborted ***");
				System.exit(1);
			}
			try
			{
				getUserContextTable().getWriteLock().lock();
				
				creditsuisse_v3_2021 simulatedUser = new creditsuisse_v3_2021(maxPlannedLoops, plannedRequestTimeout, getUserContextTable().getUserContextList().size());
				
				HttpLoadTestUserContext userContext = new HttpLoadTestUserContext(simulatedUser, null);
				userContext.setLoadTestUserExecutionPlanPlaceholder();
				getUserContextTable().getUserContextList().add(userContext);
				simulatedUser.setOwnLoadTestUserContext(userContext);
			}
			finally
			{
				getUserContextTable().getWriteLock().unlock();
			}
		}
		
		
		// start virtual users as threads (normal case)
		// --------------------------------------------
		usersToBeIncreasedAtStartupOffset.set(concurrentUsers);
		for (int x = 0; x < concurrentUsers; x++)
		{
			if (cancelIncrementDecrementUser || cancelInitialIncrementUser)
			{
				usersToBeIncreasedAtStartupOffset.set(0);
				break;
			}
			
			// start load test thread
			// ----------------------
			Thread t = null;
			try
			{
				getUserContextTable().getWriteLock().lock();
				
				creditsuisse_v3_2021 simulatedUser = new creditsuisse_v3_2021(maxPlannedLoops, plannedRequestTimeout, getUserContextTable().getUserContextList().size());
				t = new Thread(simulatedUser);
				String threadName = "" + getUserContextTable().getUserContextList().size();
				threadName = THREAD_NAME.substring(0, 7 - threadName.length()) + threadName;
				t.setName(threadName);
				if (debugLoops && (simulatedUser.getLog().size() > 0))
				{
					synchronized (dumpLock)
					{
						simulatedUser.dumpLog(threadName + " ", System.out);		// dump log of constructor
					}
				}
				HttpLoadTestUserContext userContext = new HttpLoadTestUserContext(simulatedUser, t);
				getUserContextTable().getUserContextList().add(userContext);
				simulatedUser.setOwnLoadTestUserContext(userContext);
			}
			finally
			{
				getUserContextTable().getWriteLock().unlock();
			}
			t.start();
			usersToBeIncreasedAtStartupOffset.decrementAndGet();
			System.out.println("# --- thread " + t.getName() + " created --- " + ZoneTime.dateToShortString() + " ---");
			
			while (isSuspend())
			{
				try { Thread.currentThread().sleep(100); } catch (InterruptedException ie) { break; }
				if (abortedByRemote() || abortedByEofInputFile() || abortedByUniqueNumberVar())
					break;
				
				// check if max test duration reached during suspend
				if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
					break;
				
				// display and sample temporary performance data all "sampling interval" seconds - also during suspend
				if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
				{
					performanceData.addSnapshot(getCpuUsagePercent());
					performanceData.setEndDate();
				}
			}
			
			if (abortedByRemote() || abortedByEofInputFile() || abortedByUniqueNumberVar())
				break;
			
			if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				break;
			
			// startup delay for next thread
			// -----------------------------
			try
			{
				if (!singleUserMode)   // create concurrent users
				{
					if (plannedStartupDelay <= 3000)
						sleepRemoteInterruptable(plannedStartupDelay);
					else
					{
						long startupDelayStartTime = System.currentTimeMillis();
						while (true)
						{
							if (abortedByRemote() || abortedByEofInputFile() || abortedByUniqueNumberVar())
								break;
							if ((System.currentTimeMillis() - startupDelayStartTime) >= plannedStartupDelay)
								break;
							
							Thread.currentThread().sleep(100);
							
							// display and sample temporary performance data all "sampling interval" seconds
							if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
							{
								performanceData.addSnapshot(getCpuUsagePercent());
								performanceData.setEndDate();
							}
						}
						while (isSuspend())
						{
							try { Thread.currentThread().sleep(100); } catch (InterruptedException ie) { break; }
							if (abortedByRemote() || abortedByEofInputFile() || abortedByUniqueNumberVar())
								break;
							
							// check if max test duration reached during suspend
							if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
								break;
							
							// display and sample temporary performance data all "sampling interval" seconds - also during suspend
							if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
							{
								performanceData.addSnapshot(getCpuUsagePercent());
								performanceData.setEndDate();
							}
						}
						
					}
				}
				else
					t.join();   // single user mode
			}
			catch (InterruptedException ie) { break; }
			if (abortedByRemote() || abortedByEofInputFile() || abortedByUniqueNumberVar())
				break;
			
			
			// display and sample temporary performance data all "sampling interval" seconds
			if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
			{
				performanceData.addSnapshot(getCpuUsagePercent());
				performanceData.setEndDate();
				if (!isRemote())
				{
					synchronized (dumpLock)
					{
						performanceData.dump(false);
					}
				}
			}
		}
		usersToBeIncreasedAtStartupOffset.set(0);	// just in case that a thread is not started for any reason
		
		
		// wait for test-end in a loop
		// ---------------------------
		boolean allDone = false;
		while (!allDone)
		{
			// test aborted ?
			if (abortedByRemote() || abortedByEofInputFile() || abortedByUniqueNumberVar())
			{
				nearRemoteEnd();
				String abort = "";
				if (abortedByRemote())
					abort = "*** test aborted by remote command ***";
				if (abortedByEofInputFile())
				{
					abort = "*** test aborted at eof of input file ***";
					performanceData.addTestDescription(abort);
				}
				if (abortedByUniqueNumberVar())
				{
					abort = "*** test aborted as an unique number is out of values ***";
					performanceData.addTestDescription(abort);
				}
				synchronized (dumpLock)
				{
					addSSLCacheStatistic();
					performanceData.addSnapshot(getCpuUsagePercent());
					performanceData.setEndDate();
					
					if (!isRemote())
						performanceData.dump(false);
					if (resultFile != null)
						try { performanceData.writeObjectToFile(getSymmetricEncryptContext(), resultFile); } catch (IOException ie) { ie.printStackTrace(); }
					
					if(replayMode)
					{
						saveReplaySnapShots("ZTReplay.snapshot");
					}
					
					saveATSTablesData();
					System.out.println();
					System.out.println(abort);
					System.out.println();
					System.out.flush();
					try { Thread.currentThread().sleep(10000); } catch (InterruptedException ie) {}
					System.exit(0);
				}
			}
			
			// display and sample temporary performance data all "sampling interval" seconds
			if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
			{
				performanceData.addSnapshot(getCpuUsagePercent());
				performanceData.setEndDate();
				if (!isRemote())
				{
					synchronized (dumpLock)
					{
						performanceData.dump(false);
					}
				}
			}
			
			// check if test has been done in case of decrement users to zero
			if ((decrementUser) && (plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				decrementUser = false;
			// check if test has been done
			if (!hasExecutionPlan())
				allDone = isTestDone();
			else
			{
				if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				{
					performanceData.addTestDescription("*** Warning: Load test aborted. Execution plan time limit exceeded after " + plannedTestDuration + " seconds ***");
					triggerAbort();
				}
			}
			
			// if not all is done: sleep one second
			if (!allDone)
				try { sleepRemoteInterruptable(1000); } catch (InterruptedException ie) { break; }
		} // end of wait loop
		
		
		// mark near end of test - only if a remote interface has been used
		nearRemoteEnd();
		
		
		
		// final test result - test completed
		// ----------------------------------
		performanceData.addSnapshot(getCpuUsagePercent());
		performanceData.setEndDate();
		if(replayMode)
		{
			saveReplaySnapShots("ZTReplay.snapshot");
		}
		saveATSTablesData();
		
		// save test result
		performanceData.dump(true);
		if (resultFile != null)
			try { performanceData.writeObjectToFile(getSymmetricEncryptContext(), resultFile); } catch (IOException ie) { ie.printStackTrace(); }
		
		// all done
		System.out.flush();
		
		// wait for official end of test - only if a remote interface has been used
		waitRemoteEnd();
		
		System.out.println();
		System.out.println("Result File: " + resultFile);
		
		// now dead
		System.exit(0);
	}


	/**
	 * implement VaryingLoadInterface: support to increment the number of simulated users at runtime.
	 */
	public void setIncrementUser(long startTime)
	{
		incrementUserStartTime = startTime;
		incrementUserFlag = true;
	}

	public boolean isIncrementUser()
	{
		return incrementUserFlag;
	}

	public long getIncrementUserStartTime()
	{
		return incrementUserStartTime;
	}

	public void setIncrementUserStartTime(long startTime)
	{
		incrementUserStartTime = startTime;
	}

	public void clearIncrementUser()
	{
		incrementUserFlag = false;
	}

	public int incrementUsers(int numAddUsers, long startupDelay)
	{
		if (startupDelay < 0)
			startupDelay = plannedStartupDelay;
		return incrementUsersImplementation(numAddUsers, startupDelay, this);
	}

	static int incrementUsersImplementation(int numAddUsers, long startupDelay, HttpLoadTest httpLoadTest)
	{
		long startupDelayOffset = 0;
		if ((getClusterTotalMemberCount() > 1) && (getClusterMemberLocalId() > 0))
			startupDelayOffset = (startupDelay / ((long) getClusterTotalMemberCount())) * ((long) getClusterMemberLocalId());
		
		ArrayList<HttpLoadTestUserContext> addUserContextList = new ArrayList<HttpLoadTestUserContext>(numAddUsers);
		for (int x = 0; x < numAddUsers; x++)
		{
			if (abortedByRemote() || abortedByEofInputFile() || abortedByUniqueNumberVar())
				return x;
			
			// initialize load test thread
			// ---------------------------
			try
			{
				getUserContextTable().getWriteLock().lock();
				
				creditsuisse_v3_2021 simulatedUser = new creditsuisse_v3_2021(maxPlannedLoops, plannedRequestTimeout, getUserContextTable().getUserContextList().size());
				HttpLoadTestUserContext userContext = prepareIncrementUser(simulatedUser, System.currentTimeMillis() + startupDelayOffset + (x * startupDelay));
				addUserContextList.add(userContext);
				simulatedUser.setOwnLoadTestUserContext(userContext);
				if (debugLoops && (simulatedUser.getLog().size() > 0))
				{
					synchronized (dumpLock)
					{
						simulatedUser.dumpLog(userContext.getLoadTestThread().getName() + " ", System.out);		// dump log of constructor
					}
				}
			}
			finally
			{
				getUserContextTable().getWriteLock().unlock();
			}
		}
		
		// start load test threads by a thread
		// -----------------------------------
		HttpLoadTestIncrementUserThread incrementUserThread = new HttpLoadTestIncrementUserThread(httpLoadTest, addUserContextList);
		incrementUserThread.start();
		return numAddUsers;
	}


	/**
	 * Internal method used to load and apply next proxy settings from ZBAProxySettings.properties file.
	 * Settings are applied only if file exists and nextProxyIsActive is set to true in the file.
	 * Note that settings stored with the session, will be ineffective.
	 *
	 * @since V5.5-D
	 */
	private void applyNextProxySettingsFromFileIfExists()
	{
		
		String filename = "ZBAProxySettings.properties";
		BufferedReader bin = null;
		SymmetricEncryptContext decryptContext = getSymmetricEncryptContext();
		File file = new File(filename);
		
		if (file.exists())
		// open input file
		try
		{
			if (decryptContext == null)
			{
				bin = new BufferedReader(new InputStreamReader(new FileInputStream(filename), Charset.forName("UTF-8")));
			}
			else
			{
				// create a reader stream that decrypts the data on the fly
				bin = new BufferedReader(new InputStreamReader(SymmetricEncrypt.getCipherInputStream(new FileInputStream(filename), decryptContext), Charset.forName("UTF-8")));
			}
			
			if (bin != null)
			{
				Properties nextProxyConfigProperties = new Properties();
				nextProxyConfigProperties.load(bin);
				NextProxyConfig nextProxyConfig = new NextProxyConfig();
				nextProxyConfig.setActive(Boolean.valueOf(nextProxyConfigProperties.getProperty("nextProxyIsActive")));
				proxyEnabled = nextProxyConfig.isActive();                             // if false: do not use a proxy server
				
				if (proxyEnabled)
				{
					nextProxyConfig.disableHttpProxyCache(Boolean.valueOf(nextProxyConfigProperties.getProperty("nextProxyHttpCacheDisabled")));
					proxyCacheDisabled = nextProxyConfig.isDisabledHttpProxyCache();
					nextProxyConfig.setHttpHost(nextProxyConfigProperties.getProperty("nextProxyHttpHost"));
					proxyHttpHost = nextProxyConfig.getHttpHost();
					nextProxyConfig.setHttpPort(Integer.valueOf(nextProxyConfigProperties.getProperty("nextProxyHttpPort")));
					proxyHttpPort = nextProxyConfig.getHttpPort();
					nextProxyConfig.setHttpsHost(nextProxyConfigProperties.getProperty("nextProxyHttpsHost"));
					proxyHttpsHost = nextProxyConfig.getHttpsHost();
					nextProxyConfig.setHttpsPort(Integer.valueOf(nextProxyConfigProperties.getProperty("nextProxyHttpsPort")));
					proxyHttpsPort = nextProxyConfig.getHttpsPort();
					nextProxyConfig.setAuthUsername(nextProxyConfigProperties.getProperty("nextProxyAuthUsername"));
					nextProxyConfig.setAuthPassword(nextProxyConfigProperties.getProperty("nextProxyAuthPassword"));
					nextProxyConfig.setNoNextProxy(nextProxyConfigProperties.getProperty("noNextProxy"));
					noProxyFor = nextProxyConfig.getNoNextProxy();
					
					String proxyAuth = "";
					
					if (nextProxyConfig.getAuthUsername() != null)
					{
						proxyAuth = nextProxyConfig.getAuthUsername() + ":";
						if (nextProxyConfig.getAuthPassword() != null)
							proxyAuth = proxyAuth + nextProxyConfig.getAuthPassword();
					}
					
					String  proxyAuthorization = null;
					
					if (proxyAuth.length() > 1)
						proxyAuthorization = Base64Encoder.encode(proxyAuth);		// Base 64 encoded - used for basic authentication only
					
					commonNextProxyConfig = new NextProxyConfig(proxyEnabled, proxyCacheDisabled, proxyHttpHost, proxyHttpPort, proxyHttpsHost, proxyHttpsPort, proxyAuthorization, noProxyFor);
					
					log("*** Warning: Applying proxy configuration from file " + filename + " ***");
				}
				
			}
		}
		catch (Throwable tr)
		{
			log("*** Unable to load proxy configuration from properties file " + filename + " ***");
			tr.printStackTrace();
		}
		finally
		{
			if (bin != null)
			{
				try { bin.close(); } catch (Exception e) {}
			}
		}
		
	}
		
	/**
	 * Internal method used to initialize all data collection sequences for user defined data points.
	 * @since V6.0-A
	 */
	private static void initializeDataCollectionSequences()
	{
		int newSequenceId = performanceData.getDataCollectionSet().getNewSequenceId();
		
		
	}
		

}	// end of class

