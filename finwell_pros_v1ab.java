
// *********************************************************************************************
//
// Automatically Generated Load Test Program
// -----------------------------------------
//
// Source: finwell_pros_v1ab.java
// Date  : 13 Jan 2021 22:18:04 ECT
// Author: Apica ZebraTester V5.5-Z / automatically generated
//
// Procedure Copyright by Apica
// All Rights Reserved
//
// http://www.apicasystem.com                                         http://www.zebratester.com
// *********************************************************************************************


import java.io.*;
import java.nio.charset.Charset;
import java.util.*;
import java.util.concurrent.atomic.*;
import org.apache.commons.lang3.StringUtils;
import dfischer.utils.AbstractInputFileReader;
import dfischer.utils.Base64Decoder;
import dfischer.utils.Base64Encoder;
import dfischer.utils.ConvertToDoubleNumber;
import dfischer.utils.ContentTokenExtractor;
import dfischer.utils.ContentTokenExtractorItem;
import dfischer.utils.Cookie;
import dfischer.utils.CookieHandler;
import dfischer.utils.DigestAuthContext;
import dfischer.utils.DNSCache;
import dfischer.utils.DNSTranslationTable;
import dfischer.utils.DynamicProtobufContentParser;
import dfischer.utils.ExternalParamFile;
import dfischer.utils.FileCache;
import dfischer.utils.GenericPluginInterface;
import dfischer.utils.GetRealTimeUserInputFieldsInterface;
import dfischer.utils.HtmlContentParser;
import dfischer.utils.HtmlHeaderCookieExtractor;
import dfischer.utils.HttpLoadTest;
import dfischer.utils.HttpLoadTestIncrementUserThread;
import dfischer.utils.HttpLoadTestUserContext;
import dfischer.utils.HttpSocketPool;
import dfischer.utils.HttpTestURL;
import dfischer.utils.HttpTestURLDNSContext;
import dfischer.utils.HttpTestURLThreadHandler;
import dfischer.utils.InlineScriptExecutionException;
import dfischer.utils.InlineScriptExecutor;
import dfischer.utils.InnerLoopContext;
import dfischer.utils.JSONHtmlBasedExtractor;
import dfischer.utils.JSONPathBasedExtractor;
import dfischer.utils.JSONPathBasedExtractorItem;
import dfischer.utils.Lib;
import dfischer.utils.LoadtestInlineScriptContext;
import dfischer.utils.LoadtestInlineScriptVar;
import dfischer.utils.LoadtestPluginClassLoader;
import dfischer.utils.LoadtestPluginContext;
import dfischer.utils.NextProxyConfig;
import dfischer.utils.ParseArgs;
import dfischer.utils.ParseUrl;
import dfischer.utils.PerformanceData;
import dfischer.utils.PerformanceDataTickExtension;
import dfischer.utils.ProtobufFieldAndValueElement;
import dfischer.utils.ProtobufLib;
import dfischer.utils.RealTimeUserInputField;
import dfischer.utils.ScreenshotImage;
import dfischer.utils.SetThreadStepInterface;
import dfischer.utils.SSLInit;
import dfischer.utils.SSLSessionCacheStatistic;
import dfischer.utils.SSLSessionCacheStatisticInterface;
import dfischer.utils.SuspendResumeInterface;
import dfischer.utils.SymmetricEncrypt;
import dfischer.utils.SymmetricEncryptContext;
import dfischer.utils.TextLineTokenExtractor;
import dfischer.utils.TextLineTokenExtractorItem;
import dfischer.utils.ThreadStepInterface;
import dfischer.utils.UserInputField;
import dfischer.utils.UserTransactionContext;
import dfischer.utils.UserTransactionRuntimeHandler;
import dfischer.utils.VarInputFileReader;
import dfischer.utils.VarRandomInputFileReader;
import dfischer.utils.VaryingLoadInterface;
import dfischer.utils.VaryingTestDurationInterface;
import dfischer.utils.XmlContentParser;
import dfischer.utils.XmlDoctypeCommentParser;
import dfischer.utils.ZoneTime;
import dfischer.proxysniffer.ProxySnifferVarSourceInlineScript;
import dfischer.utils.WebSocketPluginInterface;
import dfischer.utils.BoundaryBasedExtractor;
import dfischer.utils.BoundaryBasedExtractorItem;
import dfischer.utils.RegExpBasedExtractor;
import dfischer.utils.RegExpBasedExtractorItem;
import dfischer.utils.XpathBasedExtractor;
import dfischer.utils.XpathBasedExtractorItem;
import dfischer.proxysniffer.WebSocketData;
import dfischer.utils.HttpTestWebsocketContext;
import dfischer.websocket.*;
import dfischer.utils.DataCollectionSequence;
import dfischer.proxysniffer.ProxyDataRecordActionUserDefinedDataPoint;
import replay.ReplaySnapShotsDump;
import dfischer.utils.BrowserCacheStatistic;
import dfischer.generator.ReplaceVarPattern;


/**
 * Automatically generated load test program.
 */
public class finwell_pros_v1ab extends HttpLoadTest implements Runnable, ThreadStepInterface, SetThreadStepInterface, SSLSessionCacheStatisticInterface, VaryingLoadInterface, VaryingTestDurationInterface, SuspendResumeInterface, GetRealTimeUserInputFieldsInterface
{
	public static final String prxVersion = "V5.5-Z";
	public static final int    prxCharEncoding = 3;                         // 1 = OS Default, 2 = ISO-8859-1, 3 = UTF-8
	public static final String testDescription = "";

	public static String USER_AGENT_1 = "Apica";

	private static final boolean CONTAINS_PARALLEL_EXECUTED_URLS = false;
	private static final int MAX_PARALLEL_THREADS_PER_USER = 6;                       // default value for max. parallel executed URLs per user
	private static int maxParallelThreadsPerUser = MAX_PARALLEL_THREADS_PER_USER;     // configured value for max. parallel executed URLs per user

	private static final boolean CONTAINS_EXTERNAL_RESOURCES = false;       // note: external resources are typically additional Java library files (*.jar files) invoked by self-developed plug-ins. Consider that Input Files and the Main Class of Plug-Ins are NOT external resources in this context because ZebraTester knows already their declarations.

	public static final String USER_INPUT_FIELD_Userid = "AQAGVXNlcmlkAQAGVXNlcmlkAQANRldUZXN0XzEwMDA1OA@@";		// internal object-string representation of user input field 'Userid'
	public static final String USER_INPUT_FIELD_Password = "AQAIUGFzc3dvcmQBAAhQYXNzd29yZAEACFdlbGNvbWUx";		// internal object-string representation of user input field 'Password'

	// --- WebSocket Object ---
	WebSocketData webSocketData = null;                                     // WebSocket Object that contains data of recorded WebSocket frames.
	WebSocketPluginInterface[] webSocketPluginsForURL = null;               // all assiciated web socket plugins for specific URL.

	// --- proxy configuration ---
	private static boolean proxyEnabled = false;                             // if false: do not use a proxy server
	private static boolean proxyCacheDisabled = true;
	private static String  proxyHttpHost = "";
	private static int     proxyHttpPort = -1;
	private static String  proxyHttpsHost = "";
	private static int     proxyHttpsPort = -1;
	private static String  noProxyFor = "";
	private static String  proxyAuthorization = null;
	private static NextProxyConfig commonNextProxyConfig = null;
	private NextProxyConfig userNextProxyConfig = null;
	
	private static int plannedStartupDelay = 200;                           // startup delay between concurrent users in milliseconds, see main argument "-sdelay"
	private static int plannedTestDuration = -1;                            // planned load test duration in seconds, 0 = unlimited, see main argument "-d"
	private static int maxPlannedLoops = 0;  								// maximum planned loops per user, 0 = unlimited, see main argument "-maxloops"
	private static int pacing = 0;  								        // pacing for loops per user, 0 = no pacing, see main argument "-pacing"
	private static int plannedRequestTimeout = 0;                           // planned request timeout in seconds, see main argument "-t"
	private static int plannedConnectTimeout = 0;                           // planned TCP/IP socket connect timeout in seconds (default = use plannedRequestTimeout), see main argument "-tconnect"
	
	private static String defaultTimeZone = "ECT";                          // use main argument -tz <timezone> to alter
	private static char defaultNumberGroupingSeparator = '\'';              // use main argument -dgs a|c to alter
	private static String sslProtocolVersion = "all";                     // applied ssl protocol version: "all" = v3/tls/tls11/tls12/tls13, use main argument -ssl to set a fixed protocol version
	private static boolean sslcmode = false;                                // support of deficient ssl servers, use main argument -sslcmode to enable
	private static boolean sslECC = true;                                   // elliptic curve cryptography (ECC) is enabled by default, use main argument -noECC to disable
	private static boolean sslSNI = true;                                   // server name indication (SNI) is enabled by default, use main argument -nosni to disable
	private static boolean sslSNICirical = false;                           // the SNI TLS extension is by default set as non-critical, use main argument -snicritical to set as critical
	private static boolean useTlsSessionTickets = false;                    // Session Tickets can only be used with TLS, use main argument -tlssessiontickets to set to use
	private static final long loopErrorDelay = 20;                          // error delay (in milliseconds) applied if a loop of a virtual user has failed
	private static final String THREAD_NAME = "T000000";                    // internal
	private static Integer dumpLock = new Integer(0);                       // internal
	private static Integer inputFileLock = new Integer(0);                  // internal
	private volatile int threadStep = ThreadStepInterface.THREAD_NO_STEP;   // internal
	private boolean urlCallPassed = false;                                  // internal
	private String localIpAddress = null;                                   // internal
	private static long downlinkBandwidth = 0;                              // max. downlink bandwidth per user. 0 = unlimited. use main argument -downlink <kbps> to alter
	private static long uplinkBandwidth = 0;                                // max. uplink bandwidth per user. 0 = unlimited. use main argument -uplink <kbps> to alter
	private static boolean dnsPerLoop = false;								// true if main argument "-dnsperloop" is set = perform new DNS resolves for each executed loop. normally false
	private HttpTestURLDNSContext userDNSContext = null;                    // user specific DNS context - normally null when no special DNS servers are used
	
	private static volatile boolean debugFailedLoops = false;               // true if main argument "-dfl" is set
	private static volatile boolean debugLoops = false;                     // true if main argument "-dl" is set
	private static volatile boolean debugHttp = false;                      // true if main argument "-dh" is set
	private static volatile boolean debugContent = false;                   // true if main argument "-dc" is set
	private static volatile boolean debugCookies = false;                   // true if main argument "-dC" is set
	private static volatile boolean debugKeepAlive = false;                 // true if main argument "-dK" is set
	private static volatile boolean debugSsl = false;                       // true if main argument "-dssl" is set
	
	private static String resultFile = null;                                // name of binary test result file or null
	private static String browserLanguage = null;                           // name of browser language, argument -browserlang <text>
	private static boolean replayMode = false;                              // indicated the replay mode of the load test, use main argument -replay to enable it
	
	private final static String httpProtocolVersion = "1.1";      // applied HTTP protocol version V1.1
	
	private static ExternalParamFile externalParamFile = null;                              // used only for very large parameter values (commonly unused)
	private static final String EXTERNAL_PARAM_FILE = "finwell_pros_v1abExtParams.dat";     // input file name for very large parameter values
	private static FileCache requestFileCache = new FileCache();  // file cache for large XML, SOAP and ASCII requests
	
	private int requestTimeout = -1;                              // thread input data from constructor, timeout per url request in seconds
	private boolean checkLoopCount = false;                       // thread input data from constructor, number of loops per thread (optional)
	private int threadNumber = -1;                                // thread input data from constructor, internal thread number
	private int threadLoopCounter = 0;                            // internal loop counter per thread
	private volatile int userResumeStartWaitDelay = 0;            // internal, user specific delay when the load test execution is resumed
	private volatile boolean decrementEndOfLoopFlag = false;	  // internal flag to decrement the simulated user at runtime
	private volatile boolean incrementUserFlag = false;           // internal flag to increment the simulated user at runtime
	private volatile long incrementUserStartTime = -1;            // internal start time when increment the simulated user at runtime
	private static AtomicInteger totalLoopCounter = new AtomicInteger(0);    // internal overall loop counter

	private LoadtestPluginContext userPluginContext = null;       // plug-in context per user
	private LoadtestInlineScriptContext inlineScriptContext = null;          // re-used, scratch, the returned context of an inline script that runs at item or URL exec scope

	private Object sslSessionCache = null;                        // internal ssl session cache per thread
	private SSLSessionCacheStatistic sslStatistic = null;         // internal ssl session cache statistic per thread
	private static int sslSessionCacheTimeout = 300;              // timeout of ssl session cache in seconds, 0 = session cache disabled
	private static int sslHandshakeRandomGeneratorType = -1;      // invalid initial value, use the default secure random generator for SSL handshakes
	private HttpSocketPool socketPool = null;                     // re-used, scratch, internal socket pool per thread and loop
	private CookieHandler cookieHandler = null;                   // re-used, scratch, internal cookie handler per thread and loop

	private HttpTestURL testURL = null;                           // re-used, scratch, http request and response
	private HttpTestURLThreadHandler pageThreadHandler = null;    // re-used, scratch, support for parallel processing of http request within a page
	private int httpStatus = -1;                                  // re-used, scratch, http response status code from webserver
	private HtmlContentParser htmlContentParser = null;           // re-used, scratch, used to extract vars from http response
	private XmlContentParser xmlContentParser = null;             // re-used, scratch, used to extract vars from http response
	private JSONHtmlBasedExtractor jsonHtmlBasedExtractor = null; // re-used, scratch, used to extract vars from http response
	private DynamicProtobufContentParser protobufContentParser = null;  // re-used, scratch, used to extract vars from http response
	private TextLineTokenExtractor textLineTokenExtractor = null; // re-used, scratch, used to extract vars from http response
	private ContentTokenExtractor contentTokenExtractor = null;   // re-used, scratch, used to extract vars from http response
	private BoundaryBasedExtractor boundaryBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	private RegExpBasedExtractor regExpBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	private XpathBasedExtractor xpathBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	private JSONPathBasedExtractor jsonPathBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	
	private static String Password = null;                                       // var declaration from web admin var handler: scope = global
	private static String Userid = null;                                         // var declaration from web admin var handler: scope = global

	private volatile UserTransactionRuntimeHandler transactionHandler = new UserTransactionRuntimeHandler();		// re-used, support to manage user-defined transactions
	private Map<String,String> transactionContextMap = new HashMap<>();		// used to correctly measure the user-defined transactions

	private Map<String,String> loopVarMap = new HashMap<>();		// used for loop variables
	private String XSRF_TOKEN_174 = null;                // var declaration from web admin var handler: scope = per loop
	private String XSRF_TOKEN_198 = null;                // var declaration from web admin var handler: scope = per loop
	private String TOKEN_157 = null;                     // var declaration from web admin var handler: scope = per loop
	private String XSRF_TOKEN_195 = null;                // var declaration from web admin var handler: scope = per loop
	private String XSRF_TOKEN_268 = null;                // var declaration from web admin var handler: scope = per loop
	private String TOKEN_201 = null;                     // var declaration from web admin var handler: scope = per loop
	private String TOKEN_200 = null;                     // var declaration from web admin var handler: scope = per loop
	private String XSRF_TOKEN_128 = null;                // var declaration from web admin var handler: scope = per loop
	private String uniq_txt = null;                      // var declaration from web admin var handler: scope = per loop
	private String XSRF_TOKEN_151 = null;                // var declaration from web admin var handler: scope = per loop
	
	/**
	 * constructor: called from load test plug-ins (scope = global).
	 */
	public finwell_pros_v1ab()
	{
		super();
	}


	/**
	 * constructor: called when a user is created (per user).
	 */
	public finwell_pros_v1ab(int maxLoops, int requestTimeout, int threadNumber)
	{
		super();
		this.requestTimeout = requestTimeout;
		this.remainingLoops = maxLoops;
		this.checkLoopCount = (maxLoops > 0);
		this.threadNumber = threadNumber;
		this.sslSessionCache = SSLInit.getNewSslSessionCache(sslSessionCacheTimeout);
		this.sslStatistic = new SSLSessionCacheStatistic();
		if (isMultihomed() && (!ipPerLoop()))
			this.localIpAddress = getNextMultihomedIpAddress();
		if (dnsCache != null)
			userDNSContext = new HttpTestURLDNSContext(dnsCache, threadNumber);
		
		applyNextProxySettingsFromFileIfExists();
		
		if (commonNextProxyConfig != null)
			// set proxy configuration data per user 
			userNextProxyConfig = new NextProxyConfig(commonNextProxyConfig);
		
		// initialize context for plug-ins which are executed per user
		userPluginContext = new LoadtestPluginContext(prxVersion, prxCharEncoding, this, threadNumber);
		if(replayMode)
		{
			replaySnapShotsDump = new ReplaySnapShotsDump();
		}
	}


	/**
	 * internal method: called when a user starts a loop.
	 * contains the recorded session which is called by users x loops.
	 * 
	 * @param totalLoopCounter total number of loops (0..n-1) counted overall threads. This value is unique per loop.
	 * 
	 * @return  true:  loop successful completed.
	 *          false: loop failed.
	 */
	private boolean execute(int totalLoopCounter) throws Exception
	{
		markStartOfLoop();
		threadStep = 0;                 // internal - start loop at thread step 0
		
		// enable DNS resolves per loop?
		if (dnsPerLoop)
			userDNSContext = new HttpTestURLDNSContext(dnsCache.clone(false), threadNumber);
		
		// debug http headers?
		Object httpLogVectorObject = null;
		if (debugHttp)
			httpLogVectorObject = this;
		
		// create socket pool per loop
		sslSessionCache = SSLInit.getNewSslSessionCache(sslSessionCacheTimeout);		// reset the SSL session cache to get new SSL session IDs for this loop
		socketPool = new HttpSocketPool(this, sslProtocolVersion, sslSessionCache, sslStatistic, sslcmode);
		if (plannedConnectTimeout > 0)
			socketPool.setConnectTimeout(plannedConnectTimeout);
		if (sslHandshakeRandomGeneratorType != -1)
			socketPool.setSslHandshakeRandomGeneratorType(sslHandshakeRandomGeneratorType);
		socketPool.setSupportEllipticCurves(sslECC);
		socketPool.setHintUseSNI(sslSNI);
		socketPool.setSniCritical(sslSNICirical);
		socketPool.setUseTlsSessionTickets(useTlsSessionTickets);
		if (debugKeepAlive)
		{
			socketPool.setlogVectorObject(this);
			if (debugSsl)
				socketPool.enableSslLog();
		}
		
		if (downlinkBandwidth > 0)
			socketPool.setDownlinkBandwidth(downlinkBandwidth);
		if (uplinkBandwidth > 0)
			socketPool.setUplinkBandwidth(uplinkBandwidth);
		
		if (isMultihomed())
		{
			if (ipPerLoop())
				localIpAddress = getNextMultihomedIpAddress();
			socketPool.setClientIpAddress(localIpAddress);
			log();
			log("multihomed client ip address = " + localIpAddress);
		}
		
		if(isNonModularMode())
		{
			// setup cookie handler per loop
			cookieHandler = new CookieHandler();
			if (debugCookies)
				cookieHandler.setLogVectorInterface(this);
		}
		
		// customised vars from web admin var handler: scope = per loop
		htmlContentParser = null;
		xmlContentParser = null;
		jsonHtmlBasedExtractor = null;
		protobufContentParser = null;
		if(isNonModularMode())
			XSRF_TOKEN_174 = null;
		if(isNonModularMode())
			XSRF_TOKEN_198 = null;
		if(isNonModularMode())
			TOKEN_157 = null;
		if(isNonModularMode())
			XSRF_TOKEN_195 = null;
		if(isNonModularMode())
			XSRF_TOKEN_268 = null;
		if(isNonModularMode())
			TOKEN_201 = null;
		if(isNonModularMode())
			TOKEN_200 = null;
		if(isNonModularMode())
			XSRF_TOKEN_128 = null;
		if(isNonModularMode())
			uniq_txt = null;
		if(isNonModularMode())
			XSRF_TOKEN_151 = null;
		log();
		log("<<< XSRF_TOKEN_174 = " + XSRF_TOKEN_174);
			loopVarMap.put("XSRF_TOKEN_174", XSRF_TOKEN_174);
		log("<<< XSRF_TOKEN_198 = " + XSRF_TOKEN_198);
			loopVarMap.put("XSRF_TOKEN_198", XSRF_TOKEN_198);
		log("<<< TOKEN_157 = " + TOKEN_157);
			loopVarMap.put("TOKEN_157", TOKEN_157);
		log("<<< XSRF_TOKEN_195 = " + XSRF_TOKEN_195);
			loopVarMap.put("XSRF_TOKEN_195", XSRF_TOKEN_195);
		log("<<< XSRF_TOKEN_268 = " + XSRF_TOKEN_268);
			loopVarMap.put("XSRF_TOKEN_268", XSRF_TOKEN_268);
		log("<<< TOKEN_201 = " + TOKEN_201);
			loopVarMap.put("TOKEN_201", TOKEN_201);
		log("<<< TOKEN_200 = " + TOKEN_200);
			loopVarMap.put("TOKEN_200", TOKEN_200);
		log("<<< XSRF_TOKEN_128 = " + XSRF_TOKEN_128);
			loopVarMap.put("XSRF_TOKEN_128", XSRF_TOKEN_128);
		log("<<< uniq_txt = " + uniq_txt);
			loopVarMap.put("uniq_txt", uniq_txt);
		log("<<< XSRF_TOKEN_151 = " + XSRF_TOKEN_151);
			loopVarMap.put("XSRF_TOKEN_151", XSRF_TOKEN_151);
		log("<<< Userid = " + Userid);
		log("<<< Password = " + Password);
		
		// initialize context for plug-ins which are executed per loop
		LoadtestPluginContext loopPluginContext = new LoadtestPluginContext(prxVersion, prxCharEncoding, this, threadNumber, socketPool, cookieHandler);
		



		// --- VIRTUAL PAGE #0 ---
		if (!executePage_0(totalLoopCounter, loopPluginContext, new InnerLoopContext(), 0,0, httpLogVectorObject))
			return false;



		// --- PAGE BREAK: Test [0] ---
		log();
		log();
		log("# Page #1: Finwell home page");
		log("# --------------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #1: Finwell home page", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, null, httpLogVectorObject))
		{
			return false;		// execution of page 1 failed
		}
		
		// page 1 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [13] ---
		log();
		log();
		log("# Page #2: Click 'Get Started'");
		log("# ----------------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #2: Click 'Get Started'", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_2_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_2_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, null, httpLogVectorObject))
		{
			return false;		// execution of page 2 failed
		}
		
		// page 2 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [60] ---
		log();
		log();
		log("# Page #3: enter id and pwd");
		log("# -------------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #3: enter id and pwd", 4000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_3_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_3_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_3_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, null, httpLogVectorObject))
		{
			return false;		// execution of page 3 failed
		}
		
		// page 3 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [138] ---
		log();
		log();
		log("# Page #4: click invest towards your goal");
		log("# ---------------------------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #4: click invest towards your goal", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_4_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, null, httpLogVectorObject))
		{
			return false;		// execution of page 4 failed
		}
		
		// page 4 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [176] ---
		log();
		log();
		log("# Page #5: click life event tab");
		log("# -----------------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #5: click life event tab", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, null, httpLogVectorObject))
		{
			return false;		// execution of page 5 failed
		}
		
		// page 5 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [180] ---
		log();
		log();
		log("# Page #6: click on planning tab");
		log("# ------------------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #6: click on planning tab", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_6(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 6 failed
			synchResponsesParallelRequestsPage_6(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_6(totalLoopCounter, loopPluginContext, null, httpLogVectorObject))
		{
			return false;		// execution of page 6 failed
		}
		
		// page 6 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [189] ---
		log();
		log();
		log("# Page #7: Click on each” learn more”");
		log("# -----------------------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #7: Click on each” learn more”", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 7 failed
			synchResponsesParallelRequestsPage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_7_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 7 failed
			synchResponsesParallelRequestsPage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_7_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 7 failed
			synchResponsesParallelRequestsPage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_7_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 7 failed
			synchResponsesParallelRequestsPage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_7(totalLoopCounter, loopPluginContext, null, httpLogVectorObject))
		{
			return false;		// execution of page 7 failed
		}
		
		// page 7 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);
		
		
		// loop successful done
		// --------------------
		
		markEndOfPage(performanceData);
		
		endOfExecuteLoop(true, null, -1, loopPluginContext);
		log();
		return true;
	}		// end of execute()
		
		
		
	/**
	 * internal method: called when a user has completed a loop.
	 */
	private void endOfExecuteLoop(boolean loopPassed, HttpTestURL testURL, int threadStep, LoadtestPluginContext loopPluginContext) throws Exception
	{
		// log URL if last call has failed
		if ((!loopPassed) && (testURL != null))
			log(testURL);
		
		// create browser cache per loop if simulate user per loop is enabled in the browser cache settings
		createBrowserCachePerLoop();
		
		// update plugin context
		loopPluginContext.setLoopPassed(loopPassed);
		if ((testURL != null) && (loopPluginContext.getHttpTestURL() == null))
			loopPluginContext.setHttpTestURL(testURL);
		if ((threadStep != -1) && (loopPluginContext.getThreadStep() == -1))
			loopPluginContext.setThreadStep(threadStep);
	}


	/**
	 * Recorded http requests of page #0.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_0(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{

		// all http requests of page #0 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #1: Finwell home page
		// # --------------------------



		// --- HTTP REQUEST: Test [1] <- WEB ADMIN Index 1 ---
		log();
		log("# title: Financial Wellness");
		String requestProt0001 = "https";
		String requestHost0001 = "digitalcontent.morganstanleyclientserv.com";
		int    requestPort0001 = 443;
		String requestFile0001 = "/publiccontent/finwell/welcome.html";
		String requestHeader0001 = "GET " + requestFile0001 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: digitalcontent.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: none\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: document\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0001, requestHost0001, requestPort0001, requestHeader0001, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0001 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 8430
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [1] <- Index 1
		if(replayMode)
		{
			long proxyDataRecordId =1610512803382L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'uniq_txt'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0001_1 = new BoundaryBasedExtractorItem( "morganstanleyclientserv.com/akam/11/" , "\" defer></script></head>",1,false,false,0,false);
		boundaryBasedContentExtractorItem0001_1.setSaveLength(0);
		boundaryBasedContentExtractorItem0001_1.setSaveOffset(0);
		boundaryBasedContentExtractorItem0001_1.setOccurrenceAll(false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0001_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'uniq_txt'
			uniq_txt = boundaryBasedContentExtractorItem0001_1.getResultText();
			log("<<< uniq_txt = " + uniq_txt);
			loopVarMap.put("uniq_txt", uniq_txt);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && uniq_txt!= null && uniq_txt.trim().length() == 0)
			{
				uniq_txt = "";
				log("runtime note: the extraction of a new value for the variable 'uniq_txt' ends up with an empty string - a substitute value was set");
				log("<<< uniq_txt = " + uniq_txt);
				loopVarMap.put("uniq_txt", uniq_txt);
			}
		}
		catch (Exception e) { uniq_txt = null; log(e); }
		if (uniq_txt == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'uniq_txt' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [2] <- WEB ADMIN Index 2 ---
		String requestProt0002 = "https";
		String requestHost0002 = "digitalcontent.morganstanleyclientserv.com";
		int    requestPort0002 = 443;
		String requestFile0002 = "/akam/11/a9b0e33";
		requestFile0002 = Lib.replaceTextPattern(requestFile0002, "a9b0e33", uniq_txt, 0);		// search and replace request file fragment "a9b0e33" with variable 'uniq_txt' on all occurrences

		String requestHeader0002 = "GET " + requestFile0002 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: digitalcontent.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://digitalcontent.morganstanleyclientserv.com/publiccontent/finwell/welcome.html\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0002, requestHost0002, requestPort0002, requestHeader0002, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0002 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = [verification disabled], content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 10473
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, null, "APPLICATION/JAVASCRIPT", null, null);		// Test [2] <- Index 2
		if(replayMode)
		{
			long proxyDataRecordId =1610512803566L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [3] <- WEB ADMIN Index 3 ---
		String requestProt0003 = "https";
		String requestHost0003 = "digitalcontent.morganstanleyclientserv.com";
		int    requestPort0003 = 443;
		String requestFile0003 = "/akam/11/pixel_a9b0e33";
		requestFile0003 = Lib.replaceTextPattern(requestFile0003, "a9b0e33", uniq_txt, 0);		// search and replace request file fragment "a9b0e33" with variable 'uniq_txt' on all occurrences

		String requestContent0003 = 
				"ap=true" +
				"&bt=%7B%22charging%22%3Atrue%2C%22chargingTime%22%3A0%2C%22dischargingTime%22%3A%22Infinity%22%2C%22level%22%3A1%2C%22onchargingchange%22%3Anull%2C%22onchargingtimechange%22%3Anull%2C%22ondischargingtimechange%22%3Anull%2C%22onlevelchange%22%3Anull%7D" +
				"&fonts=false" +
				"&fh=false" +
				"&timing=%7B%221%22%3A136%2C%222%22%3A270%2C%223%22%3A443%2C%224%22%3A546%2C%225%22%3A648%2C%22profile%22%3A%7B%22bp%22%3A2%2C%22sr%22%3A0%2C%22dp%22%3A0%2C%22lt%22%3A1%2C%22ps%22%3A4%2C%22cv%22%3A91%2C%22fp%22%3A1%2C%22sp%22%3A1%2C%22br%22%3A0%2C%22ieps%22%3A1%2C%22av%22%3A0%2C%22z1%22%3A28%2C%22jsv%22%3A1%2C%22nav%22%3A2%2C%22nap%22%3A2%2C%22crc%22%3A0%2C%22z2%22%3A1%2C%22z3%22%3A1%2C%22z4%22%3A1%2C%22z5%22%3A1%2C%22fonts%22%3A1%7D%2C%22main%22%3A145%2C%22compute%22%3A136%2C%22send%22%3A649%7D" +
				"&bp=1038350511%2C-1979380391%2C1738406762%2C749224105" +
				"&sr=%7B%22inner%22%3A%5B1920%2C969%5D%2C%22outer%22%3A%5B1920%2C1040%5D%2C%22screen%22%3A%5B0%2C0%5D%2C%22pageOffset%22%3A%5B0%2C0%5D%2C%22avail%22%3A%5B1920%2C1040%5D%2C%22size%22%3A%5B1920%2C1080%5D%2C%22client%22%3A%5B0%2C0%5D%2C%22colorDepth%22%3A24%2C%22pixelDepth%22%3A24%7D" +
				"&dp=%7B%22XDomainRequest%22%3A0%2C%22createPopup%22%3A0%2C%22removeEventListener%22%3A1%2C%22globalStorage%22%3A0%2C%22openDatabase%22%3A1%2C%22indexedDB%22%3A1%2C%22attachEvent%22%3A0%2C%22ActiveXObject%22%3A0%2C%22dispatchEvent%22%3A1%2C%22addBehavior%22%3A0%2C%22addEventListener%22%3A1%2C%22detachEvent%22%3A0%2C%22fireEvent%22%3A0%2C%22MutationObserver%22%3A1%2C%22HTMLMenuItemElement%22%3A0%2C%22Int8Array%22%3A1%2C%22postMessage%22%3A1%2C%22querySelector%22%3A1%2C%22getElementsByClassName%22%3A1%2C%22images%22%3A1%2C%22compatMode%22%3A%22CSS1Compat%22%2C%22documentMode%22%3A0%2C%22all%22%3A1%2C%22now%22%3A1%2C%22contextMenu%22%3A0%7D" +
				"&lt=1610512803653-5" +
				"&ps=true%2Ctrue" +
				"&cv=0c746aa6743036d3834aeeaf1a96693b7465b169" +
				"&fp=false" +
				"&sp=false" +
				"&br=Chrome" +
				"&ieps=false" +
				"&av=false" +
				"&z=%7B%22a%22%3A177933441%2C%22b%22%3A1%2C%22c%22%3A0%7D" +
				"&zh=" +
				"&jsv=1.7" +
				"&nav=%7B%22userAgent%22%3A%22Mozilla%2F5.0%20(Windows%20NT%2010.0%3B%20WOW64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F87.0.4280.88%20Safari%2F537.36%22%2C%22appName%22%3A%22Netscape%22%2C%22appCodeName%22%3A%22Mozilla%22%2C%22appVersion%22%3A%225.0%20(Windows%20NT%2010.0%3B%20WOW64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F87.0.4280.88%20Safari%2F537.36%22%2C%22appMinorVersion%22%3A0%2C%22product%22%3A%22Gecko%22%2C%22productSub%22%3A%2220030107%22%2C%22vendor%22%3A%22Google%20Inc.%22%2C%22vendorSub%22%3A%22%22%2C%22buildID%22%3A0%2C%22platform%22%3A%22Win32%22%2C%22oscpu%22%3A0%2C%22hardwareConcurrency%22%3A4%2C%22language%22%3A%22en-US%22%2C%22languages%22%3A%5B%22en-US%22%2C%22en%22%5D%2C%22systemLanguage%22%3A0%2C%22userLanguage%22%3A0%2C%22doNotTrack%22%3Anull%2C%22msDoNotTrack%22%3A0%2C%22cookieEnabled%22%3Atrue%2C%22geolocation%22%3A1%2C%22vibrate%22%3A1%2C%22maxTouchPoints%22%3A0%2C%22webdriver%22%3A0%2C%22plugins%22%3A%5B%22Chrome%20PDF%20Plugin%22%2C%22Chrome%20PDF%20Viewer%22%2C%22Native%20Client%22%5D%7D" +
				"&crc=%7B%22window.chrome%22%3A%7B%22app%22%3A%7B%22isInstalled%22%3Afalse%2C%22InstallState%22%3A%7B%22DISABLED%22%3A%22disabled%22%2C%22INSTALLED%22%3A%22installed%22%2C%22NOT_INSTALLED%22%3A%22not_installed%22%7D%2C%22RunningState%22%3A%7B%22CANNOT_RUN%22%3A%22cannot_run%22%2C%22READY_TO_RUN%22%3A%22ready_to_run%22%2C%22RUNNING%22%3A%22running%22%7D%7D%2C%22runtime%22%3A%7B%22OnInstalledReason%22%3A%7B%22CHROME_UPDATE%22%3A%22chrome_update%22%2C%22INSTALL%22%3A%22install%22%2C%22SHARED_MODULE_UPDATE%22%3A%22shared_module_update%22%2C%22UPDATE%22%3A%22update%22%7D%2C%22OnRestartRequiredReason%22%3A%7B%22APP_UPDATE%22%3A%22app_update%22%2C%22OS_UPDATE%22%3A%22os_update%22%2C%22PERIODIC%22%3A%22periodic%22%7D%2C%22PlatformArch%22%3A%7B%22ARM%22%3A%22arm%22%2C%22ARM64%22%3A%22arm64%22%2C%22MIPS%22%3A%22mips%22%2C%22MIPS64%22%3A%22mips64%22%2C%22X86_32%22%3A%22x86-32%22%2C%22X86_64%22%3A%22x86-64%22%7D%2C%22PlatformNaclArch%22%3A%7B%22ARM%22%3A%22arm%22%2C%22MIPS%22%3A%22mips%22%2C%22MIPS64%22%3A%22mips64%22%2C%22X86_32%22%3A%22x86-32%22%2C%22X86_64%22%3A%22x86-64%22%7D%2C%22PlatformOs%22%3A%7B%22ANDROID%22%3A%22android%22%2C%22CROS%22%3A%22cros%22%2C%22LINUX%22%3A%22linux%22%2C%22MAC%22%3A%22mac%22%2C%22OPENBSD%22%3A%22openbsd%22%2C%22WIN%22%3A%22win%22%7D%2C%22RequestUpdateCheckStatus%22%3A%7B%22NO_UPDATE%22%3A%22no_update%22%2C%22THROTTLED%22%3A%22throttled%22%2C%22UPDATE_AVAILABLE%22%3A%22update_available%22%7D%7D%7D%7D" +
				"&t=24f429bdce2e360d6f864a6936020b4b11f7026f" +
				"&u=1f778e007eda51418712d71e7f27010b" +
				"&nap=00321144241322243122" +
				"&fc=false";
		String requestHeader0003 = "POST " + requestFile0003 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: digitalcontent.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0003.getBytes().length + "\r\n" + 		// Content-Length: 4579
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://digitalcontent.morganstanleyclientserv.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://digitalcontent.morganstanleyclientserv.com/publiccontent/finwell/welcome.html\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0003, requestHost0003, requestPort0003, requestHeader0003, requestContent0003.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0003 = null;		// support garbage collector to reduce memory
		requestContent0003 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [3] <- Index 3
		if(replayMode)
		{
			long proxyDataRecordId =1610512806172L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [4] <- WEB ADMIN Index 4 ---
		String requestProt0004 = "https";
		String requestHost0004 = "ds-aksb-a.akamaihd.net";
		int    requestPort0004 = 443;
		String requestFile0004 = "/aksb.min.js";
		String requestHeader0004 = "GET " + requestFile0004 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: ds-aksb-a.akamaihd.net\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://digitalcontent.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0004, requestHost0004, requestPort0004, requestHeader0004, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0004 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4826
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [4] <- Index 4
		if(replayMode)
		{
			long proxyDataRecordId =1610512806490L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [5] <- WEB ADMIN Index 5 ---
		String requestProt0005 = "https";
		String requestHost0005 = "digitalcontent.morganstanleyclientserv.com";
		int    requestPort0005 = 443;
		String requestFile0005 = "/publiccontent/finwell/assets/fonts/karla-bold-webfont.ttf";
		String requestHeader0005 = "GET " + requestFile0005 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: digitalcontent.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://digitalcontent.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://digitalcontent.morganstanleyclientserv.com/publiccontent/finwell/welcome.html\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0005, requestHost0005, requestPort0005, requestHeader0005, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0005 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "FONT/TTF", header text fragment = [verification disabled], recorded content size = 30744
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "FONT/TTF", null, null);		// Test [5] <- Index 5
		if(replayMode)
		{
			long proxyDataRecordId =1610512806774L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [6] <- WEB ADMIN Index 6 ---
		String requestProt0006 = "https";
		String requestHost0006 = "digitalcontent.morganstanleyclientserv.com";
		int    requestPort0006 = 443;
		String requestFile0006 = "/publiccontent/finwell/assets/fonts/MS%20Gloriola%20II%20Std%20Semibd.ttf";
		String requestHeader0006 = "GET " + requestFile0006 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: digitalcontent.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://digitalcontent.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://digitalcontent.morganstanleyclientserv.com/publiccontent/finwell/welcome.html\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0006, requestHost0006, requestPort0006, requestHeader0006, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0006 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "FONT/TTF", header text fragment = [verification disabled], recorded content size = 120696
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "FONT/TTF", null, null);		// Test [6] <- Index 6
		if(replayMode)
		{
			long proxyDataRecordId =1610512806776L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [7] <- WEB ADMIN Index 7 ---
		String requestProt0007 = "https";
		String requestHost0007 = "digitalcontent.morganstanleyclientserv.com";
		int    requestPort0007 = 443;
		String requestFile0007 = "/publiccontent/finwell/assets/fonts/karla-regular-webfont.woff";
		String requestHeader0007 = "GET " + requestFile0007 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: digitalcontent.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://digitalcontent.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://digitalcontent.morganstanleyclientserv.com/publiccontent/finwell/welcome.html\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0007, requestHost0007, requestPort0007, requestHeader0007, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0007 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "FONT/WOFF", header text fragment = [verification disabled], recorded content size = 17512
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "FONT/WOFF", null, null);		// Test [7] <- Index 7
		if(replayMode)
		{
			long proxyDataRecordId =1610512806777L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [8] <- WEB ADMIN Index 8 ---
		String requestProt0008 = "https";
		String requestHost0008 = "digitalcontent.morganstanleyclientserv.com";
		int    requestPort0008 = 443;
		String requestFile0008 = "/publiccontent/finwell/assets/fonts/MS%20Gloriola%20II%20Std%20Bold.ttf";
		String requestHeader0008 = "GET " + requestFile0008 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: digitalcontent.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://digitalcontent.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://digitalcontent.morganstanleyclientserv.com/publiccontent/finwell/welcome.html\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0008, requestHost0008, requestPort0008, requestHeader0008, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0008 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "FONT/TTF", header text fragment = [verification disabled], recorded content size = 120372
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "FONT/TTF", null, null);		// Test [8] <- Index 8
		if(replayMode)
		{
			long proxyDataRecordId =1610512806781L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [9] <- WEB ADMIN Index 9 ---
		String requestProt0009 = "https";
		String requestHost0009 = "digitalcontent.morganstanleyclientserv.com";
		int    requestPort0009 = 443;
		String requestFile0009 = "/publiccontent/finwell/assets/fonts/MS%20Gloriola%20II%20Std%20Medium.ttf";
		String requestHeader0009 = "GET " + requestFile0009 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: digitalcontent.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://digitalcontent.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://digitalcontent.morganstanleyclientserv.com/publiccontent/finwell/welcome.html\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0009, requestHost0009, requestPort0009, requestHeader0009, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0009 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "FONT/TTF", header text fragment = [verification disabled], recorded content size = 121116
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "FONT/TTF", null, null);		// Test [9] <- Index 9
		if(replayMode)
		{
			long proxyDataRecordId =1610512806783L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [10] <- WEB ADMIN Index 10 ---
		String requestProt0010 = "https";
		String requestHost0010 = "digitalcontent.morganstanleyclientserv.com";
		int    requestPort0010 = 443;
		String requestFile0010 = "/publiccontent/finwell/assets/fonts/MS-Gloriola-II-Std-Light.woff";
		String requestHeader0010 = "GET " + requestFile0010 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: digitalcontent.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://digitalcontent.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://digitalcontent.morganstanleyclientserv.com/publiccontent/finwell/welcome.html\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0010, requestHost0010, requestPort0010, requestHeader0010, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0010 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "FONT/WOFF", header text fragment = [verification disabled], recorded content size = 22644
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "FONT/WOFF", null, null);		// Test [10] <- Index 10
		if(replayMode)
		{
			long proxyDataRecordId =1610512806824L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [11] <- WEB ADMIN Index 11 ---
		String requestProt0011 = "https";
		String requestHost0011 = "ds-aksb-a.akamaihd.net";
		int    requestPort0011 = 443;
		String requestFile0011 = "/2/808139/b" +
				"?dE=0" +
				"&cS=16" +
				"&cE=2038" +
				"&rqS=2038" +
				"&rsS=2227" +
				"&rsE=2231" +
				"&sS=2022" +
				"&dl=2242" +
				"&di=2367" +
				"&fp=" +
				"&dlS=2509" +
				"&dlE=2510" +
				"&dc=5287" +
				"&leS=5287" +
				"&leE=5429" +
				"&to=" +
				"&ol=0" +
				"&cr=3" +
				"&mt=" +
				"&mb=" +
				"&b=257" +
				"&u=https%3A//digitalcontent.morganstanleyclientserv.com/publiccontent/finwell/welcome.html" +
				"&ua=Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20WOW64%29%20AppleWebKit/537.36%20%28KHTML%2C%20like%20Gecko%29%20Chrome/87.0.4280.88%20Safari/537.36" +
				"&pl=Win32" +
				"&us=" +
				"&gh=23.59.250.197" +
				"&t=" +
				"&rid=385170a" +
				"&r=36216" +
				"&akM=x" +
				"&akN=ae" +
				"&vc=14:17" +
				"&bpcip=aa4af800" +
				"&akTX=1" +
				"&akTI=385170a" +
				"&ai=509028" +
				"&pmgn=" +
				"&pmgi=" +
				"&pmp=";
		String requestHeader0011 = "GET " + requestFile0011 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: ds-aksb-a.akamaihd.net\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Referer: https://digitalcontent.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0011, requestHost0011, requestPort0011, requestHeader0011, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0011 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = [verification disabled], content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, null, "TEXT/HTML", null, null);		// Test [11] <- Index 11
		if(replayMode)
		{
			long proxyDataRecordId =1610512806931L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [12] <- WEB ADMIN Index 12 ---
		String requestProt0012 = "https";
		String requestHost0012 = "digitalcontent.morganstanleyclientserv.com";
		int    requestPort0012 = 443;
		String requestFile0012 = "/favicon.ico";
		String requestHeader0012 = "GET " + requestFile0012 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: digitalcontent.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Referer: https://digitalcontent.morganstanleyclientserv.com/publiccontent/finwell/welcome.html\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0012, requestHost0012, requestPort0012, requestHeader0012, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0012 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = [verification disabled], content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 10
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, null, null, null, null);		// Test [12] <- Index 12
		if(replayMode)
		{
			long proxyDataRecordId =1610512806933L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #2: Click 'Get Started'
		// # ----------------------------



		// --- HTTP REQUEST: Test [14] <- WEB ADMIN Index 14 ---
		log();
		log("# title: Login - Morgan Stanley Online");
		String requestProt0014 = "https";
		String requestHost0014 = "login.morganstanleyclientserv.com";
		int    requestPort0014 = 443;
		String requestFile0014 = "/ux/finwell/sip/get-started";
		String requestHeader0014 = "GET " + requestFile0014 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Sec-Fetch-Dest: document\r\n" + 
				"Referer: https://digitalcontent.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0014, requestHost0014, requestPort0014, requestHeader0014, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0014 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1654
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [14] <- Index 14
		if(replayMode)
		{
			long proxyDataRecordId =1610512826990L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [15] <- WEB ADMIN Index 15 ---
		String requestProt0015 = "https";
		String requestHost0015 = "login.morganstanleyclientserv.com";
		int    requestPort0015 = 443;
		String requestFile0015 = "/ux/styles.8c994499bd9c59d9bfe0.css";
		String requestHeader0015 = "GET " + requestFile0015 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0015, requestHost0015, requestPort0015, requestHeader0015, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0015 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 70175
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [15] <- Index 15
		if(replayMode)
		{
			long proxyDataRecordId =1610512827173L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [16] <- WEB ADMIN Index 16 ---
		String requestProt0016 = "https";
		String requestHost0016 = "login.morganstanleyclientserv.com";
		int    requestPort0016 = 443;
		String requestFile0016 = "/ux/runtime.4ad2d908f4c86be06da3.js";
		String requestHeader0016 = "GET " + requestFile0016 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0016, requestHost0016, requestPort0016, requestHeader0016, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0016 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1702
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [16] <- Index 16
		if(replayMode)
		{
			long proxyDataRecordId =1610512827214L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [17] <- WEB ADMIN Index 17 ---
		String requestProt0017 = "https";
		String requestHost0017 = "login.morganstanleyclientserv.com";
		int    requestPort0017 = 443;
		String requestFile0017 = "/ux/scripts.41e4d456458702b5b6ce.js";
		String requestHeader0017 = "GET " + requestFile0017 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0017, requestHost0017, requestPort0017, requestHeader0017, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0017 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 240853
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [17] <- Index 17
		if(replayMode)
		{
			long proxyDataRecordId =1610512827216L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [18] <- WEB ADMIN Index 18 ---
		String requestProt0018 = "https";
		String requestHost0018 = "login.morganstanleyclientserv.com";
		int    requestPort0018 = 443;
		String requestFile0018 = "/ux/polyfills.918bdae03e9f57a211a3.js";
		String requestHeader0018 = "GET " + requestFile0018 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0018, requestHost0018, requestPort0018, requestHeader0018, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0018 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 66622
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [18] <- Index 18
		if(replayMode)
		{
			long proxyDataRecordId =1610512827217L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [19] <- WEB ADMIN Index 19 ---
		String requestProt0019 = "https";
		String requestHost0019 = "login.morganstanleyclientserv.com";
		int    requestPort0019 = 443;
		String requestFile0019 = "/publiccontent/adobe/scripts/b124caa02ab9/772f5bcdf0f6/launch-4161e29788ea.min.js" +
				"?v=1610512827128";
		String requestHeader0019 = "GET " + requestFile0019 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0019, requestHost0019, requestPort0019, requestHeader0019, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0019 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 105961
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [19] <- Index 19
		if(replayMode)
		{
			long proxyDataRecordId =1610512827218L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [20] <- WEB ADMIN Index 20 ---
		String requestProt0020 = "https";
		String requestHost0020 = "login.morganstanleyclientserv.com";
		int    requestPort0020 = 443;
		String requestFile0020 = "/ux/main.93b4dc0e25e08efd4c5f.js";
		String requestHeader0020 = "GET " + requestFile0020 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0020, requestHost0020, requestPort0020, requestHeader0020, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0020 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1532492
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [20] <- Index 20
		if(replayMode)
		{
			long proxyDataRecordId =1610512827219L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [21] <- WEB ADMIN Index 21 ---
		String requestProt0021 = "https";
		String requestHost0021 = "login.morganstanleyclientserv.com";
		int    requestPort0021 = 443;
		String requestFile0021 = "/publiccontent/adobe/scripts//b124caa02ab9/772f5bcdf0f6/7da651638e8c/hostedLibFiles/EPbde2f7ca14e540399dcc1f8208860b7b/AppMeasurement.min.js";
		String requestHeader0021 = "GET " + requestFile0021 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0021, requestHost0021, requestPort0021, requestHeader0021, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0021 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 12184
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [21] <- Index 21
		if(replayMode)
		{
			long proxyDataRecordId =1610512829565L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [22] <- WEB ADMIN Index 22 ---
		String requestProt0022 = "https";
		String requestHost0022 = "msoprodconfigsc73578190us1.cobrowse.oraclecloud.com";
		int    requestPort0022 = 443;
		String requestFile0022 = "/launcher.js";
		String requestHeader0022 = "GET " + requestFile0022 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: msoprodconfigsc73578190us1.cobrowse.oraclecloud.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Intervention: <https://www.chromestatus.com/feature/5718547946799104>; level=\"warning\"\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0022, requestHost0022, requestPort0022, requestHeader0022, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0022 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 9833
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [22] <- Index 22
		if(replayMode)
		{
			long proxyDataRecordId =1610512829632L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [23] <- WEB ADMIN Index 23 ---
		String requestProt0023 = "https";
		String requestHost0023 = "login.morganstanleyclientserv.com";
		int    requestPort0023 = 443;
		String requestFile0023 = "/publiccontent/adobe/scripts//b124caa02ab9/772f5bcdf0f6/7da651638e8c/hostedLibFiles/EPbde2f7ca14e540399dcc1f8208860b7b/AppMeasurement_Module_AudienceManagement.min.js";
		String requestHeader0023 = "GET " + requestFile0023 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0023, requestHost0023, requestPort0023, requestHeader0023, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0023 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8762
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [23] <- Index 23
		if(replayMode)
		{
			long proxyDataRecordId =1610512829665L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [24] <- WEB ADMIN Index 24 ---
		String requestProt0024 = "https";
		String requestHost0024 = "login.morganstanleyclientserv.com";
		int    requestPort0024 = 443;
		String requestFile0024 = "/ux/Karla.9f59291a3f43f88fc496.ttf";
		String requestHeader0024 = "GET " + requestFile0024 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://login.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/styles.8c994499bd9c59d9bfe0.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0024, requestHost0024, requestPort0024, requestHeader0024, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0024 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/OCTET-STREAM", header text fragment = [verification disabled], recorded content size = 42756
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/OCTET-STREAM", null, null);		// Test [24] <- Index 24
		if(replayMode)
		{
			long proxyDataRecordId =1610512831980L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [25] <- WEB ADMIN Index 25 ---
		String requestProt0025 = "https";
		String requestHost0025 = "starget.morganstanley.com";
		int    requestPort0025 = 443;
		String requestFile0025 = "/m2/morganstanleyandco/mbox/json" +
				"?mbox=target-global-mbox" +
				"&mboxSession=514f60730aea4555bc61ac42104184de" +
				"&mboxPC=" +
				"&mboxPage=92445ec934104e92b1a1a14e0866bc4d" +
				"&mboxRid=349bb03cf79a45658d3801301b07b9d9" +
				"&mboxVersion=1.8.0" +
				"&mboxCount=1" +
				"&mboxTime=1610494827646" +
				"&mboxHost=login.morganstanleyclientserv.com" +
				"&mboxURL=https%3A%2F%2Flogin.morganstanleyclientserv.com%2Fux%2Ffinwell%2Fsip%2Fget-started" +
				"&mboxReferrer=https%3A%2F%2Fdigitalcontent.morganstanleyclientserv.com%2F" +
				"&browserHeight=969" +
				"&browserWidth=1920" +
				"&browserTimeOffset=-300" +
				"&screenHeight=1080" +
				"&screenWidth=1920" +
				"&colorDepth=24" +
				"&devicePixelRatio=1" +
				"&screenOrientation=landscape" +
				"&webGLRenderer=Google%20SwiftShader" +
				"&at_property=5776c956-c962-6e9e-d932-1f1a0820d8a4" +
				"&pageName=Not%20Set" +
				"&mboxMCSDID=2A83E5A8F56F45EF-44537E1872EF9D03" +
				"&vst.trk=metrics.morganstanley.com" +
				"&vst.trks=smetrics.morganstanley.com";
		String requestHeader0025 = "GET " + requestFile0025 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: starget.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://login.morganstanleyclientserv.com\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0025, requestHost0025, requestPort0025, requestHeader0025, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0025 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1084
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [25] <- Index 25
		if(replayMode)
		{
			long proxyDataRecordId =1610512832052L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [26] <- WEB ADMIN Index 26 ---
		String requestProt0026 = "https";
		String requestHost0026 = "smetrics.morganstanley.com";
		int    requestPort0026 = 443;
		String requestFile0026 = "/id" +
				"?d_visid_ver=4.5.2" +
				"&d_fieldgroup=A" +
				"&mcorgid=9355F0CC5405D58C0A4C98A1%40AdobeOrg" +
				"&mid=30588150307500429323193657079021352466" +
				"&ts=1610512830583";
		String requestHeader0026 = "GET " + requestFile0026 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: smetrics.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://login.morganstanleyclientserv.com\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0026, requestHost0026, requestPort0026, requestHeader0026, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0026 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 48
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [26] <- Index 26
		if(replayMode)
		{
			long proxyDataRecordId =1610512836569L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [27] <- WEB ADMIN Index 27 ---
		String requestProt0027 = "https";
		String requestHost0027 = "login.morganstanleyclientserv.com";
		int    requestPort0027 = 443;
		String requestFile0027 = "/publiccontent/msoconfig/msoBrowserCompatibilityConfig.json" +
				"?RequestID=b5cd-5af9-de10-7612-dfa9-9b26-fbaa-75b2" +
				"&SeqID=0000";
		String requestHeader0027 = "GET " + requestFile0027 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0027, requestHost0027, requestPort0027, requestHeader0027, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0027 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = [verification disabled], content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, null, null, null, null);		// Test [27] <- Index 27
		if(replayMode)
		{
			long proxyDataRecordId =1610512838509L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [28] <- WEB ADMIN Index 28 ---
		String requestProt0028 = "https";
		String requestHost0028 = "login.morganstanleyclientserv.com";
		int    requestPort0028 = 443;
		String requestFile0028 = "/publiccontent/msoconfig/msoHelpContentv2.json" +
				"?requestId" +
				"&RequestID=4b1c-22c1-74b9-1fd1-d33f-ef0c-9312-03c6" +
				"&SeqID=0001";
		String requestHeader0028 = "GET " + requestFile0028 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0028, requestHost0028, requestPort0028, requestHeader0028, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0028 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 4878
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [28] <- Index 28
		if(replayMode)
		{
			long proxyDataRecordId =1610512838510L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [29] <- WEB ADMIN Index 29 ---
		String requestProt0029 = "https";
		String requestHost0029 = "login.morganstanleyclientserv.com";
		int    requestPort0029 = 443;
		String requestFile0029 = "/publiccontent/msoconfig/msoPageContentConfigurationV16.json" +
				"?RequestID=1538-3bf0-5758-32e3-148e-44b0-e446-fbf0" +
				"&SeqID=0002";
		String requestHeader0029 = "GET " + requestFile0029 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0029, requestHost0029, requestPort0029, requestHeader0029, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0029 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 44005
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [29] <- Index 29
		if(replayMode)
		{
			long proxyDataRecordId =1610512838511L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [30] <- WEB ADMIN Index 30 ---
		String requestProt0030 = "https";
		String requestHost0030 = "public.cobrowse.oraclecloud.com";
		int    requestPort0030 = 443;
		String requestFile0030 = "/rely/global_launcher.js";
		String requestHeader0030 = "GET " + requestFile0030 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: public.cobrowse.oraclecloud.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0030, requestHost0030, requestPort0030, requestHeader0030, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0030 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 34318
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [30] <- Index 30
		if(replayMode)
		{
			long proxyDataRecordId =1610512840445L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [31] <- WEB ADMIN Index 31 ---
		log();
		log("# title: LL Cross-domain HTML5 data server");
		String requestProt0031 = "https";
		String requestHost0031 = "public.cobrowse.oraclecloud.com";
		int    requestPort0031 = 443;
		String requestFile0031 = "/rely/storage/ll_storage_html5.html" +
				"?context=zcyyvms9t0b" +
				"&version=20190515";
		String requestHeader0031 = "GET " + requestFile0031 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: public.cobrowse.oraclecloud.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0031, requestHost0031, requestPort0031, requestHeader0031, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0031 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 11216
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [31] <- Index 31
		if(replayMode)
		{
			long proxyDataRecordId =1610512854229L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [32] <- WEB ADMIN Index 32 ---
		String requestProt0032 = "https";
		String requestHost0032 = "login.morganstanleyclientserv.com";
		int    requestPort0032 = 443;
		String requestFile0032 = "/publiccontent/msoconfig/msoBrowserCompatibilityConfig_Internal.json" +
				"?RequestID=b5cd-5af9-de10-7612-dfa9-9b26-fbaa-75b2" +
				"&SeqID=0000";
		String requestHeader0032 = "GET " + requestFile0032 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0032, requestHost0032, requestPort0032, requestHeader0032, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0032 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 986
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [32] <- Index 32
		if(replayMode)
		{
			long proxyDataRecordId =1610512854235L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [33] <- WEB ADMIN Index 33 ---
		String requestProt0033 = "https";
		String requestHost0033 = "public.cobrowse.oraclecloud.com";
		int    requestPort0033 = 443;
		String requestFile0033 = "/rely/client/ui/hostui_animation.js" +
				"?rnd=0.7698269419516703";
		String requestHeader0033 = "GET " + requestFile0033 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: public.cobrowse.oraclecloud.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0033, requestHost0033, requestPort0033, requestHeader0033, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0033 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6132
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [33] <- Index 33
		if(replayMode)
		{
			long proxyDataRecordId =1610512854272L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #2 (fragment 2 of 3)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [34] <- WEB ADMIN Index 34 ---
		String requestProt0034 = "https";
		String requestHost0034 = "public.cobrowse.oraclecloud.com";
		int    requestPort0034 = 443;
		String requestFile0034 = "/rely/client/ui/hostui_animation.js" +
				"?rnd=0.3978398894171278";
		String requestHeader0034 = "GET " + requestFile0034 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: public.cobrowse.oraclecloud.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0034, requestHost0034, requestPort0034, requestHeader0034, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0034 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6132
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [34] <- Index 34
		if(replayMode)
		{
			long proxyDataRecordId =1610512854273L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [35] <- WEB ADMIN Index 35 ---
		String requestProt0035 = "https";
		String requestHost0035 = "public.cobrowse.oraclecloud.com";
		int    requestPort0035 = 443;
		String requestFile0035 = "/rely/client/ui/hostui_animation.js" +
				"?rnd=0.4155648386500532";
		String requestHeader0035 = "GET " + requestFile0035 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: public.cobrowse.oraclecloud.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0035, requestHost0035, requestPort0035, requestHeader0035, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0035 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6132
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [35] <- Index 35
		if(replayMode)
		{
			long proxyDataRecordId =1610512854274L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [36] <- WEB ADMIN Index 36 ---
		String requestProt0036 = "https";
		String requestHost0036 = "login.morganstanleyclientserv.com";
		int    requestPort0036 = 443;
		String requestFile0036 = "/ux/Karla-Bold.7430fa87f4a04210e1c3.ttf";
		String requestHeader0036 = "GET " + requestFile0036 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://login.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/styles.8c994499bd9c59d9bfe0.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0036, requestHost0036, requestPort0036, requestHeader0036, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0036 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/OCTET-STREAM", header text fragment = [verification disabled], recorded content size = 42744
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/OCTET-STREAM", null, null);		// Test [36] <- Index 36
		if(replayMode)
		{
			long proxyDataRecordId =1610512854506L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [37] <- WEB ADMIN Index 37 ---
		String requestProt0037 = "https";
		String requestHost0037 = "login.morganstanleyclientserv.com";
		int    requestPort0037 = 443;
		String requestFile0037 = "/ux/common.99a6e302e15eba39a531.js";
		String requestHeader0037 = "GET " + requestFile0037 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0037, requestHost0037, requestPort0037, requestHeader0037, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0037 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 10353
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [37] <- Index 37
		if(replayMode)
		{
			long proxyDataRecordId =1610512854509L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [38] <- WEB ADMIN Index 38 ---
		String requestProt0038 = "https";
		String requestHost0038 = "login.morganstanleyclientserv.com";
		int    requestPort0038 = 443;
		String requestFile0038 = "/ux/16.30aed145c42244032e32.js";
		String requestHeader0038 = "GET " + requestFile0038 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0038, requestHost0038, requestPort0038, requestHeader0038, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0038 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 11019
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [38] <- Index 38
		if(replayMode)
		{
			long proxyDataRecordId =1610512854510L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [39] <- WEB ADMIN Index 39 ---
		log();
		log("# title: LL Cross-domain HTML5 data server");
		String requestProt0039 = "https";
		String requestHost0039 = "public.cobrowse.oraclecloud.com";
		int    requestPort0039 = 443;
		String requestFile0039 = "/rely/storage/ll_storage_html5.html" +
				"?context=zcyyvms9t0b" +
				"&version=20190515";
		String requestHeader0039 = "GET " + requestFile0039 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: public.cobrowse.oraclecloud.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0039, requestHost0039, requestPort0039, requestHeader0039, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0039 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 11216
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [39] <- Index 39
		if(replayMode)
		{
			long proxyDataRecordId =1610512854546L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [40] <- WEB ADMIN Index 40 ---
		String requestProt0040 = "https";
		String requestHost0040 = "login.morganstanleyclientserv.com";
		int    requestPort0040 = 443;
		String requestFile0040 = "/publiccontent/msoconfig/finwellLoginConfig.json" +
				"?RequestID=cb68-2bb0-3ab2-1753-ebcd-0d47-5ff8-7ae6" +
				"&SeqID=0003";
		String requestHeader0040 = "GET " + requestFile0040 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0040, requestHost0040, requestPort0040, requestHeader0040, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0040 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 970
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [40] <- Index 40
		if(replayMode)
		{
			long proxyDataRecordId =1610512857053L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [41] <- WEB ADMIN Index 41 ---
		String requestProt0041 = "https";
		String requestHost0041 = "login.morganstanleyclientserv.com";
		int    requestPort0041 = 443;
		String requestFile0041 = "/ux/favicon.ico";
		String requestHeader0041 = "GET " + requestFile0041 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0041, requestHost0041, requestPort0041, requestHeader0041, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0041 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/X-ICON", header text fragment = [verification disabled], recorded content size = 232
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/X-ICON", null, null);		// Test [41] <- Index 41
		if(replayMode)
		{
			long proxyDataRecordId =1610512857058L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [42] <- WEB ADMIN Index 42 ---
		String requestProt0042 = "https";
		String requestHost0042 = "login.morganstanleyclientserv.com";
		int    requestPort0042 = 443;
		String requestFile0042 = "/publiccontent/msoconfig/deepLinkConfig.json" +
				"?RequestID=723b-8d49-c0fc-4a3c-02f5-687a-579a-fc3c" +
				"&SeqID=0004";
		String requestHeader0042 = "GET " + requestFile0042 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0042, requestHost0042, requestPort0042, requestHeader0042, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0042 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 110
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [42] <- Index 42
		if(replayMode)
		{
			long proxyDataRecordId =1610512859427L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [43] <- WEB ADMIN Index 43 ---
		String requestProt0043 = "https";
		String requestHost0043 = "login.morganstanleyclientserv.com";
		int    requestPort0043 = 443;
		String requestFile0043 = "/ux/MS-Gloriola-II-Std-Light.ca6e58ccb6b13d47bdda.woff";
		String requestHeader0043 = "GET " + requestFile0043 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://login.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/styles.8c994499bd9c59d9bfe0.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0043, requestHost0043, requestPort0043, requestHeader0043, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0043 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF", header text fragment = [verification disabled], recorded content size = 22644
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF", null, null);		// Test [43] <- Index 43
		if(replayMode)
		{
			long proxyDataRecordId =1610512859428L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [44] <- WEB ADMIN Index 44 ---
		String requestProt0044 = "https";
		String requestHost0044 = "login.morganstanleyclientserv.com";
		int    requestPort0044 = 443;
		String requestFile0044 = "/publiccontent/message/message.json" +
				"?RequestID=ab47-fc2d-008a-fef4-2327-48cf-5b3b-7a32" +
				"&SeqID=0000";
		String requestHeader0044 = "GET " + requestFile0044 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0044, requestHost0044, requestPort0044, requestHeader0044, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0044 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 426
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [44] <- Index 44
		if(replayMode)
		{
			long proxyDataRecordId =1610512859430L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [45] <- WEB ADMIN Index 45 ---
		String requestProt0045 = "https";
		String requestHost0045 = "login.morganstanleyclientserv.com";
		int    requestPort0045 = 443;
		String requestFile0045 = "/publiccontent/msai/header/header.html" +
				"?RequestID=c343-7d69-88c2-7e48-94c1-27fa-f386-eb2a" +
				"&SeqID=0005";
		String requestHeader0045 = "GET " + requestFile0045 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0045, requestHost0045, requestPort0045, requestHeader0045, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0045 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 135
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [45] <- Index 45
		if(replayMode)
		{
			long proxyDataRecordId =1610512859431L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [46] <- WEB ADMIN Index 46 ---
		String requestProt0046 = "https";
		String requestHost0046 = "login.morganstanleyclientserv.com";
		int    requestPort0046 = 443;
		String requestFile0046 = "/publiccontent/finwell/banner.html" +
				"?RequestID=9162-0a98-b051-7708-a388-f133-87bc-4349" +
				"&SeqID=0007";
		String requestHeader0046 = "GET " + requestFile0046 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0046, requestHost0046, requestPort0046, requestHeader0046, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0046 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 631
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [46] <- Index 46
		if(replayMode)
		{
			long proxyDataRecordId =1610512859432L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [47] <- WEB ADMIN Index 47 ---
		String requestProt0047 = "https";
		String requestHost0047 = "login.morganstanleyclientserv.com";
		int    requestPort0047 = 443;
		String requestFile0047 = "/publiccontent/htmlfiles/footer/newfooter.html" +
				"?RequestID=7788-4234-cea6-1151-864b-ea41-b1ca-3b90" +
				"&SeqID=0008";
		String requestHeader0047 = "GET " + requestFile0047 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0047, requestHost0047, requestPort0047, requestHeader0047, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0047 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1364
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [47] <- Index 47
		if(replayMode)
		{
			long proxyDataRecordId =1610512859435L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [48] <- WEB ADMIN Index 48 ---
		String requestProt0048 = "https";
		String requestHost0048 = "login.morganstanleyclientserv.com";
		int    requestPort0048 = 443;
		String requestFile0048 = "/publiccontent/adobe/AdobeMapFile.json" +
				"?v=1202021";
		String requestHeader0048 = "GET " + requestFile0048 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0048, requestHost0048, requestPort0048, requestHeader0048, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0048 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 25630
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [48] <- Index 48
		if(replayMode)
		{
			long proxyDataRecordId =1610512871353L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [49] <- WEB ADMIN Index 49 ---
		String requestProt0049 = "https";
		String requestHost0049 = "login.morganstanleyclientserv.com";
		int    requestPort0049 = 443;
		String requestFile0049 = "/ux/MS-Gloriola-II-Display-Thin.37f929b2b185176a7eba.woff";
		String requestHeader0049 = "GET " + requestFile0049 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://login.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/styles.8c994499bd9c59d9bfe0.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0049, requestHost0049, requestPort0049, requestHeader0049, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0049 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF", header text fragment = [verification disabled], recorded content size = 22344
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF", null, null);		// Test [49] <- Index 49
		if(replayMode)
		{
			long proxyDataRecordId =1610512871354L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [50] <- WEB ADMIN Index 50 ---
		String requestProt0050 = "https";
		String requestHost0050 = "login.morganstanleyclientserv.com";
		int    requestPort0050 = 443;
		String requestFile0050 = "/publiccontent/adobe/AdobeMapFile.json" +
				"?v=1202021";
		String requestHeader0050 = "GET " + requestFile0050 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/get-started\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0050, requestHost0050, requestPort0050, requestHeader0050, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0050 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 25630
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [50] <- Index 50
		if(replayMode)
		{
			long proxyDataRecordId =1610512873296L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [51] <- WEB ADMIN Index 51 ---
		String requestProt0051 = "https";
		String requestHost0051 = "login.morganstanleyclientserv.com";
		int    requestPort0051 = 443;
		String requestFile0051 = "/publiccontent/adobe/scripts/b124caa02ab9/772f5bcdf0f6/7da651638e8c/RCb3ce3f777b0d4f278ded2501eefd5b56-source.min.js";
		String requestHeader0051 = "GET " + requestFile0051 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/sign-in\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0051, requestHost0051, requestPort0051, requestHeader0051, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0051 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 453
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [51] <- Index 51
		if(replayMode)
		{
			long proxyDataRecordId =1610512873297L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [52] <- WEB ADMIN Index 52 ---
		String requestProt0052 = "https";
		String requestHost0052 = "login.morganstanleyclientserv.com";
		int    requestPort0052 = 443;
		String requestFile0052 = "/publiccontent/adobe/scripts/b124caa02ab9/772f5bcdf0f6/7da651638e8c/RC8c47adf60f214a36a88b36bec934f90d-source.min.js";
		String requestHeader0052 = "GET " + requestFile0052 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/sign-in\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0052, requestHost0052, requestPort0052, requestHeader0052, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0052 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 452
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [52] <- Index 52
		if(replayMode)
		{
			long proxyDataRecordId =1610512873300L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [53] <- WEB ADMIN Index 53 ---
		String requestProt0053 = "https";
		String requestHost0053 = "login.morganstanleyclientserv.com";
		int    requestPort0053 = 443;
		String requestFile0053 = "/publiccontent/adobe/scripts/b124caa02ab9/772f5bcdf0f6/7da651638e8c/RCde453bbd26414a988cbbfb4a8f76b4b3-source.min.js";
		String requestHeader0053 = "GET " + requestFile0053 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/sign-in\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0053, requestHost0053, requestPort0053, requestHeader0053, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0053 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 757
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [53] <- Index 53
		if(replayMode)
		{
			long proxyDataRecordId =1610512873317L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #2 (fragment 3 of 3)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [54] <- WEB ADMIN Index 54 ---
		String requestProt0054 = "https";
		String requestHost0054 = "login.morganstanleyclientserv.com";
		int    requestPort0054 = 443;
		String requestFile0054 = "/publiccontent/adobe/AdobeMapFile.json" +
				"?v=1202021";
		String requestHeader0054 = "GET " + requestFile0054 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/sign-in\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0054, requestHost0054, requestPort0054, requestHeader0054, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0054 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 25630
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [54] <- Index 54
		if(replayMode)
		{
			long proxyDataRecordId =1610512873471L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [55] <- WEB ADMIN Index 55 ---
		String requestProt0055 = "https";
		String requestHost0055 = "login.morganstanleyclientserv.com";
		int    requestPort0055 = 443;
		String requestFile0055 = "/publiccontent/adobe/scripts/b124caa02ab9/772f5bcdf0f6/7da651638e8c/RC26e40f49f6d94fe9b9b088494f18232e-source.min.js";
		String requestHeader0055 = "GET " + requestFile0055 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/sign-in\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0055, requestHost0055, requestPort0055, requestHeader0055, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0055 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 483
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [55] <- Index 55
		if(replayMode)
		{
			long proxyDataRecordId =1610512873490L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [56] <- WEB ADMIN Index 56 ---
		String requestProt0056 = "https";
		String requestHost0056 = "login.morganstanleyclientserv.com";
		int    requestPort0056 = 443;
		String requestFile0056 = "/publiccontent/adobe/scripts/b124caa02ab9/772f5bcdf0f6/7da651638e8c/RCb18a3df5633348e8bca91e51de8c3177-source.min.js";
		String requestHeader0056 = "GET " + requestFile0056 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/sign-in\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0056, requestHost0056, requestPort0056, requestHeader0056, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0056 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 616
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [56] <- Index 56
		if(replayMode)
		{
			long proxyDataRecordId =1610512873495L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [57] <- WEB ADMIN Index 57 ---
		String requestProt0057 = "https";
		String requestHost0057 = "smetrics.morganstanley.com";
		int    requestPort0057 = 443;
		String requestFile0057 = "/b/ss/morganstanleywmprod,morganstanleyglobal/10/JS-2.22.0-LAWA/s11161279343068" +
				"?AQB=1" +
				"&ndh=1" +
				"&pf=1" +
				"&callback=s_c_il[1].doPostbacks" +
				"&et=1" +
				"&t=12%2F0%2F2021%2023%3A41%3A11%202%20300" +
				"&d." +
				"&nsid=0" +
				"&jsonv=1" +
				"&.d" +
				"&sdid=2A83E5A8F56F45EF-44537E1872EF9D03" +
				"&mid=30588150307500429323193657079021352466" +
				"&aamlh=7" +
				"&ce=ISO-8859-1" +
				"&fpCookieDomainPeriods=3" +
				"&pageName=finwell%20sip" +
				"&g=https%3A%2F%2Flogin.morganstanleyclientserv.com%2Fux%2Ffinwell%2Fsip%2Fsign-in" +
				"&r=%20" +
				"&cc=USD" +
				"&ch=finwell%20sip" +
				"&server=MS%20Online" +
				"&aamb=RKhpRz8krg2tLO6pguXWp5olkAcUniQYPHaMWWgdJ3xzPWQmdj0y" +
				"&v1=11PM" +
				"&c2=11PM" +
				"&v2=Tuesday" +
				"&c3=Tuesday" +
				"&v3=weekday" +
				"&c4=weekday" +
				"&v4=New" +
				"&c5=New" +
				"&v5=1" +
				"&c6=1" +
				"&v6=First%20Visit" +
				"&c7=First%20Visit" +
				"&c12=https%3A%2F%2Flogin.morganstanleyclientserv.com%2Fux%2Ffinwell%2Fsip%2Fsign-in" +
				"&c20=finwell%20sip" +
				"&v20=finwell%20sip" +
				"&v21=https%3A%2F%2Flogin.morganstanleyclientserv.com%2Fux%2Ffinwell%2Fsip%2Fsign-in" +
				"&v26=logged-out" +
				"&c39=MSO" +
				"&c40=website" +
				"&c41=logged-out" +
				"&v44=MSO" +
				"&v45=website" +
				"&v51=MSO%20%7C%20finwell%20sip" +
				"&v76=finwell%20sip" +
				"&s=1920x1080" +
				"&c=24" +
				"&j=1.6" +
				"&v=N" +
				"&k=Y" +
				"&bw=1920" +
				"&bh=969" +
				"&mcorgid=9355F0CC5405D58C0A4C98A1%40AdobeOrg" +
				"&AQE=1";
		String requestHeader0057 = "GET " + requestFile0057 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: smetrics.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0057, requestHost0057, requestPort0057, requestHeader0057, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0057 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5830
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [57] <- Index 57
		if(replayMode)
		{
			long proxyDataRecordId =1610512873506L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [58] <- WEB ADMIN Index 58 ---
		String requestProt0058 = "https";
		String requestHost0058 = "smetrics.morganstanley.com";
		int    requestPort0058 = 443;
		String requestFile0058 = "/b/ss/morganstanleywmprod,morganstanleyglobal/10/JS-2.22.0-LAWA/s11979776421265" +
				"?AQB=1" +
				"&ndh=1" +
				"&pf=1" +
				"&callback=s_c_il[1].doPostbacks" +
				"&et=1" +
				"&t=12%2F0%2F2021%2023%3A41%3A13%202%20300" +
				"&d." +
				"&nsid=0" +
				"&jsonv=1" +
				"&.d" +
				"&mid=30588150307500429323193657079021352466" +
				"&aamlh=7" +
				"&ce=ISO-8859-1" +
				"&fpCookieDomainPeriods=3" +
				"&pageName=finwell%20sip" +
				"&g=https%3A%2F%2Flogin.morganstanleyclientserv.com%2Fux%2Ffinwell%2Fsip%2Fsign-in" +
				"&r=%20" +
				"&cc=USD" +
				"&events=event6" +
				"&c12=https%3A%2F%2Flogin.morganstanleyclientserv.com%2Fux%2Ffinwell%2Fsip%2Fsign-in" +
				"&c20=finwell%20sip" +
				"&v20=finwell%20sip" +
				"&v21=https%3A%2F%2Flogin.morganstanleyclientserv.com%2Fux%2Ffinwell%2Fsip%2Fsign-in" +
				"&v22=log%20in%20button%20on%20sip" +
				"&v26=logged-out" +
				"&v38=finwell%20login" +
				"&c39=MSO" +
				"&c40=website" +
				"&c41=logged-out" +
				"&v44=MSO" +
				"&v45=website" +
				"&v51=MSO%20%7C%20null" +
				"&v76=finwell%20sip" +
				"&v80=auth%20login" +
				"&pe=lnk_o" +
				"&pev2=custom%20click%20-%20Direct%20call%20Rule" +
				"&s=1920x1080" +
				"&c=24" +
				"&j=1.6" +
				"&v=N" +
				"&k=Y" +
				"&bw=1920" +
				"&bh=969" +
				"&mcorgid=9355F0CC5405D58C0A4C98A1%40AdobeOrg" +
				"&AQE=1";
		String requestHeader0058 = "GET " + requestFile0058 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: smetrics.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0058, requestHost0058, requestPort0058, requestHeader0058, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0058 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5830
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [58] <- Index 58
		if(replayMode)
		{
			long proxyDataRecordId =1610512875604L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [59] <- WEB ADMIN Index 59 ---
		String requestProt0059 = "https";
		String requestHost0059 = "smetrics.morganstanley.com";
		int    requestPort0059 = 443;
		String requestFile0059 = "/b/ss/morganstanleywmprod,morganstanleyglobal/10/JS-2.22.0-LAWA/s17168550383601" +
				"?AQB=1" +
				"&ndh=1" +
				"&pf=1" +
				"&callback=s_c_il[1].doPostbacks" +
				"&et=1" +
				"&t=12%2F0%2F2021%2023%3A41%3A13%202%20300" +
				"&d." +
				"&nsid=0" +
				"&jsonv=1" +
				"&.d" +
				"&mid=30588150307500429323193657079021352466" +
				"&aamlh=7" +
				"&ce=ISO-8859-1" +
				"&fpCookieDomainPeriods=3" +
				"&pageName=finwell%20sip%20%7C%20login" +
				"&g=https%3A%2F%2Flogin.morganstanleyclientserv.com%2Fux%2Ffinwell%2Fsip%2Fsign-in" +
				"&r=%20" +
				"&cc=USD" +
				"&ch=finwell%20sip" +
				"&server=MS%20Online" +
				"&aamb=RKhpRz8krg2tLO6pguXWp5olkAcUniQYPHaMWWgdJ3xzPWQmdj0y" +
				"&v1=11PM" +
				"&c2=11PM" +
				"&v2=Tuesday" +
				"&c3=Tuesday" +
				"&v3=weekday" +
				"&c4=weekday" +
				"&v4=New" +
				"&c5=New" +
				"&v5=1" +
				"&c6=1" +
				"&v6=First%20Visit" +
				"&c7=First%20Visit" +
				"&c12=https%3A%2F%2Flogin.morganstanleyclientserv.com%2Fux%2Ffinwell%2Fsip%2Fsign-in" +
				"&c14=finwell%20sip" +
				"&c20=finwell%20sip" +
				"&v20=finwell%20sip%20%7C%20login" +
				"&v21=https%3A%2F%2Flogin.morganstanleyclientserv.com%2Fux%2Ffinwell%2Fsip%2Fsign-in" +
				"&v26=logged-out" +
				"&c39=MSO" +
				"&c40=website" +
				"&c41=logged-out" +
				"&v44=MSO" +
				"&v45=website" +
				"&c50=login" +
				"&v51=MSO%20%7C%20finwell%20sip%20%7C%20login" +
				"&v76=finwell%20sip" +
				"&v77=login" +
				"&s=1920x1080" +
				"&c=24" +
				"&j=1.6" +
				"&v=N" +
				"&k=Y" +
				"&bw=1920" +
				"&bh=969" +
				"&mcorgid=9355F0CC5405D58C0A4C98A1%40AdobeOrg" +
				"&lrt=2066" +
				"&AQE=1";
		String requestHeader0059 = "GET " + requestFile0059 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: smetrics.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0059, requestHost0059, requestPort0059, requestHeader0059, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0059 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5830
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [59] <- Index 59
		if(replayMode)
		{
			long proxyDataRecordId =1610512875671L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #3: enter id and pwd
		// # -------------------------



		// --- HTTP REQUEST: Test [61] <- WEB ADMIN Index 61 ---
		String requestProt0061 = "https";
		String requestHost0061 = "login.morganstanleyclientserv.com";
		int    requestPort0061 = 443;
		String requestFile0061 = "/msologin/handler/restproxy/auth/authenticateV2" +
				"?Product=finwell" +
				"&RequestID=b8dc-bbf4-6f35-d58b-960e-4b8c-ffee-6e87" +
				"&SeqID=0009";
		String requestContent0061 = 
				"{\"IsLoginFromNewUi\":true,\"PrivateBrowsingEnabled\":\"NO\",\"HasDeviceRegistrationCookie\":\"\",\"Userid\":\"FWTest_100058\",\"Password\":\"Welcome1\",\"Platform\":1,\"BrowserDeatils\":\"Name : Chrome; Version : 87\",\"RequestID\":\"bf70-58fe-637b-d107-a761-243c-3961-8046\",\"Product\":\"FINWELL\",\"NewAuthModule\":true}";
		requestContent0061 = ReplaceVarPattern.replaceVarPatternWithVarName(requestContent0061, "Password", Password);
		requestContent0061 = Lib.replaceTextPattern(requestContent0061, "Welcome1", Password, 0);		// search and replace content fragment "Welcome1" with variable 'Password' on all occurrences
		requestContent0061 = ReplaceVarPattern.replaceVarPatternWithVarName(requestContent0061, "Userid", Userid);
		requestContent0061 = Lib.replaceTextPattern(requestContent0061, "FWTest_100058", Userid, 0);		// search and replace content fragment "FWTest_100058" with variable 'Userid' on all occurrences

		String requestHeader0061 = "POST " + requestFile0061 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0061.getBytes().length + "\r\n" + 		// Content-Length: 290
				"DeviceId:\r\n" + 
				"Accept: application/json\r\n" + 
				"DevicePrint: version=3.5.1_4&pm_fpua=mozilla/5.0 (windows nt 10.0; wow64) applewebkit/537.36 (khtml, like gecko) chrome/87.0.4280.88 safari/537.36|5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36|Win32&pm_fpsc=24|1920|1080|1040&pm_fpsw=&pm_fptz=-5&pm_fpln=lang=en-US|syslang=|userlang=&pm_fpjv=0&pm_fpco=1&pm_fpasw=internal-pdf-viewer|mhjfbmdgcfjbbpaeojofohoefgiehjai|internal-nacl-plugin&pm_fpan=Netscape&pm_fpacn=Mozilla&pm_fpol=true&pm_fposp=&pm_fpup=&pm_fpsaw=1920&pm_fpspd=24&pm_fpsbd=&pm_fpsdx=&pm_fpsdy=&pm_fpslx=&pm_fpsly=&pm_fpsfse=&pm_fpsui=&pm_os=Windows&pm_brmjv=87&pm_br=Chrome&pm_inpt=&pm_expt=\r\n" + 
				"DeviceFingerPrint: _v02MyUgNGgYOi88OTk0emB7ZXV9Ajw7MToiJnUbAXVkZXtlbnUCGgJjYXx1FCUlOTACMDcePCF6YGZie2ZjdX0eHQEYGXl1OTw+MHUSMDY+Onx1Fj0nOjgwem1ie2V7YWdtZXttbXUGNDM0Jzx6YGZie2ZjKQI8O2ZnczMlJjZoZ2EpZGxnZSlkZW1lKWRsZ2UpZGVhZXMzJSYiaDw7ITAnOzQ5eCUxM3gjPDAiMCcpOD0/Mzc4MTI2Mz83NyU0MDo/OjM6PTowMzI8MD0/NDwpPDshMCc7NDl4OzQ2OXglOSAyPDtzMyUlPGhzMyUhL2h4YHMzJTk7aDA7eAAGKSkpczMlNiVoZWRkZGVkZGRkZGRkZGRkZGRkZGRkZGVkZGRkZGRkZGRkZGRlZGRkZGVkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRlZGVzMyUjNmhzMyUjJmhnczw7NmhlczIzLTMlaCNvZXk2OyMzJW8wY2dtbTNsYGxtYDM3MTFtZ2JlZWZgZ2BtbTBlYGRkZnkiMjkzJW9sYTBiNGRkbTFlMzZkZmFkM2BjbDYwMDBsM2AwYWxlNnkiMjkjJzMlbzQwMWxtZ2cxczMlISZoczMlITJocyU0JzA7IRE6ODQ8O2h7ODonMjQ7JiE0OzkwLDY5PDA7ISYwJyN7Njo4\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/json\r\n" + 
				"Origin: https://login.morganstanleyclientserv.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/ux/finwell/sip/sign-in\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0061, requestHost0061, requestPort0061, requestHeader0061, requestContent0061.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0061 = null;		// support garbage collector to reduce memory
		requestContent0061 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 3030
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [61] <- Index 61
		if(replayMode)
		{
			long proxyDataRecordId =1610512908377L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		// setup var extractor for 'XSRF_TOKEN_128'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0061_1 = new BoundaryBasedExtractorItem( "XSRF_TOKEN=" , ";",1,false,false,0,false);
		boundaryBasedHeaderExtractorItem0061_1.setSaveLength(0);
		boundaryBasedHeaderExtractorItem0061_1.setSaveOffset(0);
		boundaryBasedHeaderExtractorItem0061_1.setOccurrenceAll(false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0061_1);

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'XSRF_TOKEN_128'
			XSRF_TOKEN_128 = boundaryBasedHeaderExtractorItem0061_1.getResultText();
			log("<<< XSRF_TOKEN_128 = " + XSRF_TOKEN_128);
			loopVarMap.put("XSRF_TOKEN_128", XSRF_TOKEN_128);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && XSRF_TOKEN_128!= null && XSRF_TOKEN_128.trim().length() == 0)
			{
				XSRF_TOKEN_128 = "";
				log("runtime note: the extraction of a new value for the variable 'XSRF_TOKEN_128' ends up with an empty string - a substitute value was set");
				log("<<< XSRF_TOKEN_128 = " + XSRF_TOKEN_128);
				loopVarMap.put("XSRF_TOKEN_128", XSRF_TOKEN_128);
			}
		}
		catch (Exception e) { XSRF_TOKEN_128 = null; log(e); }
		if (XSRF_TOKEN_128 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'XSRF_TOKEN_128' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [62] <- WEB ADMIN Index 62 ---
		String requestProt0062 = "https";
		String requestHost0062 = "smetrics.morganstanley.com";
		int    requestPort0062 = 443;
		String requestFile0062 = "/b/ss/morganstanleywmprod,morganstanleyglobal/10/JS-2.22.0-LAWA/s11001490219620" +
				"?AQB=1" +
				"&ndh=1" +
				"&pf=1" +
				"&callback=s_c_il[1].doPostbacks" +
				"&et=1" +
				"&t=12%2F0%2F2021%2023%3A41%3A48%202%20300" +
				"&d." +
				"&nsid=0" +
				"&jsonv=1" +
				"&.d" +
				"&mid=30588150307500429323193657079021352466" +
				"&aamlh=7" +
				"&ce=ISO-8859-1" +
				"&fpCookieDomainPeriods=3" +
				"&pageName=finwell%20sip%20%7C%20login" +
				"&g=https%3A%2F%2Flogin.morganstanleyclientserv.com%2Fux%2Ffinwell%2Fsip%2Fsign-in" +
				"&r=%20" +
				"&cc=USD" +
				"&events=event6" +
				"&c12=https%3A%2F%2Flogin.morganstanleyclientserv.com%2Fux%2Ffinwell%2Fsip%2Fsign-in" +
				"&c14=finwell%20sip" +
				"&c20=finwell%20sip" +
				"&v20=finwell%20sip%20%7C%20login" +
				"&v21=https%3A%2F%2Flogin.morganstanleyclientserv.com%2Fux%2Ffinwell%2Fsip%2Fsign-in" +
				"&v22=log%20in" +
				"&v26=logged-out" +
				"&v38=finwell%20login" +
				"&c39=MSO" +
				"&c40=website" +
				"&c41=logged-out" +
				"&v44=MSO" +
				"&v45=website" +
				"&c50=login" +
				"&v51=MSO%20%7C%20null" +
				"&v60=c" +
				"&v64=cid" +
				"&v76=finwell%20sip" +
				"&v77=login" +
				"&v80=auth%20login" +
				"&pe=lnk_o" +
				"&pev2=custom%20click%20-%20Direct%20call%20Rule" +
				"&s=1920x1080" +
				"&c=24" +
				"&j=1.6" +
				"&v=N" +
				"&k=Y" +
				"&bw=1920" +
				"&bh=969" +
				"&mcorgid=9355F0CC5405D58C0A4C98A1%40AdobeOrg" +
				"&lrt=83" +
				"&AQE=1";
		String requestHeader0062 = "GET " + requestFile0062 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: smetrics.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0062, requestHost0062, requestPort0062, requestHeader0062, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0062 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5830
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [62] <- Index 62
		if(replayMode)
		{
			long proxyDataRecordId =1610512908388L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [63] <- WEB ADMIN Index 63 ---
		log();
		log("# title: Morgan Stanley Online");
		String requestProt0063 = "https";
		String requestHost0063 = "mso.morganstanleyclientserv.com";
		int    requestPort0063 = 443;
		String requestFile0063 = "/atrium/";
		String requestHeader0063 = "GET " + requestFile0063 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Sec-Fetch-Dest: document\r\n" + 
				"Referer: https://login.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0063, requestHost0063, requestPort0063, requestHeader0063, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==", XSRF_TOKEN_128);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0063 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 965
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [63] <- Index 63
		if(replayMode)
		{
			long proxyDataRecordId =1610512913014L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [64] <- WEB ADMIN Index 64 ---
		String requestProt0064 = "https";
		String requestHost0064 = "mso.morganstanleyclientserv.com";
		int    requestPort0064 = 443;
		String requestFile0064 = "/atrium/styles-d0ae3f07.css";
		String requestHeader0064 = "GET " + requestFile0064 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0064, requestHost0064, requestPort0064, requestHeader0064, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==", XSRF_TOKEN_128);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0064 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 98573
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [64] <- Index 64
		if(replayMode)
		{
			long proxyDataRecordId =1610512913176L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [65] <- WEB ADMIN Index 65 ---
		String requestProt0065 = "https";
		String requestHost0065 = "mso.morganstanleyclientserv.com";
		int    requestPort0065 = 443;
		String requestFile0065 = "/atrium/polyfills-es5-d0ae3f07.js" +
				"?v=1607966054620";
		String requestHeader0065 = "GET " + requestFile0065 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0065, requestHost0065, requestPort0065, requestHeader0065, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==", XSRF_TOKEN_128);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0065 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 35608
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [65] <- Index 65
		if(replayMode)
		{
			long proxyDataRecordId =1610512913225L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [66] <- WEB ADMIN Index 66 ---
		String requestProt0066 = "https";
		String requestHost0066 = "mso.morganstanleyclientserv.com";
		int    requestPort0066 = 443;
		String requestFile0066 = "/atrium/runtime.js" +
				"?v=1607966054620";
		String requestHeader0066 = "GET " + requestFile0066 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0066, requestHost0066, requestPort0066, requestHeader0066, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==", XSRF_TOKEN_128);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0066 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1819
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [66] <- Index 66
		if(replayMode)
		{
			long proxyDataRecordId =1610512913226L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [67] <- WEB ADMIN Index 67 ---
		String requestProt0067 = "https";
		String requestHost0067 = "mso.morganstanleyclientserv.com";
		int    requestPort0067 = 443;
		String requestFile0067 = "/atrium/polyfills-d0ae3f07.js" +
				"?v=1607966054620";
		String requestHeader0067 = "GET " + requestFile0067 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0067, requestHost0067, requestPort0067, requestHeader0067, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==", XSRF_TOKEN_128);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0067 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 72422
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [67] <- Index 67
		if(replayMode)
		{
			long proxyDataRecordId =1610512913227L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [68] <- WEB ADMIN Index 68 ---
		String requestProt0068 = "https";
		String requestHost0068 = "mso.morganstanleyclientserv.com";
		int    requestPort0068 = 443;
		String requestFile0068 = "/atrium/styles-d0ae3f07.js" +
				"?v=1607966054620";
		String requestHeader0068 = "GET " + requestFile0068 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0068, requestHost0068, requestPort0068, requestHeader0068, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==", XSRF_TOKEN_128);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0068 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 279
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [68] <- Index 68
		if(replayMode)
		{
			long proxyDataRecordId =1610512913228L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [69] <- WEB ADMIN Index 69 ---
		String requestProt0069 = "https";
		String requestHost0069 = "mso.morganstanleyclientserv.com";
		int    requestPort0069 = 443;
		String requestFile0069 = "/atrium/scripts.js" +
				"?v=1607966054620";
		String requestHeader0069 = "GET " + requestFile0069 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0069, requestHost0069, requestPort0069, requestHeader0069, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==", XSRF_TOKEN_128);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0069 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 226626
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [69] <- Index 69
		if(replayMode)
		{
			long proxyDataRecordId =1610512913230L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [70] <- WEB ADMIN Index 70 ---
		String requestProt0070 = "https";
		String requestHost0070 = "mso.morganstanleyclientserv.com";
		int    requestPort0070 = 443;
		String requestFile0070 = "/atrium/vendor-253ae210.js" +
				"?v=1607966054620";
		String requestHeader0070 = "GET " + requestFile0070 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0070, requestHost0070, requestPort0070, requestHeader0070, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==", XSRF_TOKEN_128);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0070 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 500880
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [70] <- Index 70
		if(replayMode)
		{
			long proxyDataRecordId =1610512913288L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [71] <- WEB ADMIN Index 71 ---
		String requestProt0071 = "https";
		String requestHost0071 = "mso.morganstanleyclientserv.com";
		int    requestPort0071 = 443;
		String requestFile0071 = "/atrium/vendor-6e8b5f81.js" +
				"?v=1607966054620";
		String requestHeader0071 = "GET " + requestFile0071 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0071, requestHost0071, requestPort0071, requestHeader0071, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==", XSRF_TOKEN_128);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0071 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 298099
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [71] <- Index 71
		if(replayMode)
		{
			long proxyDataRecordId =1610512913296L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [72] <- WEB ADMIN Index 72 ---
		String requestProt0072 = "https";
		String requestHost0072 = "mso.morganstanleyclientserv.com";
		int    requestPort0072 = 443;
		String requestFile0072 = "/atrium/vendor-4caf5380.js" +
				"?v=1607966054620";
		String requestHeader0072 = "GET " + requestFile0072 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0072, requestHost0072, requestPort0072, requestHeader0072, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==", XSRF_TOKEN_128);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0072 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 398261
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [72] <- Index 72
		if(replayMode)
		{
			long proxyDataRecordId =1610512913299L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [73] <- WEB ADMIN Index 73 ---
		String requestProt0073 = "https";
		String requestHost0073 = "mso.morganstanleyclientserv.com";
		int    requestPort0073 = 443;
		String requestFile0073 = "/atrium/vendor-b1258c71.js" +
				"?v=1607966054620";
		String requestHeader0073 = "GET " + requestFile0073 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0073, requestHost0073, requestPort0073, requestHeader0073, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==", XSRF_TOKEN_128);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0073 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 273430
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [73] <- Index 73
		if(replayMode)
		{
			long proxyDataRecordId =1610512913323L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [74] <- WEB ADMIN Index 74 ---
		String requestProt0074 = "https";
		String requestHost0074 = "mso.morganstanleyclientserv.com";
		int    requestPort0074 = 443;
		String requestFile0074 = "/atrium/vendor-68bbb5a2.js" +
				"?v=1607966054620";
		String requestHeader0074 = "GET " + requestFile0074 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0074, requestHost0074, requestPort0074, requestHeader0074, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==", XSRF_TOKEN_128);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0074 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 805198
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [74] <- Index 74
		if(replayMode)
		{
			long proxyDataRecordId =1610512913333L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [75] <- WEB ADMIN Index 75 ---
		String requestProt0075 = "https";
		String requestHost0075 = "mso.morganstanleyclientserv.com";
		int    requestPort0075 = 443;
		String requestFile0075 = "/atrium/vendor-4a16e10e.js" +
				"?v=1607966054620";
		String requestHeader0075 = "GET " + requestFile0075 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0075, requestHost0075, requestPort0075, requestHeader0075, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==", XSRF_TOKEN_128);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0075 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 341332
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [75] <- Index 75
		if(replayMode)
		{
			long proxyDataRecordId =1610512913683L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [76] <- WEB ADMIN Index 76 ---
		String requestProt0076 = "https";
		String requestHost0076 = "mso.morganstanleyclientserv.com";
		int    requestPort0076 = 443;
		String requestFile0076 = "/atrium/vendor-2932a7df.js" +
				"?v=1607966054620";
		String requestHeader0076 = "GET " + requestFile0076 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0076, requestHost0076, requestPort0076, requestHeader0076, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==", XSRF_TOKEN_128);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0076 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 866120
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [76] <- Index 76
		if(replayMode)
		{
			long proxyDataRecordId =1610512913705L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [77] <- WEB ADMIN Index 77 ---
		String requestProt0077 = "https";
		String requestHost0077 = "mso.morganstanleyclientserv.com";
		int    requestPort0077 = 443;
		String requestFile0077 = "/atrium/vendor-203e0718.js" +
				"?v=1607966054620";
		String requestHeader0077 = "GET " + requestFile0077 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0077, requestHost0077, requestPort0077, requestHeader0077, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==", XSRF_TOKEN_128);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0077 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 585359
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [77] <- Index 77
		if(replayMode)
		{
			long proxyDataRecordId =1610512913725L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [78] <- WEB ADMIN Index 78 ---
		String requestProt0078 = "https";
		String requestHost0078 = "mso.morganstanleyclientserv.com";
		int    requestPort0078 = 443;
		String requestFile0078 = "/atrium/main-748942c6.js" +
				"?v=1607966054620";
		String requestHeader0078 = "GET " + requestFile0078 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0078, requestHost0078, requestPort0078, requestHeader0078, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==", XSRF_TOKEN_128);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0078 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 111848
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [78] <- Index 78
		if(replayMode)
		{
			long proxyDataRecordId =1610512913734L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [79] <- WEB ADMIN Index 79 ---
		String requestProt0079 = "https";
		String requestHost0079 = "mso.morganstanleyclientserv.com";
		int    requestPort0079 = 443;
		String requestFile0079 = "/publiccontent/adobe/scripts/b124caa02ab9/772f5bcdf0f6/launch-4161e29788ea.min.js" +
				"?v=1607966054620?v=1610512913201";
		String requestHeader0079 = "GET " + requestFile0079 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0079, requestHost0079, requestPort0079, requestHeader0079, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==", XSRF_TOKEN_128);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0079 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 105961
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [79] <- Index 79
		if(replayMode)
		{
			long proxyDataRecordId =1610512913735L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [80] <- WEB ADMIN Index 80 ---
		String requestProt0080 = "https";
		String requestHost0080 = "starget.morganstanley.com";
		int    requestPort0080 = 443;
		String requestFile0080 = "/m2/morganstanleyandco/mbox/json" +
				"?mbox=target-global-mbox" +
				"&mboxSession=514f60730aea4555bc61ac42104184de" +
				"&mboxPC=514f60730aea4555bc61ac42104184de.34_0" +
				"&mboxPage=1d6bc512e0a64903852cbe02c96a8b00" +
				"&mboxRid=e319f071aa294f199d2189efae1a20ee" +
				"&mboxVersion=1.8.0" +
				"&mboxCount=1" +
				"&mboxTime=1610494914190" +
				"&mboxHost=mso.morganstanleyclientserv.com" +
				"&mboxURL=https%3A%2F%2Fmso.morganstanleyclientserv.com%2Fatrium%2F%23%2Ffinwell" +
				"&mboxReferrer=https%3A%2F%2Flogin.morganstanleyclientserv.com%2F" +
				"&browserHeight=969" +
				"&browserWidth=1920" +
				"&browserTimeOffset=-300" +
				"&screenHeight=1080" +
				"&screenWidth=1920" +
				"&colorDepth=24" +
				"&devicePixelRatio=1" +
				"&screenOrientation=landscape" +
				"&webGLRenderer=Google%20SwiftShader" +
				"&at_property=5776c956-c962-6e9e-d932-1f1a0820d8a4" +
				"&pageName=Not%20Set" +
				"&mboxMCSDID=585EE282ACF24B76-11F08DAA2AB7572A" +
				"&vst.trk=metrics.morganstanley.com" +
				"&vst.trks=smetrics.morganstanley.com" +
				"&mboxMCGVID=30588150307500429323193657079021352466" +
				"&mboxAAMB=RKhpRz8krg2tLO6pguXWp5olkAcUniQYPHaMWWgdJ3xzPWQmdj0y" +
				"&mboxMCGLH=7";
		String requestHeader0080 = "GET " + requestFile0080 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: starget.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://mso.morganstanleyclientserv.com\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0080, requestHost0080, requestPort0080, requestHeader0080, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0080 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 48
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [80] <- Index 80
		if(replayMode)
		{
			long proxyDataRecordId =1610512914231L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #3 (fragment 2 of 4)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [81] <- WEB ADMIN Index 81 ---
		String requestProt0081 = "https";
		String requestHost0081 = "mso.morganstanleyclientserv.com";
		int    requestPort0081 = 443;
		String requestFile0081 = "/publiccontent/adobe/scripts//b124caa02ab9/772f5bcdf0f6/7da651638e8c/hostedLibFiles/EPbde2f7ca14e540399dcc1f8208860b7b/AppMeasurement.min.js";
		String requestHeader0081 = "GET " + requestFile0081 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0081, requestHost0081, requestPort0081, requestHeader0081, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==", XSRF_TOKEN_128);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0081 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 12184
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [81] <- Index 81
		if(replayMode)
		{
			long proxyDataRecordId =1610512914283L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [82] <- WEB ADMIN Index 82 ---
		String requestProt0082 = "https";
		String requestHost0082 = "mso.morganstanleyclientserv.com";
		int    requestPort0082 = 443;
		String requestFile0082 = "/publiccontent/adobe/scripts//b124caa02ab9/772f5bcdf0f6/7da651638e8c/hostedLibFiles/EPbde2f7ca14e540399dcc1f8208860b7b/AppMeasurement_Module_AudienceManagement.min.js";
		String requestHeader0082 = "GET " + requestFile0082 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0082, requestHost0082, requestPort0082, requestHeader0082, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==", XSRF_TOKEN_128);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0082 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8762
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [82] <- Index 82
		if(replayMode)
		{
			long proxyDataRecordId =1610512914284L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [83] <- WEB ADMIN Index 83 ---
		String requestProt0083 = "https";
		String requestHost0083 = "mso.morganstanleyclientserv.com";
		int    requestPort0083 = 443;
		String requestFile0083 = "/atrium/Karla.ttf";
		String requestHeader0083 = "GET " + requestFile0083 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://mso.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/styles-d0ae3f07.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0083, requestHost0083, requestPort0083, requestHeader0083, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==", XSRF_TOKEN_128);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0083 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/OCTET-STREAM", header text fragment = [verification disabled], recorded content size = 42756
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/OCTET-STREAM", null, null);		// Test [83] <- Index 83
		if(replayMode)
		{
			long proxyDataRecordId =1610512914613L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [84] <- WEB ADMIN Index 84 ---
		String requestProt0084 = "https";
		String requestHost0084 = "mso.morganstanleyclientserv.com";
		int    requestPort0084 = 443;
		String requestFile0084 = "/shell/handler/proxy/sal/api/shell/GetShellUserContextV2" +
				"?RequestID=cfbe-1db6-9f0d-ccaa-f397-81ea-aeff-ce45" +
				"&SeqID=0000";
		String requestHeader0084 = "GET " + requestFile0084 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-XSRF-TOKEN: HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0084, requestHost0084, requestPort0084, requestHeader0084, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==", XSRF_TOKEN_128);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0084 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 6805
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [84] <- Index 84
		if(replayMode)
		{
			long proxyDataRecordId =1610512915892L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		// setup var extractor for 'XSRF_TOKEN_151'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0084_1 = new BoundaryBasedExtractorItem( "XSRF_TOKEN=" , ";",1,false,false,0,false);
		boundaryBasedHeaderExtractorItem0084_1.setSaveLength(0);
		boundaryBasedHeaderExtractorItem0084_1.setSaveOffset(0);
		boundaryBasedHeaderExtractorItem0084_1.setOccurrenceAll(false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0084_1);

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'XSRF_TOKEN_151'
			XSRF_TOKEN_151 = boundaryBasedHeaderExtractorItem0084_1.getResultText();
			log("<<< XSRF_TOKEN_151 = " + XSRF_TOKEN_151);
			loopVarMap.put("XSRF_TOKEN_151", XSRF_TOKEN_151);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && XSRF_TOKEN_151!= null && XSRF_TOKEN_151.trim().length() == 0)
			{
				XSRF_TOKEN_151 = "";
				log("runtime note: the extraction of a new value for the variable 'XSRF_TOKEN_151' ends up with an empty string - a substitute value was set");
				log("<<< XSRF_TOKEN_151 = " + XSRF_TOKEN_151);
				loopVarMap.put("XSRF_TOKEN_151", XSRF_TOKEN_151);
			}
		}
		catch (Exception e) { XSRF_TOKEN_151 = null; log(e); }
		if (XSRF_TOKEN_151 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'XSRF_TOKEN_151' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [85] <- WEB ADMIN Index 85 ---
		String requestProt0085 = "https";
		String requestHost0085 = "mso.morganstanleyclientserv.com";
		int    requestPort0085 = 443;
		String requestFile0085 = "/atrium/favicon.ico";
		String requestHeader0085 = "GET " + requestFile0085 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0085, requestHost0085, requestPort0085, requestHeader0085, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("HczX7cw98dCRhsnZGaRMSkCndcMOOhcE+EogE98KiQ+HDS44r7VDeQK+aCWfC1SiaixBRmIWgm3CeKyP+NsT/01wdGFiMjgwRnNxNmFCUUptMEwrK3YvN3NSdW1ldElhY2laZ1FTbWxvb0RFN2Z5NjQybWgzZmd3RTlPcllkZ1hzRll1dWVLR3RwL0E3NmEyMmNQRklTSjU0aEZhOTBONGluWlRlWXFFYWhWTklCc2lWT1AzOSsycWxXdGpua2I4MERBUGdwWjE3NkQ2RVpMRThJSzB5RG95S3U0YjlWTk0vVFF2WlBPSjZvQ0JJK2ttWHVNVzB0bEFhbGxWSU9VV3QrSmp2Qzc3Ym1SQWV0elM2WkhUZ2VzY3hxdk5iekY3M1FGVUdvUDd3MytjcDV2MVJzYlhqTWxhRmRzL2s3YjIydjRrOUFVem1kcm5sSkIyRXhzS2x3TnhWZ01qR0NoY0c0WVlhekRKN3M4PQ==", XSRF_TOKEN_128);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0085 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/X-ICON", header text fragment = [verification disabled], recorded content size = 232
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/X-ICON", null, null);		// Test [85] <- Index 85
		if(replayMode)
		{
			long proxyDataRecordId =1610512916048L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [86] <- WEB ADMIN Index 86 ---
		String requestProt0086 = "https";
		String requestHost0086 = "mso.morganstanleyclientserv.com";
		int    requestPort0086 = 443;
		String requestFile0086 = "/securecontent/bulletins/content_newglobalmessage.json" +
				"?RequestID=bfe6-23d5-f4f8-a381-8ab2-517e-f9bb-08d3" +
				"&SeqID=0001";
		String requestHeader0086 = "GET " + requestFile0086 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-XSRF-TOKEN: nMHlqHnaFeAjZQm4wiJnLaUQT2fA64ydiYxc0deddIJ5DIALxAykOAl7GILpWHdSj0YE6Fg0DGNL43B0LPwjHzZJU2ViNVY4MVpIbmtoRDNBOS9PWXBCQ3cxSUNmNlpTZklRTlF4SElYa09abmJ2a2hGcnc4NzlWbmdWMkZLNERKUi8wZjY4ZXNETDVvMmFtZHA3c2p2N0YzUHU5WUsvK3dITno3VDdEazhqT0grdkI4aTFySE1LL3NmUVBnUE9iTEp4MVpCN3hIbFpRYWRQbFJvTWhwOFd4VVJxT1dwNGF3S2M3cTBiUWVJMXlvUCt2MFF0bXJwNnhTQWxZcG9valhRaDlPai9sb1VTdktYUEpOcjBkMk1ZV3hsWVZUY3k3Yzc1dWpoS1lDNzQyZjRPeGhwdE1mNnRNYzlSN3VjVGFZb01nSUQ3K25UaTdYYzlSZ2dmb1NwU1FxdVowc3N4c1hFYXBBYjdmaW9ZPQ==\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0086, requestHost0086, requestPort0086, requestHeader0086, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nMHlqHnaFeAjZQm4wiJnLaUQT2fA64ydiYxc0deddIJ5DIALxAykOAl7GILpWHdSj0YE6Fg0DGNL43B0LPwjHzZJU2ViNVY4MVpIbmtoRDNBOS9PWXBCQ3cxSUNmNlpTZklRTlF4SElYa09abmJ2a2hGcnc4NzlWbmdWMkZLNERKUi8wZjY4ZXNETDVvMmFtZHA3c2p2N0YzUHU5WUsvK3dITno3VDdEazhqT0grdkI4aTFySE1LL3NmUVBnUE9iTEp4MVpCN3hIbFpRYWRQbFJvTWhwOFd4VVJxT1dwNGF3S2M3cTBiUWVJMXlvUCt2MFF0bXJwNnhTQWxZcG9valhRaDlPai9sb1VTdktYUEpOcjBkMk1ZV3hsWVZUY3k3Yzc1dWpoS1lDNzQyZjRPeGhwdE1mNnRNYzlSN3VjVGFZb01nSUQ3K25UaTdYYzlSZ2dmb1NwU1FxdVowc3N4c1hFYXBBYjdmaW9ZPQ==", XSRF_TOKEN_151);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0086 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1387
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [86] <- Index 86
		if(replayMode)
		{
			long proxyDataRecordId =1610512916122L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [87] <- WEB ADMIN Index 87 ---
		String requestProt0087 = "https";
		String requestHost0087 = "mso.morganstanleyclientserv.com";
		int    requestPort0087 = 443;
		String requestFile0087 = "/securecontent/atrium/qualtrics.js";
		String requestHeader0087 = "GET " + requestFile0087 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0087, requestHost0087, requestPort0087, requestHeader0087, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nMHlqHnaFeAjZQm4wiJnLaUQT2fA64ydiYxc0deddIJ5DIALxAykOAl7GILpWHdSj0YE6Fg0DGNL43B0LPwjHzZJU2ViNVY4MVpIbmtoRDNBOS9PWXBCQ3cxSUNmNlpTZklRTlF4SElYa09abmJ2a2hGcnc4NzlWbmdWMkZLNERKUi8wZjY4ZXNETDVvMmFtZHA3c2p2N0YzUHU5WUsvK3dITno3VDdEazhqT0grdkI4aTFySE1LL3NmUVBnUE9iTEp4MVpCN3hIbFpRYWRQbFJvTWhwOFd4VVJxT1dwNGF3S2M3cTBiUWVJMXlvUCt2MFF0bXJwNnhTQWxZcG9valhRaDlPai9sb1VTdktYUEpOcjBkMk1ZV3hsWVZUY3k3Yzc1dWpoS1lDNzQyZjRPeGhwdE1mNnRNYzlSN3VjVGFZb01nSUQ3K25UaTdYYzlSZ2dmb1NwU1FxdVowc3N4c1hFYXBBYjdmaW9ZPQ==", XSRF_TOKEN_151);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0087 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 893
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [87] <- Index 87
		if(replayMode)
		{
			long proxyDataRecordId =1610512916127L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [88] <- WEB ADMIN Index 88 ---
		String requestProt0088 = "https";
		String requestHost0088 = "mso.morganstanleyclientserv.com";
		int    requestPort0088 = 443;
		String requestFile0088 = "/shell/MSO_CMS_UX/CMS/ViewDefinition" +
				"?url=helpmodal/helpoverlayfooter/helpoverlayfooter.html" +
				"&RequestID=69f1-0dde-51f1-d216-ac0f-3365-20b3-670d" +
				"&SeqID=0002";
		String requestHeader0088 = "GET " + requestFile0088 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: text/html\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-XSRF-TOKEN: nMHlqHnaFeAjZQm4wiJnLaUQT2fA64ydiYxc0deddIJ5DIALxAykOAl7GILpWHdSj0YE6Fg0DGNL43B0LPwjHzZJU2ViNVY4MVpIbmtoRDNBOS9PWXBCQ3cxSUNmNlpTZklRTlF4SElYa09abmJ2a2hGcnc4NzlWbmdWMkZLNERKUi8wZjY4ZXNETDVvMmFtZHA3c2p2N0YzUHU5WUsvK3dITno3VDdEazhqT0grdkI4aTFySE1LL3NmUVBnUE9iTEp4MVpCN3hIbFpRYWRQbFJvTWhwOFd4VVJxT1dwNGF3S2M3cTBiUWVJMXlvUCt2MFF0bXJwNnhTQWxZcG9valhRaDlPai9sb1VTdktYUEpOcjBkMk1ZV3hsWVZUY3k3Yzc1dWpoS1lDNzQyZjRPeGhwdE1mNnRNYzlSN3VjVGFZb01nSUQ3K25UaTdYYzlSZ2dmb1NwU1FxdVowc3N4c1hFYXBBYjdmaW9ZPQ==\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0088, requestHost0088, requestPort0088, requestHeader0088, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nMHlqHnaFeAjZQm4wiJnLaUQT2fA64ydiYxc0deddIJ5DIALxAykOAl7GILpWHdSj0YE6Fg0DGNL43B0LPwjHzZJU2ViNVY4MVpIbmtoRDNBOS9PWXBCQ3cxSUNmNlpTZklRTlF4SElYa09abmJ2a2hGcnc4NzlWbmdWMkZLNERKUi8wZjY4ZXNETDVvMmFtZHA3c2p2N0YzUHU5WUsvK3dITno3VDdEazhqT0grdkI4aTFySE1LL3NmUVBnUE9iTEp4MVpCN3hIbFpRYWRQbFJvTWhwOFd4VVJxT1dwNGF3S2M3cTBiUWVJMXlvUCt2MFF0bXJwNnhTQWxZcG9valhRaDlPai9sb1VTdktYUEpOcjBkMk1ZV3hsWVZUY3k3Yzc1dWpoS1lDNzQyZjRPeGhwdE1mNnRNYzlSN3VjVGFZb01nSUQ3K25UaTdYYzlSZ2dmb1NwU1FxdVowc3N4c1hFYXBBYjdmaW9ZPQ==", XSRF_TOKEN_151);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0088 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 388
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [88] <- Index 88
		if(replayMode)
		{
			long proxyDataRecordId =1610512916162L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [89] <- WEB ADMIN Index 89 ---
		String requestProt0089 = "https";
		String requestHost0089 = "mso.morganstanleyclientserv.com";
		int    requestPort0089 = 443;
		String requestFile0089 = "/shell/MSO_CMS_UX/CMS/ViewDefinition" +
				"?url=helpmodal/helpoverlayfooter/helpoverlayfooter.html" +
				"&RequestID=5bb3-d60e-92e8-b871-e3a2-0cd5-0b50-476a" +
				"&SeqID=0003";
		String requestHeader0089 = "GET " + requestFile0089 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: text/html\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-XSRF-TOKEN: nMHlqHnaFeAjZQm4wiJnLaUQT2fA64ydiYxc0deddIJ5DIALxAykOAl7GILpWHdSj0YE6Fg0DGNL43B0LPwjHzZJU2ViNVY4MVpIbmtoRDNBOS9PWXBCQ3cxSUNmNlpTZklRTlF4SElYa09abmJ2a2hGcnc4NzlWbmdWMkZLNERKUi8wZjY4ZXNETDVvMmFtZHA3c2p2N0YzUHU5WUsvK3dITno3VDdEazhqT0grdkI4aTFySE1LL3NmUVBnUE9iTEp4MVpCN3hIbFpRYWRQbFJvTWhwOFd4VVJxT1dwNGF3S2M3cTBiUWVJMXlvUCt2MFF0bXJwNnhTQWxZcG9valhRaDlPai9sb1VTdktYUEpOcjBkMk1ZV3hsWVZUY3k3Yzc1dWpoS1lDNzQyZjRPeGhwdE1mNnRNYzlSN3VjVGFZb01nSUQ3K25UaTdYYzlSZ2dmb1NwU1FxdVowc3N4c1hFYXBBYjdmaW9ZPQ==\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0089, requestHost0089, requestPort0089, requestHeader0089, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nMHlqHnaFeAjZQm4wiJnLaUQT2fA64ydiYxc0deddIJ5DIALxAykOAl7GILpWHdSj0YE6Fg0DGNL43B0LPwjHzZJU2ViNVY4MVpIbmtoRDNBOS9PWXBCQ3cxSUNmNlpTZklRTlF4SElYa09abmJ2a2hGcnc4NzlWbmdWMkZLNERKUi8wZjY4ZXNETDVvMmFtZHA3c2p2N0YzUHU5WUsvK3dITno3VDdEazhqT0grdkI4aTFySE1LL3NmUVBnUE9iTEp4MVpCN3hIbFpRYWRQbFJvTWhwOFd4VVJxT1dwNGF3S2M3cTBiUWVJMXlvUCt2MFF0bXJwNnhTQWxZcG9valhRaDlPai9sb1VTdktYUEpOcjBkMk1ZV3hsWVZUY3k3Yzc1dWpoS1lDNzQyZjRPeGhwdE1mNnRNYzlSN3VjVGFZb01nSUQ3K25UaTdYYzlSZ2dmb1NwU1FxdVowc3N4c1hFYXBBYjdmaW9ZPQ==", XSRF_TOKEN_151);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0089 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 388
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [89] <- Index 89
		if(replayMode)
		{
			long proxyDataRecordId =1610512916172L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [90] <- WEB ADMIN Index 90 ---
		String requestProt0090 = "https";
		String requestHost0090 = "mso.morganstanleyclientserv.com";
		int    requestPort0090 = 443;
		String requestFile0090 = "/shell/handler/proxy/trading/v2/quotes" +
				"?symbols=.DJIA,.NCOMP,.SPX" +
				"&RequestID=789b-999b-4e60-0830-e86c-c6b5-c8c4-0005" +
				"&SeqID=0005";
		String requestHeader0090 = "GET " + requestFile0090 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-XSRF-TOKEN: nMHlqHnaFeAjZQm4wiJnLaUQT2fA64ydiYxc0deddIJ5DIALxAykOAl7GILpWHdSj0YE6Fg0DGNL43B0LPwjHzZJU2ViNVY4MVpIbmtoRDNBOS9PWXBCQ3cxSUNmNlpTZklRTlF4SElYa09abmJ2a2hGcnc4NzlWbmdWMkZLNERKUi8wZjY4ZXNETDVvMmFtZHA3c2p2N0YzUHU5WUsvK3dITno3VDdEazhqT0grdkI4aTFySE1LL3NmUVBnUE9iTEp4MVpCN3hIbFpRYWRQbFJvTWhwOFd4VVJxT1dwNGF3S2M3cTBiUWVJMXlvUCt2MFF0bXJwNnhTQWxZcG9valhRaDlPai9sb1VTdktYUEpOcjBkMk1ZV3hsWVZUY3k3Yzc1dWpoS1lDNzQyZjRPeGhwdE1mNnRNYzlSN3VjVGFZb01nSUQ3K25UaTdYYzlSZ2dmb1NwU1FxdVowc3N4c1hFYXBBYjdmaW9ZPQ==\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0090, requestHost0090, requestPort0090, requestHeader0090, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nMHlqHnaFeAjZQm4wiJnLaUQT2fA64ydiYxc0deddIJ5DIALxAykOAl7GILpWHdSj0YE6Fg0DGNL43B0LPwjHzZJU2ViNVY4MVpIbmtoRDNBOS9PWXBCQ3cxSUNmNlpTZklRTlF4SElYa09abmJ2a2hGcnc4NzlWbmdWMkZLNERKUi8wZjY4ZXNETDVvMmFtZHA3c2p2N0YzUHU5WUsvK3dITno3VDdEazhqT0grdkI4aTFySE1LL3NmUVBnUE9iTEp4MVpCN3hIbFpRYWRQbFJvTWhwOFd4VVJxT1dwNGF3S2M3cTBiUWVJMXlvUCt2MFF0bXJwNnhTQWxZcG9valhRaDlPai9sb1VTdktYUEpOcjBkMk1ZV3hsWVZUY3k3Yzc1dWpoS1lDNzQyZjRPeGhwdE1mNnRNYzlSN3VjVGFZb01nSUQ3K25UaTdYYzlSZ2dmb1NwU1FxdVowc3N4c1hFYXBBYjdmaW9ZPQ==", XSRF_TOKEN_151);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0090 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2236
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [90] <- Index 90
		if(replayMode)
		{
			long proxyDataRecordId =1610512916298L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		// setup var extractor for 'TOKEN_157'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0090_1 = new BoundaryBasedExtractorItem( "TOKEN:" , "Con",1,false,false,0,false);
		boundaryBasedHeaderExtractorItem0090_1.setSaveLength(0);
		boundaryBasedHeaderExtractorItem0090_1.setSaveOffset(0);
		boundaryBasedHeaderExtractorItem0090_1.setOccurrenceAll(false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0090_1);

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'TOKEN_157'
			TOKEN_157 = boundaryBasedHeaderExtractorItem0090_1.getResultText();
			log("<<< TOKEN_157 = " + TOKEN_157);
			loopVarMap.put("TOKEN_157", TOKEN_157);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && TOKEN_157!= null && TOKEN_157.trim().length() == 0)
			{
				TOKEN_157 = "";
				log("runtime note: the extraction of a new value for the variable 'TOKEN_157' ends up with an empty string - a substitute value was set");
				log("<<< TOKEN_157 = " + TOKEN_157);
				loopVarMap.put("TOKEN_157", TOKEN_157);
			}
		}
		catch (Exception e) { TOKEN_157 = null; log(e); }
		if (TOKEN_157 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'TOKEN_157' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [91] <- WEB ADMIN Index 91 ---
		String requestProt0091 = "https";
		String requestHost0091 = "mso.morganstanleyclientserv.com";
		int    requestPort0091 = 443;
		String requestFile0091 = "/securecontent/atrium/cmsFooter.json" +
				"?RequestID=4559-1014-4f97-4622-f812-43c0-c75e-4db3" +
				"&SeqID=0006";
		String requestHeader0091 = "GET " + requestFile0091 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-XSRF-TOKEN: nMHlqHnaFeAjZQm4wiJnLaUQT2fA64ydiYxc0deddIJ5DIALxAykOAl7GILpWHdSj0YE6Fg0DGNL43B0LPwjHzZJU2ViNVY4MVpIbmtoRDNBOS9PWXBCQ3cxSUNmNlpTZklRTlF4SElYa09abmJ2a2hGcnc4NzlWbmdWMkZLNERKUi8wZjY4ZXNETDVvMmFtZHA3c2p2N0YzUHU5WUsvK3dITno3VDdEazhqT0grdkI4aTFySE1LL3NmUVBnUE9iTEp4MVpCN3hIbFpRYWRQbFJvTWhwOFd4VVJxT1dwNGF3S2M3cTBiUWVJMXlvUCt2MFF0bXJwNnhTQWxZcG9valhRaDlPai9sb1VTdktYUEpOcjBkMk1ZV3hsWVZUY3k3Yzc1dWpoS1lDNzQyZjRPeGhwdE1mNnRNYzlSN3VjVGFZb01nSUQ3K25UaTdYYzlSZ2dmb1NwU1FxdVowc3N4c1hFYXBBYjdmaW9ZPQ==\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0091, requestHost0091, requestPort0091, requestHeader0091, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nMHlqHnaFeAjZQm4wiJnLaUQT2fA64ydiYxc0deddIJ5DIALxAykOAl7GILpWHdSj0YE6Fg0DGNL43B0LPwjHzZJU2ViNVY4MVpIbmtoRDNBOS9PWXBCQ3cxSUNmNlpTZklRTlF4SElYa09abmJ2a2hGcnc4NzlWbmdWMkZLNERKUi8wZjY4ZXNETDVvMmFtZHA3c2p2N0YzUHU5WUsvK3dITno3VDdEazhqT0grdkI4aTFySE1LL3NmUVBnUE9iTEp4MVpCN3hIbFpRYWRQbFJvTWhwOFd4VVJxT1dwNGF3S2M3cTBiUWVJMXlvUCt2MFF0bXJwNnhTQWxZcG9valhRaDlPai9sb1VTdktYUEpOcjBkMk1ZV3hsWVZUY3k3Yzc1dWpoS1lDNzQyZjRPeGhwdE1mNnRNYzlSN3VjVGFZb01nSUQ3K25UaTdYYzlSZ2dmb1NwU1FxdVowc3N4c1hFYXBBYjdmaW9ZPQ==", XSRF_TOKEN_151);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0091 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 861
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [91] <- Index 91
		if(replayMode)
		{
			long proxyDataRecordId =1610512916311L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [92] <- WEB ADMIN Index 92 ---
		String requestProt0092 = "https";
		String requestHost0092 = "mso.morganstanleyclientserv.com";
		int    requestPort0092 = 443;
		String requestFile0092 = "/atrium/lazy-lazy-finwell-module-ngfactory-31ecd969.js" +
				"?v=1607966054620";
		String requestHeader0092 = "GET " + requestFile0092 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0092, requestHost0092, requestPort0092, requestHeader0092, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nMHlqHnaFeAjZQm4wiJnLaUQT2fA64ydiYxc0deddIJ5DIALxAykOAl7GILpWHdSj0YE6Fg0DGNL43B0LPwjHzZJU2ViNVY4MVpIbmtoRDNBOS9PWXBCQ3cxSUNmNlpTZklRTlF4SElYa09abmJ2a2hGcnc4NzlWbmdWMkZLNERKUi8wZjY4ZXNETDVvMmFtZHA3c2p2N0YzUHU5WUsvK3dITno3VDdEazhqT0grdkI4aTFySE1LL3NmUVBnUE9iTEp4MVpCN3hIbFpRYWRQbFJvTWhwOFd4VVJxT1dwNGF3S2M3cTBiUWVJMXlvUCt2MFF0bXJwNnhTQWxZcG9valhRaDlPai9sb1VTdktYUEpOcjBkMk1ZV3hsWVZUY3k3Yzc1dWpoS1lDNzQyZjRPeGhwdE1mNnRNYzlSN3VjVGFZb01nSUQ3K25UaTdYYzlSZ2dmb1NwU1FxdVowc3N4c1hFYXBBYjdmaW9ZPQ==", XSRF_TOKEN_151);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0092 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 472041
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [92] <- Index 92
		if(replayMode)
		{
			long proxyDataRecordId =1610512916326L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [93] <- WEB ADMIN Index 93 ---
		String requestProt0093 = "https";
		String requestHost0093 = "mso.morganstanleyclientserv.com";
		int    requestPort0093 = 443;
		String requestFile0093 = "/atrium/OpenSans-Semibold.woff";
		String requestHeader0093 = "GET " + requestFile0093 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://mso.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/styles-d0ae3f07.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0093, requestHost0093, requestPort0093, requestHeader0093, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nMHlqHnaFeAjZQm4wiJnLaUQT2fA64ydiYxc0deddIJ5DIALxAykOAl7GILpWHdSj0YE6Fg0DGNL43B0LPwjHzZJU2ViNVY4MVpIbmtoRDNBOS9PWXBCQ3cxSUNmNlpTZklRTlF4SElYa09abmJ2a2hGcnc4NzlWbmdWMkZLNERKUi8wZjY4ZXNETDVvMmFtZHA3c2p2N0YzUHU5WUsvK3dITno3VDdEazhqT0grdkI4aTFySE1LL3NmUVBnUE9iTEp4MVpCN3hIbFpRYWRQbFJvTWhwOFd4VVJxT1dwNGF3S2M3cTBiUWVJMXlvUCt2MFF0bXJwNnhTQWxZcG9valhRaDlPai9sb1VTdktYUEpOcjBkMk1ZV3hsWVZUY3k3Yzc1dWpoS1lDNzQyZjRPeGhwdE1mNnRNYzlSN3VjVGFZb01nSUQ3K25UaTdYYzlSZ2dmb1NwU1FxdVowc3N4c1hFYXBBYjdmaW9ZPQ==", XSRF_TOKEN_151);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0093 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF", header text fragment = [verification disabled], recorded content size = 22908
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF", null, null);		// Test [93] <- Index 93
		if(replayMode)
		{
			long proxyDataRecordId =1610512916410L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [94] <- WEB ADMIN Index 94 ---
		String requestProt0094 = "https";
		String requestHost0094 = "mso.morganstanleyclientserv.com";
		int    requestPort0094 = 443;
		String requestFile0094 = "/atrium/icomoon.woff";
		String requestHeader0094 = "GET " + requestFile0094 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://mso.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/styles-d0ae3f07.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0094, requestHost0094, requestPort0094, requestHeader0094, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nMHlqHnaFeAjZQm4wiJnLaUQT2fA64ydiYxc0deddIJ5DIALxAykOAl7GILpWHdSj0YE6Fg0DGNL43B0LPwjHzZJU2ViNVY4MVpIbmtoRDNBOS9PWXBCQ3cxSUNmNlpTZklRTlF4SElYa09abmJ2a2hGcnc4NzlWbmdWMkZLNERKUi8wZjY4ZXNETDVvMmFtZHA3c2p2N0YzUHU5WUsvK3dITno3VDdEazhqT0grdkI4aTFySE1LL3NmUVBnUE9iTEp4MVpCN3hIbFpRYWRQbFJvTWhwOFd4VVJxT1dwNGF3S2M3cTBiUWVJMXlvUCt2MFF0bXJwNnhTQWxZcG9valhRaDlPai9sb1VTdktYUEpOcjBkMk1ZV3hsWVZUY3k3Yzc1dWpoS1lDNzQyZjRPeGhwdE1mNnRNYzlSN3VjVGFZb01nSUQ3K25UaTdYYzlSZ2dmb1NwU1FxdVowc3N4c1hFYXBBYjdmaW9ZPQ==", XSRF_TOKEN_151);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0094 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF", header text fragment = [verification disabled], recorded content size = 16348
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF", null, null);		// Test [94] <- Index 94
		if(replayMode)
		{
			long proxyDataRecordId =1610512918568L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [95] <- WEB ADMIN Index 95 ---
		String requestProt0095 = "https";
		String requestHost0095 = "mso.morganstanleyclientserv.com";
		int    requestPort0095 = 443;
		String requestFile0095 = "/atrium/msm-icons.woff";
		String requestHeader0095 = "GET " + requestFile0095 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://mso.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/styles-d0ae3f07.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0095, requestHost0095, requestPort0095, requestHeader0095, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nMHlqHnaFeAjZQm4wiJnLaUQT2fA64ydiYxc0deddIJ5DIALxAykOAl7GILpWHdSj0YE6Fg0DGNL43B0LPwjHzZJU2ViNVY4MVpIbmtoRDNBOS9PWXBCQ3cxSUNmNlpTZklRTlF4SElYa09abmJ2a2hGcnc4NzlWbmdWMkZLNERKUi8wZjY4ZXNETDVvMmFtZHA3c2p2N0YzUHU5WUsvK3dITno3VDdEazhqT0grdkI4aTFySE1LL3NmUVBnUE9iTEp4MVpCN3hIbFpRYWRQbFJvTWhwOFd4VVJxT1dwNGF3S2M3cTBiUWVJMXlvUCt2MFF0bXJwNnhTQWxZcG9valhRaDlPai9sb1VTdktYUEpOcjBkMk1ZV3hsWVZUY3k3Yzc1dWpoS1lDNzQyZjRPeGhwdE1mNnRNYzlSN3VjVGFZb01nSUQ3K25UaTdYYzlSZ2dmb1NwU1FxdVowc3N4c1hFYXBBYjdmaW9ZPQ==", XSRF_TOKEN_151);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0095 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF", header text fragment = [verification disabled], recorded content size = 14640
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF", null, null);		// Test [95] <- Index 95
		if(replayMode)
		{
			long proxyDataRecordId =1610512918570L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [96] <- WEB ADMIN Index 96 ---
		String requestProt0096 = "https";
		String requestHost0096 = "mso.morganstanleyclientserv.com";
		int    requestPort0096 = 443;
		String requestFile0096 = "/atrium/icons.woff2";
		String requestHeader0096 = "GET " + requestFile0096 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://mso.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/styles-d0ae3f07.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0096, requestHost0096, requestPort0096, requestHeader0096, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nMHlqHnaFeAjZQm4wiJnLaUQT2fA64ydiYxc0deddIJ5DIALxAykOAl7GILpWHdSj0YE6Fg0DGNL43B0LPwjHzZJU2ViNVY4MVpIbmtoRDNBOS9PWXBCQ3cxSUNmNlpTZklRTlF4SElYa09abmJ2a2hGcnc4NzlWbmdWMkZLNERKUi8wZjY4ZXNETDVvMmFtZHA3c2p2N0YzUHU5WUsvK3dITno3VDdEazhqT0grdkI4aTFySE1LL3NmUVBnUE9iTEp4MVpCN3hIbFpRYWRQbFJvTWhwOFd4VVJxT1dwNGF3S2M3cTBiUWVJMXlvUCt2MFF0bXJwNnhTQWxZcG9valhRaDlPai9sb1VTdktYUEpOcjBkMk1ZV3hsWVZUY3k3Yzc1dWpoS1lDNzQyZjRPeGhwdE1mNnRNYzlSN3VjVGFZb01nSUQ3K25UaTdYYzlSZ2dmb1NwU1FxdVowc3N4c1hFYXBBYjdmaW9ZPQ==", XSRF_TOKEN_151);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0096 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF", header text fragment = [verification disabled], recorded content size = 18496
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF", null, null);		// Test [96] <- Index 96
		if(replayMode)
		{
			long proxyDataRecordId =1610512918574L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [97] <- WEB ADMIN Index 97 ---
		String requestProt0097 = "https";
		String requestHost0097 = "mso.morganstanleyclientserv.com";
		int    requestPort0097 = 443;
		String requestFile0097 = "/atrium/OpenSans-Italic.woff";
		String requestHeader0097 = "GET " + requestFile0097 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://mso.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/styles-d0ae3f07.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0097, requestHost0097, requestPort0097, requestHeader0097, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nMHlqHnaFeAjZQm4wiJnLaUQT2fA64ydiYxc0deddIJ5DIALxAykOAl7GILpWHdSj0YE6Fg0DGNL43B0LPwjHzZJU2ViNVY4MVpIbmtoRDNBOS9PWXBCQ3cxSUNmNlpTZklRTlF4SElYa09abmJ2a2hGcnc4NzlWbmdWMkZLNERKUi8wZjY4ZXNETDVvMmFtZHA3c2p2N0YzUHU5WUsvK3dITno3VDdEazhqT0grdkI4aTFySE1LL3NmUVBnUE9iTEp4MVpCN3hIbFpRYWRQbFJvTWhwOFd4VVJxT1dwNGF3S2M3cTBiUWVJMXlvUCt2MFF0bXJwNnhTQWxZcG9valhRaDlPai9sb1VTdktYUEpOcjBkMk1ZV3hsWVZUY3k3Yzc1dWpoS1lDNzQyZjRPeGhwdE1mNnRNYzlSN3VjVGFZb01nSUQ3K25UaTdYYzlSZ2dmb1NwU1FxdVowc3N4c1hFYXBBYjdmaW9ZPQ==", XSRF_TOKEN_151);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0097 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF", header text fragment = [verification disabled], recorded content size = 23188
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF", null, null);		// Test [97] <- Index 97
		if(replayMode)
		{
			long proxyDataRecordId =1610512918575L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [98] <- WEB ADMIN Index 98 ---
		String requestProt0098 = "https";
		String requestHost0098 = "zn5vdffa9tf5ih83p-mswm.siteintercept.qualtrics.com";
		int    requestPort0098 = 443;
		String requestFile0098 = "/WRSiteInterceptEngine/" +
				"?Q_ZID=ZN_5vdFFa9tF5IH83P" +
				"&Q_LOC=https%3A%2F%2Fmso.morganstanleyclientserv.com%2Fatrium%2F%23%2Ffinwell" +
				"&t=1610512916393";
		String requestHeader0098 = "GET " + requestFile0098 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: zn5vdffa9tf5ih83p-mswm.siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0098, requestHost0098, requestPort0098, requestHeader0098, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0098 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 16354
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [98] <- Index 98
		if(replayMode)
		{
			long proxyDataRecordId =1610512918650L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [99] <- WEB ADMIN Index 99 ---
		String requestProt0099 = "https";
		String requestHost0099 = "mso.morganstanleyclientserv.com";
		int    requestPort0099 = 443;
		String requestFile0099 = "/atrium/MS-Gloriola-II-Std-Light.woff";
		String requestHeader0099 = "GET " + requestFile0099 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://mso.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/styles-d0ae3f07.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0099, requestHost0099, requestPort0099, requestHeader0099, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nMHlqHnaFeAjZQm4wiJnLaUQT2fA64ydiYxc0deddIJ5DIALxAykOAl7GILpWHdSj0YE6Fg0DGNL43B0LPwjHzZJU2ViNVY4MVpIbmtoRDNBOS9PWXBCQ3cxSUNmNlpTZklRTlF4SElYa09abmJ2a2hGcnc4NzlWbmdWMkZLNERKUi8wZjY4ZXNETDVvMmFtZHA3c2p2N0YzUHU5WUsvK3dITno3VDdEazhqT0grdkI4aTFySE1LL3NmUVBnUE9iTEp4MVpCN3hIbFpRYWRQbFJvTWhwOFd4VVJxT1dwNGF3S2M3cTBiUWVJMXlvUCt2MFF0bXJwNnhTQWxZcG9valhRaDlPai9sb1VTdktYUEpOcjBkMk1ZV3hsWVZUY3k3Yzc1dWpoS1lDNzQyZjRPeGhwdE1mNnRNYzlSN3VjVGFZb01nSUQ3K25UaTdYYzlSZ2dmb1NwU1FxdVowc3N4c1hFYXBBYjdmaW9ZPQ==", XSRF_TOKEN_151);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0099 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF", header text fragment = [verification disabled], recorded content size = 22644
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF", null, null);		// Test [99] <- Index 99
		if(replayMode)
		{
			long proxyDataRecordId =1610512920808L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [100] <- WEB ADMIN Index 100 ---
		String requestProt0100 = "https";
		String requestHost0100 = "mso.morganstanleyclientserv.com";
		int    requestPort0100 = 443;
		String requestFile0100 = "/atrium/Karla-Bold.ttf";
		String requestHeader0100 = "GET " + requestFile0100 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://mso.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/styles-d0ae3f07.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0100, requestHost0100, requestPort0100, requestHeader0100, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nMHlqHnaFeAjZQm4wiJnLaUQT2fA64ydiYxc0deddIJ5DIALxAykOAl7GILpWHdSj0YE6Fg0DGNL43B0LPwjHzZJU2ViNVY4MVpIbmtoRDNBOS9PWXBCQ3cxSUNmNlpTZklRTlF4SElYa09abmJ2a2hGcnc4NzlWbmdWMkZLNERKUi8wZjY4ZXNETDVvMmFtZHA3c2p2N0YzUHU5WUsvK3dITno3VDdEazhqT0grdkI4aTFySE1LL3NmUVBnUE9iTEp4MVpCN3hIbFpRYWRQbFJvTWhwOFd4VVJxT1dwNGF3S2M3cTBiUWVJMXlvUCt2MFF0bXJwNnhTQWxZcG9valhRaDlPai9sb1VTdktYUEpOcjBkMk1ZV3hsWVZUY3k3Yzc1dWpoS1lDNzQyZjRPeGhwdE1mNnRNYzlSN3VjVGFZb01nSUQ3K25UaTdYYzlSZ2dmb1NwU1FxdVowc3N4c1hFYXBBYjdmaW9ZPQ==", XSRF_TOKEN_151);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0100 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/OCTET-STREAM", header text fragment = [verification disabled], recorded content size = 42744
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/OCTET-STREAM", null, null);		// Test [100] <- Index 100
		if(replayMode)
		{
			long proxyDataRecordId =1610512920809L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #3 (fragment 3 of 4)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [101] <- WEB ADMIN Index 101 ---
		String requestProt0101 = "https";
		String requestHost0101 = "mso.morganstanleyclientserv.com";
		int    requestPort0101 = 443;
		String requestFile0101 = "/atrium/Karla-Italic.ttf";
		String requestHeader0101 = "GET " + requestFile0101 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://mso.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/styles-d0ae3f07.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0101, requestHost0101, requestPort0101, requestHeader0101, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nMHlqHnaFeAjZQm4wiJnLaUQT2fA64ydiYxc0deddIJ5DIALxAykOAl7GILpWHdSj0YE6Fg0DGNL43B0LPwjHzZJU2ViNVY4MVpIbmtoRDNBOS9PWXBCQ3cxSUNmNlpTZklRTlF4SElYa09abmJ2a2hGcnc4NzlWbmdWMkZLNERKUi8wZjY4ZXNETDVvMmFtZHA3c2p2N0YzUHU5WUsvK3dITno3VDdEazhqT0grdkI4aTFySE1LL3NmUVBnUE9iTEp4MVpCN3hIbFpRYWRQbFJvTWhwOFd4VVJxT1dwNGF3S2M3cTBiUWVJMXlvUCt2MFF0bXJwNnhTQWxZcG9valhRaDlPai9sb1VTdktYUEpOcjBkMk1ZV3hsWVZUY3k3Yzc1dWpoS1lDNzQyZjRPeGhwdE1mNnRNYzlSN3VjVGFZb01nSUQ3K25UaTdYYzlSZ2dmb1NwU1FxdVowc3N4c1hFYXBBYjdmaW9ZPQ==", XSRF_TOKEN_151);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0101 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/OCTET-STREAM", header text fragment = [verification disabled], recorded content size = 43752
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/OCTET-STREAM", null, null);		// Test [101] <- Index 101
		if(replayMode)
		{
			long proxyDataRecordId =1610512920810L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [102] <- WEB ADMIN Index 102 ---
		String requestProt0102 = "https";
		String requestHost0102 = "msononprodsc73578190us1.cobrowse.oraclecloud.com";
		int    requestPort0102 = 443;
		String requestFile0102 = "/launcher.js";
		String requestHeader0102 = "GET " + requestFile0102 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: msononprodsc73578190us1.cobrowse.oraclecloud.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0102, requestHost0102, requestPort0102, requestHeader0102, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0102 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 9835
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [102] <- Index 102
		if(replayMode)
		{
			long proxyDataRecordId =1610512920873L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [103] <- WEB ADMIN Index 103 ---
		String requestProt0103 = "https";
		String requestHost0103 = "mso.morganstanleyclientserv.com";
		int    requestPort0103 = 443;
		String requestFile0103 = "/atrium/OpenSans-Regular.woff";
		String requestHeader0103 = "GET " + requestFile0103 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://mso.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/styles-d0ae3f07.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0103, requestHost0103, requestPort0103, requestHeader0103, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nMHlqHnaFeAjZQm4wiJnLaUQT2fA64ydiYxc0deddIJ5DIALxAykOAl7GILpWHdSj0YE6Fg0DGNL43B0LPwjHzZJU2ViNVY4MVpIbmtoRDNBOS9PWXBCQ3cxSUNmNlpTZklRTlF4SElYa09abmJ2a2hGcnc4NzlWbmdWMkZLNERKUi8wZjY4ZXNETDVvMmFtZHA3c2p2N0YzUHU5WUsvK3dITno3VDdEazhqT0grdkI4aTFySE1LL3NmUVBnUE9iTEp4MVpCN3hIbFpRYWRQbFJvTWhwOFd4VVJxT1dwNGF3S2M3cTBiUWVJMXlvUCt2MFF0bXJwNnhTQWxZcG9valhRaDlPai9sb1VTdktYUEpOcjBkMk1ZV3hsWVZUY3k3Yzc1dWpoS1lDNzQyZjRPeGhwdE1mNnRNYzlSN3VjVGFZb01nSUQ3K25UaTdYYzlSZ2dmb1NwU1FxdVowc3N4c1hFYXBBYjdmaW9ZPQ==", XSRF_TOKEN_151);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0103 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF", header text fragment = [verification disabled], recorded content size = 22660
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF", null, null);		// Test [103] <- Index 103
		if(replayMode)
		{
			long proxyDataRecordId =1610512923088L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [104] <- WEB ADMIN Index 104 ---
		String requestProt0104 = "https";
		String requestHost0104 = "public.cobrowse.oraclecloud.com";
		int    requestPort0104 = 443;
		String requestFile0104 = "/rely/global_launcher.js";
		String requestHeader0104 = "GET " + requestFile0104 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: public.cobrowse.oraclecloud.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0104, requestHost0104, requestPort0104, requestHeader0104, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0104 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 34318
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [104] <- Index 104
		if(replayMode)
		{
			long proxyDataRecordId =1610512923090L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [105] <- WEB ADMIN Index 105 ---
		String requestProt0105 = "https";
		String requestHost0105 = "mso.morganstanleyclientserv.com";
		int    requestPort0105 = 443;
		String requestFile0105 = "/shell/handler/restproxy/finwell/api/FinwellUserProfile" +
				"?RequestID=7844-cc4b-46f0-11ac-eeb4-520c-c3db-4695" +
				"&SeqID=0007";
		String requestHeader0105 = "GET " + requestFile0105 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-XSRF-TOKEN: AIqP+6LL8gcymXRQQU58tRefTQlwtcwqKZPHPAn9NAOwexIvWBeWsSUf0iAie2kTdMDXPziVr43mhL1BwgDoJzhWVEREMWVUVTFqRjJRRmdsd3B6aDJNYkRaby92S0FkOTlpejVBSVRBKzh1dHNKQk1PMjJNMHJ2MGxSU1FSbjhybTdzOUU2RHNGdTZ2Q2ZjMXQ0WndJVlFVNld5ekZ1Y2dZd2hIQUFHdkQzaGV4M21EWWt1cDJ3Sit0amdoNFNXbU1nOU1hWjQ1bzJNRkNzMkRCanhCUklSNVRINWpFL1ZGanhCdnNKTWl3bWpsb2pTNXdUdk8veFJhcEpMMDNzUTJvdmNEZzBhU2J3WEY1U3QraXlVS1BLNi80bXdmYkFKZEdrbUtOcVZweW1NdjJmTEV1cnIvSU5OdEVwOTl5dmZQUU00QjU2VE52T3A4cTZyNEREbFpqYlZlaXVqeUdBY25JMWF4VGdPS3VZPQ==\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0105, requestHost0105, requestPort0105, requestHeader0105, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AIqP+6LL8gcymXRQQU58tRefTQlwtcwqKZPHPAn9NAOwexIvWBeWsSUf0iAie2kTdMDXPziVr43mhL1BwgDoJzhWVEREMWVUVTFqRjJRRmdsd3B6aDJNYkRaby92S0FkOTlpejVBSVRBKzh1dHNKQk1PMjJNMHJ2MGxSU1FSbjhybTdzOUU2RHNGdTZ2Q2ZjMXQ0WndJVlFVNld5ekZ1Y2dZd2hIQUFHdkQzaGV4M21EWWt1cDJ3Sit0amdoNFNXbU1nOU1hWjQ1bzJNRkNzMkRCanhCUklSNVRINWpFL1ZGanhCdnNKTWl3bWpsb2pTNXdUdk8veFJhcEpMMDNzUTJvdmNEZzBhU2J3WEY1U3QraXlVS1BLNi80bXdmYkFKZEdrbUtOcVZweW1NdjJmTEV1cnIvSU5OdEVwOTl5dmZQUU00QjU2VE52T3A4cTZyNEREbFpqYlZlaXVqeUdBY25JMWF4VGdPS3VZPQ==", TOKEN_157);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0105 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 446
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [105] <- Index 105
		if(replayMode)
		{
			long proxyDataRecordId =1610512923094L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		// setup var extractor for 'XSRF_TOKEN_174'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0105_1 = new BoundaryBasedExtractorItem( "XSRF_TOKEN=" , ";",1,false,false,0,false);
		boundaryBasedHeaderExtractorItem0105_1.setSaveLength(0);
		boundaryBasedHeaderExtractorItem0105_1.setSaveOffset(0);
		boundaryBasedHeaderExtractorItem0105_1.setOccurrenceAll(false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0105_1);

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'XSRF_TOKEN_174'
			XSRF_TOKEN_174 = boundaryBasedHeaderExtractorItem0105_1.getResultText();
			log("<<< XSRF_TOKEN_174 = " + XSRF_TOKEN_174);
			loopVarMap.put("XSRF_TOKEN_174", XSRF_TOKEN_174);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && XSRF_TOKEN_174!= null && XSRF_TOKEN_174.trim().length() == 0)
			{
				XSRF_TOKEN_174 = "";
				log("runtime note: the extraction of a new value for the variable 'XSRF_TOKEN_174' ends up with an empty string - a substitute value was set");
				log("<<< XSRF_TOKEN_174 = " + XSRF_TOKEN_174);
				loopVarMap.put("XSRF_TOKEN_174", XSRF_TOKEN_174);
			}
		}
		catch (Exception e) { XSRF_TOKEN_174 = null; log(e); }
		if (XSRF_TOKEN_174 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'XSRF_TOKEN_174' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [106] <- WEB ADMIN Index 106 ---
		String requestProt0106 = "https";
		String requestHost0106 = "siteintercept.qualtrics.com";
		int    requestPort0106 = 443;
		String requestFile0106 = "/WRSiteInterceptEngine/Targeting.php" +
				"?Q_ZoneID=ZN_5vdFFa9tF5IH83P" +
				"&Q_CLIENTVERSION=1.41.0" +
				"&Q_CLIENTTYPE=web";
		String requestContent0106 = 
				"Q_LOC=https%3A%2F%2Fmso.morganstanleyclientserv.com%2Fatrium%2F%23%2Ffinwell";
		String requestHeader0106 = "POST " + requestFile0106 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0106.getBytes().length + "\r\n" + 		// Content-Length: 76
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://mso.morganstanleyclientserv.com\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0106, requestHost0106, requestPort0106, requestHeader0106, requestContent0106.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0106 = null;		// support garbage collector to reduce memory
		requestContent0106 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1066
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [106] <- Index 106
		if(replayMode)
		{
			long proxyDataRecordId =1610512923156L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [107] <- WEB ADMIN Index 107 ---
		log();
		log("# title: LL Cross-domain HTML5 data server");
		String requestProt0107 = "https";
		String requestHost0107 = "public.cobrowse.oraclecloud.com";
		int    requestPort0107 = 443;
		String requestFile0107 = "/rely/storage/ll_storage_html5.html" +
				"?context=s80cwvmfo7a" +
				"&version=20190515";
		String requestHeader0107 = "GET " + requestFile0107 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: public.cobrowse.oraclecloud.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0107, requestHost0107, requestPort0107, requestHeader0107, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0107 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 11216
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [107] <- Index 107
		if(replayMode)
		{
			long proxyDataRecordId =1610512923167L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [108] <- WEB ADMIN Index 108 ---
		String requestProt0108 = "https";
		String requestHost0108 = "public.cobrowse.oraclecloud.com";
		int    requestPort0108 = 443;
		String requestFile0108 = "/rely/client/ui/hostui_animation.js" +
				"?rnd=0.1160894023218555";
		String requestHeader0108 = "GET " + requestFile0108 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: public.cobrowse.oraclecloud.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0108, requestHost0108, requestPort0108, requestHeader0108, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0108 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6132
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [108] <- Index 108
		if(replayMode)
		{
			long proxyDataRecordId =1610512923181L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [109] <- WEB ADMIN Index 109 ---
		String requestProt0109 = "https";
		String requestHost0109 = "siteintercept.qualtrics.com";
		int    requestPort0109 = 443;
		String requestFile0109 = "/dxjsmodule/CoreModule.js" +
				"?Q_CLIENTVERSION=1.41.0" +
				"&Q_CLIENTTYPE=web";
		String requestHeader0109 = "GET " + requestFile0109 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0109, requestHost0109, requestPort0109, requestHeader0109, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0109 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 27183
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [109] <- Index 109
		if(replayMode)
		{
			long proxyDataRecordId =1610512923262L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [110] <- WEB ADMIN Index 110 ---
		String requestProt0110 = "https";
		String requestHost0110 = "siteintercept.qualtrics.com";
		int    requestPort0110 = 443;
		String requestFile0110 = "/dxjsmodule/14.3bdbf63f1121552ac2ba.chunk.js" +
				"?Q_CLIENTVERSION=1.41.0" +
				"&Q_CLIENTTYPE=web";
		String requestHeader0110 = "GET " + requestFile0110 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0110, requestHost0110, requestPort0110, requestHeader0110, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0110 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 757
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [110] <- Index 110
		if(replayMode)
		{
			long proxyDataRecordId =1610512923419L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [111] <- WEB ADMIN Index 111 ---
		String requestProt0111 = "https";
		String requestHost0111 = "siteintercept.qualtrics.com";
		int    requestPort0111 = 443;
		String requestFile0111 = "/dxjsmodule/LinkModule.js" +
				"?Q_CLIENTVERSION=1.41.0" +
				"&Q_CLIENTTYPE=web";
		String requestHeader0111 = "GET " + requestFile0111 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0111, requestHost0111, requestPort0111, requestHeader0111, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0111 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 725
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [111] <- Index 111
		if(replayMode)
		{
			long proxyDataRecordId =1610512923467L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [112] <- WEB ADMIN Index 112 ---
		String requestProt0112 = "https";
		String requestHost0112 = "siteintercept.qualtrics.com";
		int    requestPort0112 = 443;
		String requestFile0112 = "/dxjsmodule/EmbeddedTargetModule.js" +
				"?Q_CLIENTVERSION=1.41.0" +
				"&Q_CLIENTTYPE=web";
		String requestHeader0112 = "GET " + requestFile0112 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0112, requestHost0112, requestPort0112, requestHeader0112, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0112 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2461
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [112] <- Index 112
		if(replayMode)
		{
			long proxyDataRecordId =1610512923474L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [113] <- WEB ADMIN Index 113 ---
		String requestProt0113 = "https";
		String requestHost0113 = "siteintercept.qualtrics.com";
		int    requestPort0113 = 443;
		String requestFile0113 = "/dxjsmodule/1.6c2a7e2d1ddb99db1dfa.chunk.js" +
				"?Q_CLIENTVERSION=1.41.0" +
				"&Q_CLIENTTYPE=web";
		String requestHeader0113 = "GET " + requestFile0113 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0113, requestHost0113, requestPort0113, requestHeader0113, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0113 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5798
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [113] <- Index 113
		if(replayMode)
		{
			long proxyDataRecordId =1610512923477L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [114] <- WEB ADMIN Index 114 ---
		String requestProt0114 = "https";
		String requestHost0114 = "siteintercept.qualtrics.com";
		int    requestPort0114 = 443;
		String requestFile0114 = "/WRSiteInterceptEngine/Asset.php" +
				"?Module=CR_8G6TdSJYo9DSrmR" +
				"&Version=3" +
				"&Q_InterceptID=SI_6rMRnC0V4XkgdHn" +
				"&Q_ORIGIN=https://mso.morganstanleyclientserv.com" +
				"&Q_CLIENTVERSION=1.41.0" +
				"&Q_CLIENTTYPE=web";
		String requestHeader0114 = "GET " + requestFile0114 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://mso.morganstanleyclientserv.com\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0114, requestHost0114, requestPort0114, requestHeader0114, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0114 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 166
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [114] <- Index 114
		if(replayMode)
		{
			long proxyDataRecordId =1610512923485L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [115] <- WEB ADMIN Index 115 ---
		String requestProt0115 = "https";
		String requestHost0115 = "siteintercept.qualtrics.com";
		int    requestPort0115 = 443;
		String requestFile0115 = "/WRSiteInterceptEngine/Asset.php" +
				"?Module=SI_6rMRnC0V4XkgdHn" +
				"&Version=5" +
				"&Q_ORIGIN=https://mso.morganstanleyclientserv.com" +
				"&Q_CLIENTVERSION=1.41.0" +
				"&Q_CLIENTTYPE=web";
		String requestHeader0115 = "GET " + requestFile0115 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://mso.morganstanleyclientserv.com\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0115, requestHost0115, requestPort0115, requestHeader0115, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0115 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 847
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [115] <- Index 115
		if(replayMode)
		{
			long proxyDataRecordId =1610512923488L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [116] <- WEB ADMIN Index 116 ---
		String requestProt0116 = "https";
		String requestHost0116 = "public.cobrowse.oraclecloud.com";
		int    requestPort0116 = 443;
		String requestFile0116 = "/rely/client/ui/hostui_tc.js" +
				"?rnd=0.02527470720755054";
		String requestHeader0116 = "GET " + requestFile0116 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: public.cobrowse.oraclecloud.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0116, requestHost0116, requestPort0116, requestHeader0116, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0116 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 9242
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [116] <- Index 116
		if(replayMode)
		{
			long proxyDataRecordId =1610512923758L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [117] <- WEB ADMIN Index 117 ---
		String requestProt0117 = "https";
		String requestHost0117 = "public.cobrowse.oraclecloud.com";
		int    requestPort0117 = 443;
		String requestFile0117 = "/rely/resources/images/v4llpanel/v4llpanelpreload.gif";
		String requestHeader0117 = "GET " + requestFile0117 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: public.cobrowse.oraclecloud.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0117, requestHost0117, requestPort0117, requestHeader0117, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0117 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 4432
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [117] <- Index 117
		if(replayMode)
		{
			long proxyDataRecordId =1610512923858L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [118] <- WEB ADMIN Index 118 ---
		String requestProt0118 = "https";
		String requestHost0118 = "mso.morganstanleyclientserv.com";
		int    requestPort0118 = 443;
		String requestFile0118 = "/shell/handler/restproxy/sdbaccountsal/api/EmailVerificationStatus" +
				"?appId=CS-FW" +
				"&RequestID=1815-bf36-a3ec-771c-c29c-33ad-64c0-7a8e" +
				"&SeqID=0008";
		String requestHeader0118 = "GET " + requestFile0118 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-XSRF-TOKEN: aOAqhLkhSdCJNYetncT9JG01YTjRSJTDCc/SNpYeHom0tx+kSyOcsYCUXJcTvTsCbv+qITWoof0l37UpcyP4rlMwczRKcnk0VzQxV0dyK0Q4ZkticjYyMUw3K1gvY0Q4QXJIMlRyS25haVE5eGExVHV3dzNMdHljdXhJWUg1Wnp4Ykx1dUlIWFZ6MWtWTVpINVNsei83L3VLMEkwdVBudUtaYXFNeENaTEdtb0V0cktsUDJPQTJBUkZ4TmFRYktYMWg4Tk1RRDlSMnR2b1d5YzdsK0ZXVTk5cGllNmlKZmMvSTlMbDg3VlR0T1g3QWxSLyt0eGoyQklNV0NiOGk1OXJYQXUwMzFyRTVtelY2UnZ1MGRwczYveFVDaHg2VXZwTUswMFVkdVpHb29SbzltWmZRa1FXQ2l0emlSTVJFUEpQUEtIMXBOQnRWZDMwM0I2ZkN3WVdEQjU5aUI2TmQvRS90ZHh6SGpZcng4PQ==\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0118, requestHost0118, requestPort0118, requestHeader0118, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("aOAqhLkhSdCJNYetncT9JG01YTjRSJTDCc/SNpYeHom0tx+kSyOcsYCUXJcTvTsCbv+qITWoof0l37UpcyP4rlMwczRKcnk0VzQxV0dyK0Q4ZkticjYyMUw3K1gvY0Q4QXJIMlRyS25haVE5eGExVHV3dzNMdHljdXhJWUg1Wnp4Ykx1dUlIWFZ6MWtWTVpINVNsei83L3VLMEkwdVBudUtaYXFNeENaTEdtb0V0cktsUDJPQTJBUkZ4TmFRYktYMWg4Tk1RRDlSMnR2b1d5YzdsK0ZXVTk5cGllNmlKZmMvSTlMbDg3VlR0T1g3QWxSLyt0eGoyQklNV0NiOGk1OXJYQXUwMzFyRTVtelY2UnZ1MGRwczYveFVDaHg2VXZwTUswMFVkdVpHb29SbzltWmZRa1FXQ2l0emlSTVJFUEpQUEtIMXBOQnRWZDMwM0I2ZkN3WVdEQjU5aUI2TmQvRS90ZHh6SGpZcng4PQ==", XSRF_TOKEN_174);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0118 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 117
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [118] <- Index 118
		if(replayMode)
		{
			long proxyDataRecordId =1610512923906L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		// setup var extractor for 'XSRF_TOKEN_195'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0118_1 = new BoundaryBasedExtractorItem( "XSRF_TOKEN=" , ";",1,false,false,0,false);
		boundaryBasedHeaderExtractorItem0118_1.setSaveLength(0);
		boundaryBasedHeaderExtractorItem0118_1.setSaveOffset(0);
		boundaryBasedHeaderExtractorItem0118_1.setOccurrenceAll(false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0118_1);

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'XSRF_TOKEN_195'
			XSRF_TOKEN_195 = boundaryBasedHeaderExtractorItem0118_1.getResultText();
			log("<<< XSRF_TOKEN_195 = " + XSRF_TOKEN_195);
			loopVarMap.put("XSRF_TOKEN_195", XSRF_TOKEN_195);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && XSRF_TOKEN_195!= null && XSRF_TOKEN_195.trim().length() == 0)
			{
				XSRF_TOKEN_195 = "";
				log("runtime note: the extraction of a new value for the variable 'XSRF_TOKEN_195' ends up with an empty string - a substitute value was set");
				log("<<< XSRF_TOKEN_195 = " + XSRF_TOKEN_195);
				loopVarMap.put("XSRF_TOKEN_195", XSRF_TOKEN_195);
			}
		}
		catch (Exception e) { XSRF_TOKEN_195 = null; log(e); }
		if (XSRF_TOKEN_195 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'XSRF_TOKEN_195' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [119] <- WEB ADMIN Index 119 ---
		String requestProt0119 = "https";
		String requestHost0119 = "mso.morganstanleyclientserv.com";
		int    requestPort0119 = 443;
		String requestFile0119 = "/publiccontent/finwell/app-constants.json" +
				"?RequestID=4164-561c-1c96-7eac-0833-1d24-8703-8c70" +
				"&SeqID=0009";
		String requestHeader0119 = "GET " + requestFile0119 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-XSRF-TOKEN: udPpb3HudUhXzreg8D64YN61T7aHeQYlmSIxkd6VLjOf/sSsJtSUWwmetqD0LYyYAUBBg3KheE4h4Ur2LippHHYraEd4QkpGNVAvTHViK0hiRWdoaXVMNmkzdnZrbWh0TENKMmU3UVhoOTJkRGYrYXR6djFKcnhlT05OejdYMDRTaWlGVFRlbEJmRXJoR3ZLMUFmWGZoUkNhUVFzYUY3MDBWbnAybmNoM1lUc2szVndzRDBqRFFiaEthWnlKSGo5KzB6SFZaZmZNN1psaGZpc29QK2RyckhqQWhlN2Y2OTZodUZYaTU3Q2ZUUklXSldmTmQwZkN4cnNZdW02dVVLM0JveHZlYVlVNmhWUGdkQU1RUjl2YXFjQnVPU3RiWisvVzhmTmlUT293dUFhb1pHNHNTUURnVmhpZTl4SWR0RjRRbm54ZVJnR3Q2c00zcnEvYlBLaDBhTFZqT3N3alkyMXZRWHhOWW1xWXpvPQ==\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0119, requestHost0119, requestPort0119, requestHeader0119, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("udPpb3HudUhXzreg8D64YN61T7aHeQYlmSIxkd6VLjOf/sSsJtSUWwmetqD0LYyYAUBBg3KheE4h4Ur2LippHHYraEd4QkpGNVAvTHViK0hiRWdoaXVMNmkzdnZrbWh0TENKMmU3UVhoOTJkRGYrYXR6djFKcnhlT05OejdYMDRTaWlGVFRlbEJmRXJoR3ZLMUFmWGZoUkNhUVFzYUY3MDBWbnAybmNoM1lUc2szVndzRDBqRFFiaEthWnlKSGo5KzB6SFZaZmZNN1psaGZpc29QK2RyckhqQWhlN2Y2OTZodUZYaTU3Q2ZUUklXSldmTmQwZkN4cnNZdW02dVVLM0JveHZlYVlVNmhWUGdkQU1RUjl2YXFjQnVPU3RiWisvVzhmTmlUT293dUFhb1pHNHNTUURnVmhpZTl4SWR0RjRRbm54ZVJnR3Q2c00zcnEvYlBLaDBhTFZqT3N3alkyMXZRWHhOWW1xWXpvPQ==", XSRF_TOKEN_195);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0119 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2327
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [119] <- Index 119
		if(replayMode)
		{
			long proxyDataRecordId =1610512924200L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [120] <- WEB ADMIN Index 120 ---
		String requestProt0120 = "https";
		String requestHost0120 = "mso.morganstanleyclientserv.com";
		int    requestPort0120 = 443;
		String requestFile0120 = "/shell/handler/restproxy/pfp/api/FinwellAssessment/AssessmentResponse" +
				"?RequestID=6ad5-bf77-1523-7fd1-3baa-cce5-4e8a-e9aa" +
				"&SeqID=0010";
		String requestHeader0120 = "GET " + requestFile0120 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-XSRF-TOKEN: udPpb3HudUhXzreg8D64YN61T7aHeQYlmSIxkd6VLjOf/sSsJtSUWwmetqD0LYyYAUBBg3KheE4h4Ur2LippHHYraEd4QkpGNVAvTHViK0hiRWdoaXVMNmkzdnZrbWh0TENKMmU3UVhoOTJkRGYrYXR6djFKcnhlT05OejdYMDRTaWlGVFRlbEJmRXJoR3ZLMUFmWGZoUkNhUVFzYUY3MDBWbnAybmNoM1lUc2szVndzRDBqRFFiaEthWnlKSGo5KzB6SFZaZmZNN1psaGZpc29QK2RyckhqQWhlN2Y2OTZodUZYaTU3Q2ZUUklXSldmTmQwZkN4cnNZdW02dVVLM0JveHZlYVlVNmhWUGdkQU1RUjl2YXFjQnVPU3RiWisvVzhmTmlUT293dUFhb1pHNHNTUURnVmhpZTl4SWR0RjRRbm54ZVJnR3Q2c00zcnEvYlBLaDBhTFZqT3N3alkyMXZRWHhOWW1xWXpvPQ==\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0120, requestHost0120, requestPort0120, requestHeader0120, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("udPpb3HudUhXzreg8D64YN61T7aHeQYlmSIxkd6VLjOf/sSsJtSUWwmetqD0LYyYAUBBg3KheE4h4Ur2LippHHYraEd4QkpGNVAvTHViK0hiRWdoaXVMNmkzdnZrbWh0TENKMmU3UVhoOTJkRGYrYXR6djFKcnhlT05OejdYMDRTaWlGVFRlbEJmRXJoR3ZLMUFmWGZoUkNhUVFzYUY3MDBWbnAybmNoM1lUc2szVndzRDBqRFFiaEthWnlKSGo5KzB6SFZaZmZNN1psaGZpc29QK2RyckhqQWhlN2Y2OTZodUZYaTU3Q2ZUUklXSldmTmQwZkN4cnNZdW02dVVLM0JveHZlYVlVNmhWUGdkQU1RUjl2YXFjQnVPU3RiWisvVzhmTmlUT293dUFhb1pHNHNTUURnVmhpZTl4SWR0RjRRbm54ZVJnR3Q2c00zcnEvYlBLaDBhTFZqT3N3alkyMXZRWHhOWW1xWXpvPQ==", XSRF_TOKEN_195);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0120 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 4549
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [120] <- Index 120
		if(replayMode)
		{
			long proxyDataRecordId =1610512924251L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3_3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #3 (fragment 4 of 4)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [121] <- WEB ADMIN Index 121 ---
		String requestProt0121 = "https";
		String requestHost0121 = "mso.morganstanleyclientserv.com";
		int    requestPort0121 = 443;
		String requestFile0121 = "/shell/handler/restproxy/finwell/api/TakeActions" +
				"?RequestID=1e25-1221-48f9-cd61-8302-d29e-a682-72f7" +
				"&SeqID=0011";
		String requestHeader0121 = "GET " + requestFile0121 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-XSRF-TOKEN: udPpb3HudUhXzreg8D64YN61T7aHeQYlmSIxkd6VLjOf/sSsJtSUWwmetqD0LYyYAUBBg3KheE4h4Ur2LippHHYraEd4QkpGNVAvTHViK0hiRWdoaXVMNmkzdnZrbWh0TENKMmU3UVhoOTJkRGYrYXR6djFKcnhlT05OejdYMDRTaWlGVFRlbEJmRXJoR3ZLMUFmWGZoUkNhUVFzYUY3MDBWbnAybmNoM1lUc2szVndzRDBqRFFiaEthWnlKSGo5KzB6SFZaZmZNN1psaGZpc29QK2RyckhqQWhlN2Y2OTZodUZYaTU3Q2ZUUklXSldmTmQwZkN4cnNZdW02dVVLM0JveHZlYVlVNmhWUGdkQU1RUjl2YXFjQnVPU3RiWisvVzhmTmlUT293dUFhb1pHNHNTUURnVmhpZTl4SWR0RjRRbm54ZVJnR3Q2c00zcnEvYlBLaDBhTFZqT3N3alkyMXZRWHhOWW1xWXpvPQ==\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0121, requestHost0121, requestPort0121, requestHeader0121, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("udPpb3HudUhXzreg8D64YN61T7aHeQYlmSIxkd6VLjOf/sSsJtSUWwmetqD0LYyYAUBBg3KheE4h4Ur2LippHHYraEd4QkpGNVAvTHViK0hiRWdoaXVMNmkzdnZrbWh0TENKMmU3UVhoOTJkRGYrYXR6djFKcnhlT05OejdYMDRTaWlGVFRlbEJmRXJoR3ZLMUFmWGZoUkNhUVFzYUY3MDBWbnAybmNoM1lUc2szVndzRDBqRFFiaEthWnlKSGo5KzB6SFZaZmZNN1psaGZpc29QK2RyckhqQWhlN2Y2OTZodUZYaTU3Q2ZUUklXSldmTmQwZkN4cnNZdW02dVVLM0JveHZlYVlVNmhWUGdkQU1RUjl2YXFjQnVPU3RiWisvVzhmTmlUT293dUFhb1pHNHNTUURnVmhpZTl4SWR0RjRRbm54ZVJnR3Q2c00zcnEvYlBLaDBhTFZqT3N3alkyMXZRWHhOWW1xWXpvPQ==", XSRF_TOKEN_195);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0121 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 721
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [121] <- Index 121
		if(replayMode)
		{
			long proxyDataRecordId =1610512924260L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		// setup var extractor for 'XSRF_TOKEN_198'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0121_1 = new BoundaryBasedExtractorItem( "XSRF_TOKEN=" , ";",1,false,false,0,false);
		boundaryBasedHeaderExtractorItem0121_1.setSaveLength(0);
		boundaryBasedHeaderExtractorItem0121_1.setSaveOffset(0);
		boundaryBasedHeaderExtractorItem0121_1.setOccurrenceAll(false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0121_1);

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'XSRF_TOKEN_198'
			XSRF_TOKEN_198 = boundaryBasedHeaderExtractorItem0121_1.getResultText();
			log("<<< XSRF_TOKEN_198 = " + XSRF_TOKEN_198);
			loopVarMap.put("XSRF_TOKEN_198", XSRF_TOKEN_198);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && XSRF_TOKEN_198!= null && XSRF_TOKEN_198.trim().length() == 0)
			{
				XSRF_TOKEN_198 = "";
				log("runtime note: the extraction of a new value for the variable 'XSRF_TOKEN_198' ends up with an empty string - a substitute value was set");
				log("<<< XSRF_TOKEN_198 = " + XSRF_TOKEN_198);
				loopVarMap.put("XSRF_TOKEN_198", XSRF_TOKEN_198);
			}
		}
		catch (Exception e) { XSRF_TOKEN_198 = null; log(e); }
		if (XSRF_TOKEN_198 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'XSRF_TOKEN_198' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [122] <- WEB ADMIN Index 122 ---
		String requestProt0122 = "https";
		String requestHost0122 = "mso.morganstanleyclientserv.com";
		int    requestPort0122 = 443;
		String requestFile0122 = "/shell/handler/restproxy/finwell/api/UpcomingEvents" +
				"?RequestID=c52b-f552-7691-ef48-0678-dcc7-4d7b-cad9" +
				"&SeqID=0013";
		String requestHeader0122 = "GET " + requestFile0122 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-XSRF-TOKEN: udPpb3HudUhXzreg8D64YN61T7aHeQYlmSIxkd6VLjOf/sSsJtSUWwmetqD0LYyYAUBBg3KheE4h4Ur2LippHHYraEd4QkpGNVAvTHViK0hiRWdoaXVMNmkzdnZrbWh0TENKMmU3UVhoOTJkRGYrYXR6djFKcnhlT05OejdYMDRTaWlGVFRlbEJmRXJoR3ZLMUFmWGZoUkNhUVFzYUY3MDBWbnAybmNoM1lUc2szVndzRDBqRFFiaEthWnlKSGo5KzB6SFZaZmZNN1psaGZpc29QK2RyckhqQWhlN2Y2OTZodUZYaTU3Q2ZUUklXSldmTmQwZkN4cnNZdW02dVVLM0JveHZlYVlVNmhWUGdkQU1RUjl2YXFjQnVPU3RiWisvVzhmTmlUT293dUFhb1pHNHNTUURnVmhpZTl4SWR0RjRRbm54ZVJnR3Q2c00zcnEvYlBLaDBhTFZqT3N3alkyMXZRWHhOWW1xWXpvPQ==\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0122, requestHost0122, requestPort0122, requestHeader0122, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("udPpb3HudUhXzreg8D64YN61T7aHeQYlmSIxkd6VLjOf/sSsJtSUWwmetqD0LYyYAUBBg3KheE4h4Ur2LippHHYraEd4QkpGNVAvTHViK0hiRWdoaXVMNmkzdnZrbWh0TENKMmU3UVhoOTJkRGYrYXR6djFKcnhlT05OejdYMDRTaWlGVFRlbEJmRXJoR3ZLMUFmWGZoUkNhUVFzYUY3MDBWbnAybmNoM1lUc2szVndzRDBqRFFiaEthWnlKSGo5KzB6SFZaZmZNN1psaGZpc29QK2RyckhqQWhlN2Y2OTZodUZYaTU3Q2ZUUklXSldmTmQwZkN4cnNZdW02dVVLM0JveHZlYVlVNmhWUGdkQU1RUjl2YXFjQnVPU3RiWisvVzhmTmlUT293dUFhb1pHNHNTUURnVmhpZTl4SWR0RjRRbm54ZVJnR3Q2c00zcnEvYlBLaDBhTFZqT3N3alkyMXZRWHhOWW1xWXpvPQ==", XSRF_TOKEN_195);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0122 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 535
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [122] <- Index 122
		if(replayMode)
		{
			long proxyDataRecordId =1610512924285L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [123] <- WEB ADMIN Index 123 ---
		String requestProt0123 = "https";
		String requestHost0123 = "mso.morganstanleyclientserv.com";
		int    requestPort0123 = 443;
		String requestFile0123 = "/shell/handler/restproxy/finwell/api/Journey" +
				"?RequestID=da1c-ba47-fde2-7b43-c9ba-0ea6-cbe7-01b4" +
				"&SeqID=0014";
		String requestHeader0123 = "GET " + requestFile0123 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-XSRF-TOKEN: udPpb3HudUhXzreg8D64YN61T7aHeQYlmSIxkd6VLjOf/sSsJtSUWwmetqD0LYyYAUBBg3KheE4h4Ur2LippHHYraEd4QkpGNVAvTHViK0hiRWdoaXVMNmkzdnZrbWh0TENKMmU3UVhoOTJkRGYrYXR6djFKcnhlT05OejdYMDRTaWlGVFRlbEJmRXJoR3ZLMUFmWGZoUkNhUVFzYUY3MDBWbnAybmNoM1lUc2szVndzRDBqRFFiaEthWnlKSGo5KzB6SFZaZmZNN1psaGZpc29QK2RyckhqQWhlN2Y2OTZodUZYaTU3Q2ZUUklXSldmTmQwZkN4cnNZdW02dVVLM0JveHZlYVlVNmhWUGdkQU1RUjl2YXFjQnVPU3RiWisvVzhmTmlUT293dUFhb1pHNHNTUURnVmhpZTl4SWR0RjRRbm54ZVJnR3Q2c00zcnEvYlBLaDBhTFZqT3N3alkyMXZRWHhOWW1xWXpvPQ==\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0123, requestHost0123, requestPort0123, requestHeader0123, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("udPpb3HudUhXzreg8D64YN61T7aHeQYlmSIxkd6VLjOf/sSsJtSUWwmetqD0LYyYAUBBg3KheE4h4Ur2LippHHYraEd4QkpGNVAvTHViK0hiRWdoaXVMNmkzdnZrbWh0TENKMmU3UVhoOTJkRGYrYXR6djFKcnhlT05OejdYMDRTaWlGVFRlbEJmRXJoR3ZLMUFmWGZoUkNhUVFzYUY3MDBWbnAybmNoM1lUc2szVndzRDBqRFFiaEthWnlKSGo5KzB6SFZaZmZNN1psaGZpc29QK2RyckhqQWhlN2Y2OTZodUZYaTU3Q2ZUUklXSldmTmQwZkN4cnNZdW02dVVLM0JveHZlYVlVNmhWUGdkQU1RUjl2YXFjQnVPU3RiWisvVzhmTmlUT293dUFhb1pHNHNTUURnVmhpZTl4SWR0RjRRbm54ZVJnR3Q2c00zcnEvYlBLaDBhTFZqT3N3alkyMXZRWHhOWW1xWXpvPQ==", XSRF_TOKEN_195);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0123 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 9809
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [123] <- Index 123
		if(replayMode)
		{
			long proxyDataRecordId =1610512924298L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		// setup var extractor for 'TOKEN_200'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0123_1 = new BoundaryBasedExtractorItem( "TOKEN:" , "Con",1,false,false,0,false);
		boundaryBasedHeaderExtractorItem0123_1.setSaveLength(0);
		boundaryBasedHeaderExtractorItem0123_1.setSaveOffset(0);
		boundaryBasedHeaderExtractorItem0123_1.setOccurrenceAll(false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0123_1);

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'TOKEN_200'
			TOKEN_200 = boundaryBasedHeaderExtractorItem0123_1.getResultText();
			log("<<< TOKEN_200 = " + TOKEN_200);
			loopVarMap.put("TOKEN_200", TOKEN_200);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && TOKEN_200!= null && TOKEN_200.trim().length() == 0)
			{
				TOKEN_200 = "";
				log("runtime note: the extraction of a new value for the variable 'TOKEN_200' ends up with an empty string - a substitute value was set");
				log("<<< TOKEN_200 = " + TOKEN_200);
				loopVarMap.put("TOKEN_200", TOKEN_200);
			}
		}
		catch (Exception e) { TOKEN_200 = null; log(e); }
		if (TOKEN_200 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'TOKEN_200' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [124] <- WEB ADMIN Index 124 ---
		String requestProt0124 = "https";
		String requestHost0124 = "mso.morganstanleyclientserv.com";
		int    requestPort0124 = 443;
		String requestFile0124 = "/shell/handler/restproxy/finwell/api/CompanyBenefits" +
				"?RequestID=2dac-03fd-4a15-3476-ced6-bfce-5433-78c5" +
				"&SeqID=0015";
		String requestHeader0124 = "GET " + requestFile0124 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-XSRF-TOKEN: udPpb3HudUhXzreg8D64YN61T7aHeQYlmSIxkd6VLjOf/sSsJtSUWwmetqD0LYyYAUBBg3KheE4h4Ur2LippHHYraEd4QkpGNVAvTHViK0hiRWdoaXVMNmkzdnZrbWh0TENKMmU3UVhoOTJkRGYrYXR6djFKcnhlT05OejdYMDRTaWlGVFRlbEJmRXJoR3ZLMUFmWGZoUkNhUVFzYUY3MDBWbnAybmNoM1lUc2szVndzRDBqRFFiaEthWnlKSGo5KzB6SFZaZmZNN1psaGZpc29QK2RyckhqQWhlN2Y2OTZodUZYaTU3Q2ZUUklXSldmTmQwZkN4cnNZdW02dVVLM0JveHZlYVlVNmhWUGdkQU1RUjl2YXFjQnVPU3RiWisvVzhmTmlUT293dUFhb1pHNHNTUURnVmhpZTl4SWR0RjRRbm54ZVJnR3Q2c00zcnEvYlBLaDBhTFZqT3N3alkyMXZRWHhOWW1xWXpvPQ==\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0124, requestHost0124, requestPort0124, requestHeader0124, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("udPpb3HudUhXzreg8D64YN61T7aHeQYlmSIxkd6VLjOf/sSsJtSUWwmetqD0LYyYAUBBg3KheE4h4Ur2LippHHYraEd4QkpGNVAvTHViK0hiRWdoaXVMNmkzdnZrbWh0TENKMmU3UVhoOTJkRGYrYXR6djFKcnhlT05OejdYMDRTaWlGVFRlbEJmRXJoR3ZLMUFmWGZoUkNhUVFzYUY3MDBWbnAybmNoM1lUc2szVndzRDBqRFFiaEthWnlKSGo5KzB6SFZaZmZNN1psaGZpc29QK2RyckhqQWhlN2Y2OTZodUZYaTU3Q2ZUUklXSldmTmQwZkN4cnNZdW02dVVLM0JveHZlYVlVNmhWUGdkQU1RUjl2YXFjQnVPU3RiWisvVzhmTmlUT293dUFhb1pHNHNTUURnVmhpZTl4SWR0RjRRbm54ZVJnR3Q2c00zcnEvYlBLaDBhTFZqT3N3alkyMXZRWHhOWW1xWXpvPQ==", XSRF_TOKEN_195);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0124 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1384
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [124] <- Index 124
		if(replayMode)
		{
			long proxyDataRecordId =1610512924305L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		// setup var extractor for 'TOKEN_201'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0124_1 = new BoundaryBasedExtractorItem( "TOKEN:" , "Con",1,false,false,0,false);
		boundaryBasedHeaderExtractorItem0124_1.setSaveLength(0);
		boundaryBasedHeaderExtractorItem0124_1.setSaveOffset(0);
		boundaryBasedHeaderExtractorItem0124_1.setOccurrenceAll(false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0124_1);

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'TOKEN_201'
			TOKEN_201 = boundaryBasedHeaderExtractorItem0124_1.getResultText();
			log("<<< TOKEN_201 = " + TOKEN_201);
			loopVarMap.put("TOKEN_201", TOKEN_201);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && TOKEN_201!= null && TOKEN_201.trim().length() == 0)
			{
				TOKEN_201 = "";
				log("runtime note: the extraction of a new value for the variable 'TOKEN_201' ends up with an empty string - a substitute value was set");
				log("<<< TOKEN_201 = " + TOKEN_201);
				loopVarMap.put("TOKEN_201", TOKEN_201);
			}
		}
		catch (Exception e) { TOKEN_201 = null; log(e); }
		if (TOKEN_201 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'TOKEN_201' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [125] <- WEB ADMIN Index 125 ---
		String requestProt0125 = "https";
		String requestHost0125 = "starget.morganstanley.com";
		int    requestPort0125 = 443;
		String requestFile0125 = "/rest/v2/batchmbox" +
				"?client=morganstanleyandco" +
				"&sessionId=a1ea-8772-4dd7-3569-ffd4-db39-908e-bf6b" +
				"&RequestID=3419-a087-e71f-5a73-6b9c-c05b-2eca-9857" +
				"&SeqID=0012";
		String requestHeader0125 = "OPTIONS " + requestFile0125 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: starget.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: */*\r\n" + 
				"Access-Control-Request-Method: POST\r\n" + 
				"Access-Control-Request-Headers: content-type,x-device-footprint,x-xsrf-token\r\n" + 
				"Origin: https://mso.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0125, requestHost0125, requestPort0125, requestHeader0125, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0125 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [125] <- Index 125
		if(replayMode)
		{
			long proxyDataRecordId =1610512924323L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [126] <- WEB ADMIN Index 126 ---
		String requestProt0126 = "https";
		String requestHost0126 = "mso.morganstanleyclientserv.com";
		int    requestPort0126 = 443;
		String requestFile0126 = "/securecontent/adobe/AdobeMapFile.json" +
				"?v=1202021";
		String requestHeader0126 = "GET " + requestFile0126 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-XSRF-TOKEN: udPpb3HudUhXzreg8D64YN61T7aHeQYlmSIxkd6VLjOf/sSsJtSUWwmetqD0LYyYAUBBg3KheE4h4Ur2LippHHYraEd4QkpGNVAvTHViK0hiRWdoaXVMNmkzdnZrbWh0TENKMmU3UVhoOTJkRGYrYXR6djFKcnhlT05OejdYMDRTaWlGVFRlbEJmRXJoR3ZLMUFmWGZoUkNhUVFzYUY3MDBWbnAybmNoM1lUc2szVndzRDBqRFFiaEthWnlKSGo5KzB6SFZaZmZNN1psaGZpc29QK2RyckhqQWhlN2Y2OTZodUZYaTU3Q2ZUUklXSldmTmQwZkN4cnNZdW02dVVLM0JveHZlYVlVNmhWUGdkQU1RUjl2YXFjQnVPU3RiWisvVzhmTmlUT293dUFhb1pHNHNTUURnVmhpZTl4SWR0RjRRbm54ZVJnR3Q2c00zcnEvYlBLaDBhTFZqT3N3alkyMXZRWHhOWW1xWXpvPQ==\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0126, requestHost0126, requestPort0126, requestHeader0126, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("udPpb3HudUhXzreg8D64YN61T7aHeQYlmSIxkd6VLjOf/sSsJtSUWwmetqD0LYyYAUBBg3KheE4h4Ur2LippHHYraEd4QkpGNVAvTHViK0hiRWdoaXVMNmkzdnZrbWh0TENKMmU3UVhoOTJkRGYrYXR6djFKcnhlT05OejdYMDRTaWlGVFRlbEJmRXJoR3ZLMUFmWGZoUkNhUVFzYUY3MDBWbnAybmNoM1lUc2szVndzRDBqRFFiaEthWnlKSGo5KzB6SFZaZmZNN1psaGZpc29QK2RyckhqQWhlN2Y2OTZodUZYaTU3Q2ZUUklXSldmTmQwZkN4cnNZdW02dVVLM0JveHZlYVlVNmhWUGdkQU1RUjl2YXFjQnVPU3RiWisvVzhmTmlUT293dUFhb1pHNHNTUURnVmhpZTl4SWR0RjRRbm54ZVJnR3Q2c00zcnEvYlBLaDBhTFZqT3N3alkyMXZRWHhOWW1xWXpvPQ==", XSRF_TOKEN_195);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0126 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 25630
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [126] <- Index 126
		if(replayMode)
		{
			long proxyDataRecordId =1610512924327L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [127] <- WEB ADMIN Index 127 ---
		String requestProt0127 = "https";
		String requestHost0127 = "starget.morganstanley.com";
		int    requestPort0127 = 443;
		String requestFile0127 = "/rest/v2/batchmbox" +
				"?client=morganstanleyandco" +
				"&sessionId=a1ea-8772-4dd7-3569-ffd4-db39-908e-bf6b" +
				"&RequestID=3419-a087-e71f-5a73-6b9c-c05b-2eca-9857" +
				"&SeqID=0012";
		String requestContent0127 = 
				"{\"client\":\"morganstanleyandco\",\"id\":{\"marketingCloudVisitorId\":\"30588150307500429323193657079021352466\",\"thirdPartyId\":\"b04c7db1-0fe5-43df-80a5-82cc6d0b3a83\",\"customerIds\":[{\"id\":\"b04c7db1-0fe5-43df-80a5-82cc6d0b3a83\",\"integrationCode\":\"msoauth\",\"authenticatedState\":\"authenticated\"}]},\"aamParameters\":{\"blob\":\"RKhpRz8krg2tLO6pguXWp5olkAcUniQYPHaMWWgdJ3xzPWQmdj0y\",\"uuid\":\"39370787780121242041880893119564127753\",\"dcsLocationHint\":\"7\"},\"mboxes\":[{\"indexId\":2,\"mbox\":\"mbox_finwellCTAServer\",\"parameters\":{\"at_property\":\"5776c956-c962-6e9e-d932-1f1a0820d8a4\"}}]}";
		String requestHeader0127 = "POST " + requestFile0127 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: starget.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0127.getBytes().length + "\r\n" + 		// Content-Length: 560
				"X-DEVICE-FOOTPRINT: version=3.5.1_4&pm_fpua=mozilla/5.0 (windows nt 10.0; wow64) applewebkit/537.36 (khtml, like gecko) chrome/87.0.4280.88 safari/537.36|5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36|Win32&pm_fpsc=24|1920|1080|1040&pm_fpsw=&pm_fptz=-5&pm_fpln=lang=en-US|syslang=|userlang=&pm_fpjv=0&pm_fpco=1&pm_fpasw=internal-pdf-viewer|mhjfbmdgcfjbbpaeojofohoefgiehjai|internal-nacl-plugin&pm_fpan=Netscape&pm_fpacn=Mozilla&pm_fpol=true&pm_fposp=&pm_fpup=&pm_fpsaw=1920&pm_fpspd=24&pm_fpsbd=&pm_fpsdx=&pm_fpsdy=&pm_fpslx=&pm_fpsly=&pm_fpsfse=&pm_fpsui=&pm_os=Windows&pm_brmjv=87&pm_br=Chrome&pm_inpt=&pm_expt=\r\n" + 
				"Accept: application/json\r\n" + 
				"X-XSRF-TOKEN: udPpb3HudUhXzreg8D64YN61T7aHeQYlmSIxkd6VLjOf/sSsJtSUWwmetqD0LYyYAUBBg3KheE4h4Ur2LippHHYraEd4QkpGNVAvTHViK0hiRWdoaXVMNmkzdnZrbWh0TENKMmU3UVhoOTJkRGYrYXR6djFKcnhlT05OejdYMDRTaWlGVFRlbEJmRXJoR3ZLMUFmWGZoUkNhUVFzYUY3MDBWbnAybmNoM1lUc2szVndzRDBqRFFiaEthWnlKSGo5KzB6SFZaZmZNN1psaGZpc29QK2RyckhqQWhlN2Y2OTZodUZYaTU3Q2ZUUklXSldmTmQwZkN4cnNZdW02dVVLM0JveHZlYVlVNmhWUGdkQU1RUjl2YXFjQnVPU3RiWisvVzhmTmlUT293dUFhb1pHNHNTUURnVmhpZTl4SWR0RjRRbm54ZVJnR3Q2c00zcnEvYlBLaDBhTFZqT3N3alkyMXZRWHhOWW1xWXpvPQ==\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/json\r\n" + 
				"Origin: https://mso.morganstanleyclientserv.com\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0127, requestHost0127, requestPort0127, requestHeader0127, requestContent0127.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("udPpb3HudUhXzreg8D64YN61T7aHeQYlmSIxkd6VLjOf/sSsJtSUWwmetqD0LYyYAUBBg3KheE4h4Ur2LippHHYraEd4QkpGNVAvTHViK0hiRWdoaXVMNmkzdnZrbWh0TENKMmU3UVhoOTJkRGYrYXR6djFKcnhlT05OejdYMDRTaWlGVFRlbEJmRXJoR3ZLMUFmWGZoUkNhUVFzYUY3MDBWbnAybmNoM1lUc2szVndzRDBqRFFiaEthWnlKSGo5KzB6SFZaZmZNN1psaGZpc29QK2RyckhqQWhlN2Y2OTZodUZYaTU3Q2ZUUklXSldmTmQwZkN4cnNZdW02dVVLM0JveHZlYVlVNmhWUGdkQU1RUjl2YXFjQnVPU3RiWisvVzhmTmlUT293dUFhb1pHNHNTUURnVmhpZTl4SWR0RjRRbm54ZVJnR3Q2c00zcnEvYlBLaDBhTFZqT3N3alkyMXZRWHhOWW1xWXpvPQ==", XSRF_TOKEN_195);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0127 = null;		// support garbage collector to reduce memory
		requestContent0127 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 401
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [127] <- Index 127
		if(replayMode)
		{
			long proxyDataRecordId =1610512924355L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [128] <- WEB ADMIN Index 128 ---
		String requestProt0128 = "https";
		String requestHost0128 = "digitalcontent.morganstanleyclientserv.com";
		int    requestPort0128 = 443;
		String requestFile0128 = "/content/experience-fragments/mso_targeted_ads/finwell/default-cta/master.html";
		String requestHeader0128 = "OPTIONS " + requestFile0128 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: digitalcontent.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: */*\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: x-xsrf-token\r\n" + 
				"Origin: https://mso.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0128, requestHost0128, requestPort0128, requestHeader0128, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0128 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 6
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [128] <- Index 128
		if(replayMode)
		{
			long proxyDataRecordId =1610512924493L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [129] <- WEB ADMIN Index 129 ---
		String requestProt0129 = "https";
		String requestHost0129 = "mso.morganstanleyclientserv.com";
		int    requestPort0129 = 443;
		String requestFile0129 = "/publiccontent/adobe/scripts/b124caa02ab9/772f5bcdf0f6/7da651638e8c/RCb3ce3f777b0d4f278ded2501eefd5b56-source.min.js";
		String requestHeader0129 = "GET " + requestFile0129 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0129, requestHost0129, requestPort0129, requestHeader0129, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("oZ4qpG82A2IS+Ens/txP2lKzbXGYucL3lzN05e+kxEMrHE0/G5Lm8eo+atBJbaV/Rqd0XbL8vfdttEngdlZQAGZxSldkdm0yU0lrcEdjcHA5R2FXN0dTcDRDcmhUeWsxcUdmWG10VW42QlUwbCtiSXBnWDFEcVlGd1JzQ09UUEl1amZSVzdJY01Jc0lqcS9xd293SmdTVWc0b1hDVU44ak55T2I2Tzh4eUF6UEExRXZ3Z0FabkRyVDVDb1phMTI4Qmo1VjVvbE1YQXNUWDlaVTREVEErOHlvUlluU2Z6aUpnWS8zZ0xaOHA0SHBqcERmd2o3eWV6M2lRSkd5Vnl4UEtKaDlnRmdQTGRKQ25lYTAzdFNZbElJengrVGR0YWxITUJKa3ZhZjJldHlvREExa0dlRkVUMXBleExNaGlKeVZiOGNkUjROV3dJOWRPQUY2R3BVWHZzSmVpUlZDcUIvYndqWmhkWkxseDN3PQ==", TOKEN_200);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0129 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 453
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [129] <- Index 129
		if(replayMode)
		{
			long proxyDataRecordId =1610512924626L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [130] <- WEB ADMIN Index 130 ---
		String requestProt0130 = "https";
		String requestHost0130 = "mso.morganstanleyclientserv.com";
		int    requestPort0130 = 443;
		String requestFile0130 = "/publiccontent/adobe/scripts/b124caa02ab9/772f5bcdf0f6/7da651638e8c/RC8c47adf60f214a36a88b36bec934f90d-source.min.js";
		String requestHeader0130 = "GET " + requestFile0130 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0130, requestHost0130, requestPort0130, requestHeader0130, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("oZ4qpG82A2IS+Ens/txP2lKzbXGYucL3lzN05e+kxEMrHE0/G5Lm8eo+atBJbaV/Rqd0XbL8vfdttEngdlZQAGZxSldkdm0yU0lrcEdjcHA5R2FXN0dTcDRDcmhUeWsxcUdmWG10VW42QlUwbCtiSXBnWDFEcVlGd1JzQ09UUEl1amZSVzdJY01Jc0lqcS9xd293SmdTVWc0b1hDVU44ak55T2I2Tzh4eUF6UEExRXZ3Z0FabkRyVDVDb1phMTI4Qmo1VjVvbE1YQXNUWDlaVTREVEErOHlvUlluU2Z6aUpnWS8zZ0xaOHA0SHBqcERmd2o3eWV6M2lRSkd5Vnl4UEtKaDlnRmdQTGRKQ25lYTAzdFNZbElJengrVGR0YWxITUJKa3ZhZjJldHlvREExa0dlRkVUMXBleExNaGlKeVZiOGNkUjROV3dJOWRPQUY2R3BVWHZzSmVpUlZDcUIvYndqWmhkWkxseDN3PQ==", TOKEN_200);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0130 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 452
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [130] <- Index 130
		if(replayMode)
		{
			long proxyDataRecordId =1610512924637L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [131] <- WEB ADMIN Index 131 ---
		String requestProt0131 = "https";
		String requestHost0131 = "mso.morganstanleyclientserv.com";
		int    requestPort0131 = 443;
		String requestFile0131 = "/publiccontent/adobe/scripts/b124caa02ab9/772f5bcdf0f6/7da651638e8c/RCde453bbd26414a988cbbfb4a8f76b4b3-source.min.js";
		String requestHeader0131 = "GET " + requestFile0131 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0131, requestHost0131, requestPort0131, requestHeader0131, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("za+3o/eISCAlE0R6146Bnvn+EeZjNUrrPkdgMgCYjQ1EITFocZ+Np7p+td4r6K+oH5mT+yVyXNFJghucgZDoC2VYcUxYV0xRdFowTHFKL3lmc0lzQklra3NxZ0xielRTV3VxK1JWY0dnaXpJdUxuT1JDKzRpTW5OTUZ2TEVMT3ZKZUVMN3FuMnIzdUVFN2JBTFRQSUR0c01vRzV1K21iY3pBSVJHS2ZUZVJWazZLdnRlN2ZTdnBpTXRhakxzbk1GZ0VGazk2SjZGclgrNkxxQlZtQmVjdGdTUDVTU1FUdDdleWZZUUZuLzZlQ2Y0MlJVdEpaaFZ3cFU1Qi9kTis4Qk1YVHB0NVNsNVhVY0U5TlhRTUNLcWExSEVUR2dGUjlpa0N5QWkzZkdEMTh1SC83eENTZVQ1blhMbzdtbjA0T1JNUG05S2NPVFQyVENvY3Q3SE5vdVVLMVVEdWpJdmphQzFSekoxcUszMDZZPQ==", TOKEN_201);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0131 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 757
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [131] <- Index 131
		if(replayMode)
		{
			long proxyDataRecordId =1610512924642L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [132] <- WEB ADMIN Index 132 ---
		log();
		log("# title: Default CTA");
		String requestProt0132 = "https";
		String requestHost0132 = "digitalcontent.morganstanleyclientserv.com";
		int    requestPort0132 = 443;
		String requestFile0132 = "/content/experience-fragments/mso_targeted_ads/finwell/default-cta/master.html";
		String requestHeader0132 = "GET " + requestFile0132 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: digitalcontent.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-XSRF-TOKEN: udPpb3HudUhXzreg8D64YN61T7aHeQYlmSIxkd6VLjOf/sSsJtSUWwmetqD0LYyYAUBBg3KheE4h4Ur2LippHHYraEd4QkpGNVAvTHViK0hiRWdoaXVMNmkzdnZrbWh0TENKMmU3UVhoOTJkRGYrYXR6djFKcnhlT05OejdYMDRTaWlGVFRlbEJmRXJoR3ZLMUFmWGZoUkNhUVFzYUY3MDBWbnAybmNoM1lUc2szVndzRDBqRFFiaEthWnlKSGo5KzB6SFZaZmZNN1psaGZpc29QK2RyckhqQWhlN2Y2OTZodUZYaTU3Q2ZUUklXSldmTmQwZkN4cnNZdW02dVVLM0JveHZlYVlVNmhWUGdkQU1RUjl2YXFjQnVPU3RiWisvVzhmTmlUT293dUFhb1pHNHNTUURnVmhpZTl4SWR0RjRRbm54ZVJnR3Q2c00zcnEvYlBLaDBhTFZqT3N3alkyMXZRWHhOWW1xWXpvPQ==\r\n" + 
				"Origin: https://mso.morganstanleyclientserv.com\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0132, requestHost0132, requestPort0132, requestHeader0132, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("udPpb3HudUhXzreg8D64YN61T7aHeQYlmSIxkd6VLjOf/sSsJtSUWwmetqD0LYyYAUBBg3KheE4h4Ur2LippHHYraEd4QkpGNVAvTHViK0hiRWdoaXVMNmkzdnZrbWh0TENKMmU3UVhoOTJkRGYrYXR6djFKcnhlT05OejdYMDRTaWlGVFRlbEJmRXJoR3ZLMUFmWGZoUkNhUVFzYUY3MDBWbnAybmNoM1lUc2szVndzRDBqRFFiaEthWnlKSGo5KzB6SFZaZmZNN1psaGZpc29QK2RyckhqQWhlN2Y2OTZodUZYaTU3Q2ZUUklXSldmTmQwZkN4cnNZdW02dVVLM0JveHZlYVlVNmhWUGdkQU1RUjl2YXFjQnVPU3RiWisvVzhmTmlUT293dUFhb1pHNHNTUURnVmhpZTl4SWR0RjRRbm54ZVJnR3Q2c00zcnEvYlBLaDBhTFZqT3N3alkyMXZRWHhOWW1xWXpvPQ==", XSRF_TOKEN_195);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0132 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1560
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [132] <- Index 132
		if(replayMode)
		{
			long proxyDataRecordId =1610512924655L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [133] <- WEB ADMIN Index 133 ---
		String requestProt0133 = "https";
		String requestHost0133 = "mso.morganstanleyclientserv.com";
		int    requestPort0133 = 443;
		String requestFile0133 = "/publiccontent/adobe/scripts/b124caa02ab9/772f5bcdf0f6/7da651638e8c/RC26e40f49f6d94fe9b9b088494f18232e-source.min.js";
		String requestHeader0133 = "GET " + requestFile0133 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0133, requestHost0133, requestPort0133, requestHeader0133, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("za+3o/eISCAlE0R6146Bnvn+EeZjNUrrPkdgMgCYjQ1EITFocZ+Np7p+td4r6K+oH5mT+yVyXNFJghucgZDoC2VYcUxYV0xRdFowTHFKL3lmc0lzQklra3NxZ0xielRTV3VxK1JWY0dnaXpJdUxuT1JDKzRpTW5OTUZ2TEVMT3ZKZUVMN3FuMnIzdUVFN2JBTFRQSUR0c01vRzV1K21iY3pBSVJHS2ZUZVJWazZLdnRlN2ZTdnBpTXRhakxzbk1GZ0VGazk2SjZGclgrNkxxQlZtQmVjdGdTUDVTU1FUdDdleWZZUUZuLzZlQ2Y0MlJVdEpaaFZ3cFU1Qi9kTis4Qk1YVHB0NVNsNVhVY0U5TlhRTUNLcWExSEVUR2dGUjlpa0N5QWkzZkdEMTh1SC83eENTZVQ1blhMbzdtbjA0T1JNUG05S2NPVFQyVENvY3Q3SE5vdVVLMVVEdWpJdmphQzFSekoxcUszMDZZPQ==", TOKEN_201);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0133 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 483
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [133] <- Index 133
		if(replayMode)
		{
			long proxyDataRecordId =1610512924807L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [134] <- WEB ADMIN Index 134 ---
		String requestProt0134 = "https";
		String requestHost0134 = "mso.morganstanleyclientserv.com";
		int    requestPort0134 = 443;
		String requestFile0134 = "/publiccontent/adobe/scripts/b124caa02ab9/772f5bcdf0f6/7da651638e8c/RCb18a3df5633348e8bca91e51de8c3177-source.min.js";
		String requestHeader0134 = "GET " + requestFile0134 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0134, requestHost0134, requestPort0134, requestHeader0134, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("za+3o/eISCAlE0R6146Bnvn+EeZjNUrrPkdgMgCYjQ1EITFocZ+Np7p+td4r6K+oH5mT+yVyXNFJghucgZDoC2VYcUxYV0xRdFowTHFKL3lmc0lzQklra3NxZ0xielRTV3VxK1JWY0dnaXpJdUxuT1JDKzRpTW5OTUZ2TEVMT3ZKZUVMN3FuMnIzdUVFN2JBTFRQSUR0c01vRzV1K21iY3pBSVJHS2ZUZVJWazZLdnRlN2ZTdnBpTXRhakxzbk1GZ0VGazk2SjZGclgrNkxxQlZtQmVjdGdTUDVTU1FUdDdleWZZUUZuLzZlQ2Y0MlJVdEpaaFZ3cFU1Qi9kTis4Qk1YVHB0NVNsNVhVY0U5TlhRTUNLcWExSEVUR2dGUjlpa0N5QWkzZkdEMTh1SC83eENTZVQ1blhMbzdtbjA0T1JNUG05S2NPVFQyVENvY3Q3SE5vdVVLMVVEdWpJdmphQzFSekoxcUszMDZZPQ==", TOKEN_201);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0134 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 616
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [134] <- Index 134
		if(replayMode)
		{
			long proxyDataRecordId =1610512924830L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [135] <- WEB ADMIN Index 135 ---
		log();
		log("# title: 404 - File or directory not found.");
		String requestProt0135 = "https";
		String requestHost0135 = "mso.morganstanleyclientserv.com";
		int    requestPort0135 = 443;
		String requestFile0135 = "/libs/cq/experience-fragments/components/xfpage/css.min.css";
		String requestHeader0135 = "GET " + requestFile0135 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0135, requestHost0135, requestPort0135, requestHeader0135, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("za+3o/eISCAlE0R6146Bnvn+EeZjNUrrPkdgMgCYjQ1EITFocZ+Np7p+td4r6K+oH5mT+yVyXNFJghucgZDoC2VYcUxYV0xRdFowTHFKL3lmc0lzQklra3NxZ0xielRTV3VxK1JWY0dnaXpJdUxuT1JDKzRpTW5OTUZ2TEVMT3ZKZUVMN3FuMnIzdUVFN2JBTFRQSUR0c01vRzV1K21iY3pBSVJHS2ZUZVJWazZLdnRlN2ZTdnBpTXRhakxzbk1GZ0VGazk2SjZGclgrNkxxQlZtQmVjdGdTUDVTU1FUdDdleWZZUUZuLzZlQ2Y0MlJVdEpaaFZ3cFU1Qi9kTis4Qk1YVHB0NVNsNVhVY0U5TlhRTUNLcWExSEVUR2dGUjlpa0N5QWkzZkdEMTh1SC83eENTZVQ1blhMbzdtbjA0T1JNUG05S2NPVFQyVENvY3Q3SE5vdVVLMVVEdWpJdmphQzFSekoxcUszMDZZPQ==", TOKEN_201);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0135 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = [verification disabled], content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 1245
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, null, null, null, null);		// Test [135] <- Index 135
		if(replayMode)
		{
			long proxyDataRecordId =1610512924872L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [136] <- WEB ADMIN Index 136 ---
		String requestProt0136 = "https";
		String requestHost0136 = "smetrics.morganstanley.com";
		int    requestPort0136 = 443;
		String requestFile0136 = "/b/ss/morganstanleywmprod,morganstanleyglobal/10/JS-2.22.0-LAWA/s11828161921752" +
				"?AQB=1" +
				"&ndh=1" +
				"&pf=1" +
				"&callback=s_c_il[1].doPostbacks" +
				"&et=1" +
				"&t=12%2F0%2F2021%2023%3A42%3A4%202%20300" +
				"&cid." +
				"&msoauth." +
				"&id=b04c7db1-0fe5-43df-80a5-82cc6d0b3a83" +
				"&as=1" +
				"&.msoauth" +
				"&.cid" +
				"&d." +
				"&nsid=0" +
				"&jsonv=1" +
				"&.d" +
				"&sdid=585EE282ACF24B76-11F08DAA2AB7572A" +
				"&mid=30588150307500429323193657079021352466" +
				"&aamlh=7" +
				"&ce=ISO-8859-1" +
				"&fpCookieDomainPeriods=3" +
				"&pageName=financial%20wellness%20%7C%20dashboard" +
				"&g=https%3A%2F%2Fmso.morganstanleyclientserv.com%2Fatrium%2F%23%2Ffinwell%2Fdashboard" +
				"&r=%20" +
				"&cc=USD" +
				"&ch=financial%20wellness" +
				"&server=MS%20Online" +
				"&aamb=RKhpRz8krg2tLO6pguXWp5olkAcUniQYPHaMWWgdJ3xzPWQmdj0y" +
				"&v1=11PM" +
				"&c2=11PM" +
				"&v2=Tuesday" +
				"&c3=Tuesday" +
				"&v3=weekday" +
				"&c4=weekday" +
				"&v4=New" +
				"&c5=New" +
				"&v5=1" +
				"&c6=1" +
				"&v6=First%20Visit" +
				"&c7=First%20Visit" +
				"&c12=https%3A%2F%2Fmso.morganstanleyclientserv.com%2Fatrium%2F%23%2Ffinwell%2Fdashboard" +
				"&c20=financial%20wellness" +
				"&v20=financial%20wellness%20%7C%20dashboard" +
				"&v21=https%3A%2F%2Fmso.morganstanleyclientserv.com%2Fatrium%2F%23%2Ffinwell%2Fdashboard" +
				"&v26=logged-in" +
				"&c39=MSO" +
				"&c40=website" +
				"&c41=logged-in" +
				"&c42=b04c7db1-0fe5-43df-80a5-82cc6d0b3a83" +
				"&v44=MSO" +
				"&v45=website" +
				"&v47=b04c7db1-0fe5-43df-80a5-82cc6d0b3a83" +
				"&c50=dashboard" +
				"&v51=MSO%20%7C%20financial%20wellness%20%7C%20dashboard" +
				"&v62=bbb001test" +
				"&v64=prospect" +
				"&v76=financial%20wellness" +
				"&v77=dashboard" +
				"&v80=financial%20wellness" +
				"&s=1920x1080" +
				"&c=24" +
				"&j=1.6" +
				"&v=N" +
				"&k=Y" +
				"&bw=1920" +
				"&bh=969" +
				"&mcorgid=9355F0CC5405D58C0A4C98A1%40AdobeOrg" +
				"&AQE=1";
		String requestHeader0136 = "GET " + requestFile0136 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: smetrics.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0136, requestHost0136, requestPort0136, requestHeader0136, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0136 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5897
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [136] <- Index 136
		if(replayMode)
		{
			long proxyDataRecordId =1610512924935L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [137] <- WEB ADMIN Index 137 ---
		String requestProt0137 = "https";
		String requestHost0137 = "smetrics.morganstanley.com";
		int    requestPort0137 = 443;
		String requestFile0137 = "/b/ss/morganstanleywmprod,morganstanleyglobal/10/JS-2.22.0-LAWA/s15197315051192" +
				"?AQB=1" +
				"&ndh=1" +
				"&pf=1" +
				"&callback=s_c_il[1].doPostbacks" +
				"&et=1" +
				"&t=12%2F0%2F2021%2023%3A42%3A4%202%20300" +
				"&cid." +
				"&msoauth." +
				"&id=b04c7db1-0fe5-43df-80a5-82cc6d0b3a83" +
				"&as=1" +
				"&.msoauth" +
				"&.cid" +
				"&d." +
				"&nsid=0" +
				"&jsonv=1" +
				"&.d" +
				"&mid=30588150307500429323193657079021352466" +
				"&aamlh=7" +
				"&ce=ISO-8859-1" +
				"&fpCookieDomainPeriods=3" +
				"&pageName=financial%20wellness%20%7C%20dashboard" +
				"&g=https%3A%2F%2Fmso.morganstanleyclientserv.com%2Fatrium%2F%23%2Ffinwell%2Fdashboard" +
				"&r=%20" +
				"&cc=USD" +
				"&events=event30" +
				"&c12=https%3A%2F%2Fmso.morganstanleyclientserv.com%2Fatrium%2F%23%2Ffinwell%2Fdashboard" +
				"&c20=financial%20wellness" +
				"&v20=financial%20wellness%20%7C%20dashboard" +
				"&v21=https%3A%2F%2Fmso.morganstanleyclientserv.com%2Fatrium%2F%23%2Ffinwell%2Fdashboard" +
				"&v26=logged-in" +
				"&v32=mso-finwellcta-default-investinyourgoals-nov2020" +
				"&v38=invest%20toward%20your%20goals" +
				"&c39=MSO" +
				"&c40=website" +
				"&c41=logged-in" +
				"&c42=b04c7db1-0fe5-43df-80a5-82cc6d0b3a83" +
				"&v44=MSO" +
				"&v45=website" +
				"&v47=b04c7db1-0fe5-43df-80a5-82cc6d0b3a83" +
				"&c50=dashboard" +
				"&v51=MSO%20%7C%20financial%20wellness%20%7C%20dashboard" +
				"&c53=mso-finwellcta-default-investinyourgoals-nov2020" +
				"&v60=get%20started" +
				"&v62=bbb001test" +
				"&v64=prospect" +
				"&v76=financial%20wellness" +
				"&v77=dashboard" +
				"&v80=financial%20wellness" +
				"&pe=lnk_o" +
				"&pev2=custom%20click%20-%20Direct%20call%20Rule" +
				"&s=1920x1080" +
				"&c=24" +
				"&j=1.6" +
				"&v=N" +
				"&k=Y" +
				"&bw=1920" +
				"&bh=969" +
				"&mcorgid=9355F0CC5405D58C0A4C98A1%40AdobeOrg" +
				"&AQE=1";
		String requestHeader0137 = "GET " + requestFile0137 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: smetrics.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0137, requestHost0137, requestPort0137, requestHeader0137, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0137 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5897
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [137] <- Index 137
		if(replayMode)
		{
			long proxyDataRecordId =1610512925004L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3_3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #4: click invest towards your goal
		// # ---------------------------------------



		// --- HTTP REQUEST: Test [139] <- WEB ADMIN Index 139 ---
		String requestProt0139 = "https";
		String requestHost0139 = "smetrics.morganstanley.com";
		int    requestPort0139 = 443;
		String requestFile0139 = "/b/ss/morganstanleywmprod,morganstanleyglobal/10/JS-2.22.0-LAWA/s17786775692079" +
				"?AQB=1" +
				"&ndh=1" +
				"&pf=1" +
				"&callback=s_c_il[1].doPostbacks" +
				"&et=1" +
				"&t=12%2F0%2F2021%2023%3A42%3A42%202%20300" +
				"&cid." +
				"&msoauth." +
				"&id=b04c7db1-0fe5-43df-80a5-82cc6d0b3a83" +
				"&as=1" +
				"&.msoauth" +
				"&.cid" +
				"&d." +
				"&nsid=0" +
				"&jsonv=1" +
				"&.d" +
				"&mid=30588150307500429323193657079021352466" +
				"&aamlh=7" +
				"&ce=ISO-8859-1" +
				"&fpCookieDomainPeriods=3" +
				"&pageName=financial%20wellness%20%7C%20dashboard" +
				"&g=https%3A%2F%2Fmso.morganstanleyclientserv.com%2Fatrium%2F%23%2Ffinwell%2Fdashboard" +
				"&r=%20" +
				"&cc=USD" +
				"&events=event31%2Cevent6" +
				"&c12=https%3A%2F%2Fmso.morganstanleyclientserv.com%2Fatrium%2F%23%2Ffinwell%2Fdashboard" +
				"&c20=financial%20wellness" +
				"&v20=financial%20wellness%20%7C%20dashboard" +
				"&v21=https%3A%2F%2Fmso.morganstanleyclientserv.com%2Fatrium%2F%23%2Ffinwell%2Fdashboard" +
				"&v22=mso-finwellcta-default-investinyourgoals-nov2020-click" +
				"&v26=logged-in" +
				"&v38=invest%20toward%20your%20goals" +
				"&c39=MSO" +
				"&c40=website" +
				"&c41=logged-in" +
				"&c42=b04c7db1-0fe5-43df-80a5-82cc6d0b3a83" +
				"&v44=MSO" +
				"&v45=website" +
				"&v47=b04c7db1-0fe5-43df-80a5-82cc6d0b3a83" +
				"&c50=dashboard" +
				"&v51=MSO%20%7C%20financial%20wellness%20%7C%20dashboard" +
				"&v60=get%20started" +
				"&v62=bbb001test" +
				"&v64=prospect" +
				"&v76=financial%20wellness" +
				"&v77=dashboard" +
				"&v80=financial%20wellness" +
				"&pe=lnk_o" +
				"&pev2=custom%20click%20-%20Direct%20call%20Rule" +
				"&s=1920x1080" +
				"&c=24" +
				"&j=1.6" +
				"&v=N" +
				"&k=Y" +
				"&bw=1920" +
				"&bh=969" +
				"&mcorgid=9355F0CC5405D58C0A4C98A1%40AdobeOrg" +
				"&lrt=59" +
				"&AQE=1";
		String requestHeader0139 = "GET " + requestFile0139 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: smetrics.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0139, requestHost0139, requestPort0139, requestHeader0139, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0139 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5897
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [139] <- Index 139
		if(replayMode)
		{
			long proxyDataRecordId =1610512964483L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [140] <- WEB ADMIN Index 140 ---
		log();
		log("# title: Financial Wellness");
		String requestProt0140 = "https";
		String requestHost0140 = "financialwellness.morganstanley.com";
		int    requestPort0140 = 443;
		String requestFile0140 = "/wws/finwell2/finwell.html/leadenroll";
		String requestHeader0140 = "GET " + requestFile0140 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Sec-Fetch-Dest: document\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0140, requestHost0140, requestPort0140, requestHeader0140, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0140 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 3781
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [140] <- Index 140
		if(replayMode)
		{
			long proxyDataRecordId =1610512964560L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [141] <- WEB ADMIN Index 141 ---
		String requestProt0141 = "https";
		String requestHost0141 = "financialwellness.morganstanley.com";
		int    requestPort0141 = 443;
		String requestFile0141 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/styles.14a37be819ceb9d3ce86.css";
		String requestHeader0141 = "GET " + requestFile0141 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0141, requestHost0141, requestPort0141, requestHeader0141, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0141 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 70757
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [141] <- Index 141
		if(replayMode)
		{
			long proxyDataRecordId =1610512965356L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [142] <- WEB ADMIN Index 142 ---
		String requestProt0142 = "https";
		String requestHost0142 = "financialwellness.morganstanley.com";
		int    requestPort0142 = 443;
		String requestFile0142 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/runtime-es2015.506a3b4f3e7ad39ef626.js";
		String requestHeader0142 = "GET " + requestFile0142 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0142, requestHost0142, requestPort0142, requestHeader0142, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0142 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1233
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [142] <- Index 142
		if(replayMode)
		{
			long proxyDataRecordId =1610512965402L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [143] <- WEB ADMIN Index 143 ---
		String requestProt0143 = "https";
		String requestHost0143 = "financialwellness.morganstanley.com";
		int    requestPort0143 = 443;
		String requestFile0143 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/polyfills-es2015.2870203b30e6a163935e.js";
		String requestHeader0143 = "GET " + requestFile0143 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0143, requestHost0143, requestPort0143, requestHeader0143, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0143 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 45937
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [143] <- Index 143
		if(replayMode)
		{
			long proxyDataRecordId =1610512965403L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [144] <- WEB ADMIN Index 144 ---
		String requestProt0144 = "https";
		String requestHost0144 = "financialwellness.morganstanley.com";
		int    requestPort0144 = 443;
		String requestFile0144 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/main-es2015.19fc2af3d4cd45846b58.js";
		String requestHeader0144 = "GET " + requestFile0144 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0144, requestHost0144, requestPort0144, requestHeader0144, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0144 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 217662
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [144] <- Index 144
		if(replayMode)
		{
			long proxyDataRecordId =1610512965404L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [145] <- WEB ADMIN Index 145 ---
		String requestProt0145 = "https";
		String requestHost0145 = "financialwellness.morganstanley.com";
		int    requestPort0145 = 443;
		String requestFile0145 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/vendor-es2015.64964b93d7603d935165.js";
		String requestHeader0145 = "GET " + requestFile0145 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0145, requestHost0145, requestPort0145, requestHeader0145, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0145 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1036418
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [145] <- Index 145
		if(replayMode)
		{
			long proxyDataRecordId =1610512965405L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [146] <- WEB ADMIN Index 146 ---
		String requestProt0146 = "https";
		String requestHost0146 = "financialwellness.morganstanley.com";
		int    requestPort0146 = 443;
		String requestFile0146 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/scripts.e454dd0842cd3c67f3c5.js";
		String requestHeader0146 = "GET " + requestFile0146 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0146, requestHost0146, requestPort0146, requestHeader0146, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0146 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 40737
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [146] <- Index 146
		if(replayMode)
		{
			long proxyDataRecordId =1610512965406L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [147] <- WEB ADMIN Index 147 ---
		String requestProt0147 = "https";
		String requestHost0147 = "financialwellness.morganstanley.com";
		int    requestPort0147 = 443;
		String requestFile0147 = "/libraries/81151d59dno2198935acf48464202bd";
		String requestHeader0147 = "GET " + requestFile0147 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0147, requestHost0147, requestPort0147, requestHeader0147, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0147 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 18338
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [147] <- Index 147
		if(replayMode)
		{
			long proxyDataRecordId =1610512965435L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [148] <- WEB ADMIN Index 148 ---
		String requestProt0148 = "https";
		String requestHost0148 = "financialwellness.morganstanley.com";
		int    requestPort0148 = 443;
		String requestFile0148 = "/akam/11/4b22a26b";
		String requestHeader0148 = "GET " + requestFile0148 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0148, requestHost0148, requestPort0148, requestHeader0148, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0148 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 10447
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [148] <- Index 148
		if(replayMode)
		{
			long proxyDataRecordId =1610512965503L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [149] <- WEB ADMIN Index 149 ---
		String requestProt0149 = "https";
		String requestHost0149 = "financialwellness.morganstanley.com";
		int    requestPort0149 = 443;
		String requestFile0149 = "/wws/finwell2/finwell.html/leadenroll";
		String requestHeader0149 = "HEAD " + requestFile0149 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0149, requestHost0149, requestPort0149, requestHeader0149, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0149 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [149] <- Index 149
		if(replayMode)
		{
			long proxyDataRecordId =1610512965551L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [150] <- WEB ADMIN Index 150 ---
		String requestProt0150 = "https";
		String requestHost0150 = "financialwellness.morganstanley.com";
		int    requestPort0150 = 443;
		String requestFile0150 = "/libraries/81151d59dno2198935acf48464202bd";
		String requestContent0150 = 
				"{\"sensor_data\":\"7a74G7m23Vrp0o5c9125791.66-1,2,-94,-100,Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36,uaend,12147,20030107,en-US,Gecko,3,0,0,0,396262,2965570,1920,1040,1920,1080,1920,969,1920,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,fc:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,7920,0.615743999307,805256482784,0,loc:-1,2,-94,-101,do_en,dm_en,t_en-1,2,-94,-105,-1,2,-94,-102,-1,2,-94,-108,-1,2,-94,-110,-1,2,-94,-117,-1,2,-94,-111,-1,2,-94,-109,-1,2,-94,-114,-1,2,-94,-103,-1,2,-94,-112,https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll-1,2,-94,-115,1,32,32,0,0,0,0,4,0,1610512965568,-999999,17228,0,0,2871,0,0,10,0,0,27D4FA18E34094C6191A8C7D9089D75F~-1~YAAQzfo7F47efPN2AQAACZ4N+gUYoYDhJ/cCTXlhJatshtWyDpkrN7U3wzUbu/goadKnOBOWit7ToyBrPErSIZyu+9NCgvNyV+7d2av0lsbD0iuIVY0AP1z/38jMY3Qd0TFJEykmMbwTpzRkgCV1t8k/IT8hXW8sjC1BFjeHf+oCEUWtzP+gqToMwS8h1z8b+OawiM4HDHGmBBR6otEtn5o2Ahi9MtJqWc7uujlEmNk/pAhZ+Hq9aFeNckt4vyOJX1NA3CunaL2HYvmk6g9mILpl0OlSVyLdpntxsfWB0bnTQSkM/dnj8GQChmQC1YVTgw==~-1~-1~-1,30723,-1,-1,30261693,PiZtE,51215,51-1,2,-94,-106,0,0-1,2,-94,-119,-1-1,2,-94,-122,0,0,0,0,1,0,0-1,2,-94,-123,-1,2,-94,-124,-1,2,-94,-126,-1,2,-94,-127,8-1,2,-94,-70,-1-1,2,-94,-80,94-1,2,-94,-116,8896701-1,2,-94,-118,81481-1,2,-94,-129,-1,2,-94,-121,;16;-1;0\"}";
		byte[] requestContentBinary0150 = requestContent0150.getBytes("UTF-8");
		String requestHeader0150 = "POST " + requestFile0150 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContentBinary0150.length + "\r\n" + 		// Content-Length: 1340
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain;charset=UTF-8\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0150, requestHost0150, requestPort0150, requestHeader0150, requestContentBinary0150, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0150 = null;		// support garbage collector to reduce memory
		requestContent0150 = null;		// support garbage collector to reduce memory
		requestContentBinary0150 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 201, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 17
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {201}, "APPLICATION/JSON", null, null);		// Test [150] <- Index 150
		if(replayMode)
		{
			long proxyDataRecordId =1610512965612L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [151] <- WEB ADMIN Index 151 ---
		String requestProt0151 = "https";
		String requestHost0151 = "assets.adobedtm.com";
		int    requestPort0151 = 443;
		String requestFile0151 = "/launch-EN00f9bc705c81457d9fbddafbfe62ac8b.min.js";
		String requestHeader0151 = "GET " + requestFile0151 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: assets.adobedtm.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0151, requestHost0151, requestPort0151, requestHeader0151, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0151 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 71743
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [151] <- Index 151
		if(replayMode)
		{
			long proxyDataRecordId =1610512965649L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [152] <- WEB ADMIN Index 152 ---
		String requestProt0152 = "https";
		String requestHost0152 = "financialwellness.morganstanley.com";
		int    requestPort0152 = 443;
		String requestFile0152 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_programdata-results.fw_finwell2_wm.json";
		String requestHeader0152 = "GET " + requestFile0152 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0152, requestHost0152, requestPort0152, requestHeader0152, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0152 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 446
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [152] <- Index 152
		if(replayMode)
		{
			long proxyDataRecordId =1610512966569L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [153] <- WEB ADMIN Index 153 ---
		String requestProt0153 = "https";
		String requestHost0153 = "financialwellness.morganstanley.com";
		int    requestPort0153 = 443;
		String requestFile0153 = "/akam/11/pixel_4b22a26b";
		String requestContent0153 = 
				"ap=true" +
				"&bt=%7B%22charging%22%3Atrue%2C%22chargingTime%22%3A0%2C%22dischargingTime%22%3A%22Infinity%22%2C%22level%22%3A1%2C%22onchargingchange%22%3Anull%2C%22onchargingtimechange%22%3Anull%2C%22ondischargingtimechange%22%3Anull%2C%22onlevelchange%22%3Anull%7D" +
				"&fonts=7%2C63" +
				"&fh=fd93e714c2d4dd2d57da0040151ad1301d069e1a" +
				"&timing=%7B%221%22%3A132%2C%222%22%3A795%2C%22profile%22%3A%7B%22bp%22%3A0%2C%22sr%22%3A1%2C%22dp%22%3A1%2C%22lt%22%3A0%2C%22ps%22%3A1%2C%22cv%22%3A88%2C%22fp%22%3A0%2C%22sp%22%3A0%2C%22br%22%3A0%2C%22ieps%22%3A0%2C%22av%22%3A0%2C%22z1%22%3A32%2C%22jsv%22%3A1%2C%22nav%22%3A2%2C%22nap%22%3A3%2C%22crc%22%3A1%2C%22z2%22%3A61%2C%22fonts%22%3A171%7D%2C%22main%22%3A563%2C%22compute%22%3A132%2C%22send%22%3A966%7D" +
				"&bp=1038350511%2C-1979380391%2C1738406762%2C749224105" +
				"&sr=%7B%22inner%22%3A%5B1920%2C969%5D%2C%22outer%22%3A%5B1920%2C1040%5D%2C%22screen%22%3A%5B0%2C0%5D%2C%22pageOffset%22%3A%5B0%2C0%5D%2C%22avail%22%3A%5B1920%2C1040%5D%2C%22size%22%3A%5B1920%2C1080%5D%2C%22client%22%3A%5B1920%2C0%5D%2C%22colorDepth%22%3A24%2C%22pixelDepth%22%3A24%7D" +
				"&dp=%7B%22XDomainRequest%22%3A0%2C%22createPopup%22%3A0%2C%22removeEventListener%22%3A1%2C%22globalStorage%22%3A0%2C%22openDatabase%22%3A1%2C%22indexedDB%22%3A1%2C%22attachEvent%22%3A0%2C%22ActiveXObject%22%3A0%2C%22dispatchEvent%22%3A1%2C%22addBehavior%22%3A0%2C%22addEventListener%22%3A1%2C%22detachEvent%22%3A0%2C%22fireEvent%22%3A0%2C%22MutationObserver%22%3A1%2C%22HTMLMenuItemElement%22%3A0%2C%22Int8Array%22%3A1%2C%22postMessage%22%3A1%2C%22querySelector%22%3A1%2C%22getElementsByClassName%22%3A1%2C%22images%22%3A1%2C%22compatMode%22%3A%22CSS1Compat%22%2C%22documentMode%22%3A0%2C%22all%22%3A1%2C%22now%22%3A1%2C%22contextMenu%22%3A0%7D" +
				"&lt=1610512965833-5" +
				"&ps=true%2Ctrue" +
				"&cv=0c746aa6743036d3834aeeaf1a96693b7465b169" +
				"&fp=false" +
				"&sp=false" +
				"&br=Chrome" +
				"&ieps=false" +
				"&av=false" +
				"&z=%7B%22a%22%3A1260561385%2C%22b%22%3A1%2C%22c%22%3A0%7D" +
				"&zh=" +
				"&jsv=1.7" +
				"&nav=%7B%22userAgent%22%3A%22Mozilla%2F5.0%20(Windows%20NT%2010.0%3B%20WOW64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F87.0.4280.88%20Safari%2F537.36%22%2C%22appName%22%3A%22Netscape%22%2C%22appCodeName%22%3A%22Mozilla%22%2C%22appVersion%22%3A%225.0%20(Windows%20NT%2010.0%3B%20WOW64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F87.0.4280.88%20Safari%2F537.36%22%2C%22appMinorVersion%22%3A0%2C%22product%22%3A%22Gecko%22%2C%22productSub%22%3A%2220030107%22%2C%22vendor%22%3A%22Google%20Inc.%22%2C%22vendorSub%22%3A%22%22%2C%22buildID%22%3A0%2C%22platform%22%3A%22Win32%22%2C%22oscpu%22%3A0%2C%22hardwareConcurrency%22%3A4%2C%22language%22%3A%22en-US%22%2C%22languages%22%3A%5B%22en-US%22%2C%22en%22%5D%2C%22systemLanguage%22%3A0%2C%22userLanguage%22%3A0%2C%22doNotTrack%22%3Anull%2C%22msDoNotTrack%22%3A0%2C%22cookieEnabled%22%3Atrue%2C%22geolocation%22%3A1%2C%22vibrate%22%3A1%2C%22maxTouchPoints%22%3A0%2C%22webdriver%22%3A0%2C%22plugins%22%3A%5B%22Chrome%20PDF%20Plugin%22%2C%22Chrome%20PDF%20Viewer%22%2C%22Native%20Client%22%5D%7D" +
				"&crc=%7B%22window.chrome%22%3A%7B%22app%22%3A%7B%22isInstalled%22%3Afalse%2C%22InstallState%22%3A%7B%22DISABLED%22%3A%22disabled%22%2C%22INSTALLED%22%3A%22installed%22%2C%22NOT_INSTALLED%22%3A%22not_installed%22%7D%2C%22RunningState%22%3A%7B%22CANNOT_RUN%22%3A%22cannot_run%22%2C%22READY_TO_RUN%22%3A%22ready_to_run%22%2C%22RUNNING%22%3A%22running%22%7D%7D%2C%22runtime%22%3A%7B%22OnInstalledReason%22%3A%7B%22CHROME_UPDATE%22%3A%22chrome_update%22%2C%22INSTALL%22%3A%22install%22%2C%22SHARED_MODULE_UPDATE%22%3A%22shared_module_update%22%2C%22UPDATE%22%3A%22update%22%7D%2C%22OnRestartRequiredReason%22%3A%7B%22APP_UPDATE%22%3A%22app_update%22%2C%22OS_UPDATE%22%3A%22os_update%22%2C%22PERIODIC%22%3A%22periodic%22%7D%2C%22PlatformArch%22%3A%7B%22ARM%22%3A%22arm%22%2C%22ARM64%22%3A%22arm64%22%2C%22MIPS%22%3A%22mips%22%2C%22MIPS64%22%3A%22mips64%22%2C%22X86_32%22%3A%22x86-32%22%2C%22X86_64%22%3A%22x86-64%22%7D%2C%22PlatformNaclArch%22%3A%7B%22ARM%22%3A%22arm%22%2C%22MIPS%22%3A%22mips%22%2C%22MIPS64%22%3A%22mips64%22%2C%22X86_32%22%3A%22x86-32%22%2C%22X86_64%22%3A%22x86-64%22%7D%2C%22PlatformOs%22%3A%7B%22ANDROID%22%3A%22android%22%2C%22CROS%22%3A%22cros%22%2C%22LINUX%22%3A%22linux%22%2C%22MAC%22%3A%22mac%22%2C%22OPENBSD%22%3A%22openbsd%22%2C%22WIN%22%3A%22win%22%7D%2C%22RequestUpdateCheckStatus%22%3A%7B%22NO_UPDATE%22%3A%22no_update%22%2C%22THROTTLED%22%3A%22throttled%22%2C%22UPDATE_AVAILABLE%22%3A%22update_available%22%7D%7D%7D%7D" +
				"&t=ab5c7389470e5d96ddcc0cd741aa5601fbe81529" +
				"&u=dd2f57b60fe35ea2bdb78ff9a104e76a" +
				"&fc=false";
		String requestHeader0153 = "POST " + requestFile0153 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0153.getBytes().length + "\r\n" + 		// Content-Length: 4504
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0153, requestHost0153, requestPort0153, requestHeader0153, requestContent0153.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0153 = null;		// support garbage collector to reduce memory
		requestContent0153 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [153] <- Index 153
		if(replayMode)
		{
			long proxyDataRecordId =1610512966811L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [154] <- WEB ADMIN Index 154 ---
		String requestProt0154 = "https";
		String requestHost0154 = "assets.adobedtm.com";
		int    requestPort0154 = 443;
		String requestFile0154 = "/extensions/EP143333dab9bb4582a773c81f3a840074/AppMeasurement.min.js";
		String requestHeader0154 = "GET " + requestFile0154 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: assets.adobedtm.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0154, requestHost0154, requestPort0154, requestHeader0154, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0154 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 12569
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [154] <- Index 154
		if(replayMode)
		{
			long proxyDataRecordId =1610512967082L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [155] <- WEB ADMIN Index 155 ---
		String requestProt0155 = "https";
		String requestHost0155 = "financialwellness.morganstanley.com";
		int    requestPort0155 = 443;
		String requestFile0155 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_transformation-results.fw_c_feed_d_wm.json";
		String requestHeader0155 = "GET " + requestFile0155 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0155, requestHost0155, requestPort0155, requestHeader0155, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0155 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 44650
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [155] <- Index 155
		if(replayMode)
		{
			long proxyDataRecordId =1610512967114L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [156] <- WEB ADMIN Index 156 ---
		String requestProt0156 = "https";
		String requestHost0156 = "financialwellness.morganstanley.com";
		int    requestPort0156 = 443;
		String requestFile0156 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_transformation-results.fw_finwell_properties_wm.json";
		String requestHeader0156 = "GET " + requestFile0156 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0156, requestHost0156, requestPort0156, requestHeader0156, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0156 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 894
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [156] <- Index 156
		if(replayMode)
		{
			long proxyDataRecordId =1610512967115L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [157] <- WEB ADMIN Index 157 ---
		String requestProt0157 = "https";
		String requestHost0157 = "financialwellness.morganstanley.com";
		int    requestPort0157 = 443;
		String requestFile0157 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_transformation-results.fw_popup_retake_assmnt_wm.json";
		String requestHeader0157 = "GET " + requestFile0157 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0157, requestHost0157, requestPort0157, requestHeader0157, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0157 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 436
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [157] <- Index 157
		if(replayMode)
		{
			long proxyDataRecordId =1610512967205L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [158] <- WEB ADMIN Index 158 ---
		String requestProt0158 = "https";
		String requestHost0158 = "financialwellness.morganstanley.com";
		int    requestPort0158 = 443;
		String requestFile0158 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_transformation-results.fw_flagged_msg_wm.json";
		String requestHeader0158 = "GET " + requestFile0158 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0158, requestHost0158, requestPort0158, requestHeader0158, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0158 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 403
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [158] <- Index 158
		if(replayMode)
		{
			long proxyDataRecordId =1610512967255L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #4 (fragment 2 of 2)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [159] <- WEB ADMIN Index 159 ---
		String requestProt0159 = "https";
		String requestHost0159 = "financialwellness.morganstanley.com";
		int    requestPort0159 = 443;
		String requestFile0159 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_transformation-results.fw_popup_thrd_party_warn_wm.json";
		String requestHeader0159 = "GET " + requestFile0159 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0159, requestHost0159, requestPort0159, requestHeader0159, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0159 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 525
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [159] <- Index 159
		if(replayMode)
		{
			long proxyDataRecordId =1610512967256L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [160] <- WEB ADMIN Index 160 ---
		String requestProt0160 = "https";
		String requestHost0160 = "financialwellness.morganstanley.com";
		int    requestPort0160 = 443;
		String requestFile0160 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_transformation-results.fw_footer_wm.json";
		String requestHeader0160 = "GET " + requestFile0160 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0160, requestHost0160, requestPort0160, requestHeader0160, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0160 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 610
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [160] <- Index 160
		if(replayMode)
		{
			long proxyDataRecordId =1610512967257L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [161] <- WEB ADMIN Index 161 ---
		String requestProt0161 = "https";
		String requestHost0161 = "financialwellness.morganstanley.com";
		int    requestPort0161 = 443;
		String requestFile0161 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_transformation-results.fw_fw2lead_d_wo_h_dropdown_wm.json";
		String requestHeader0161 = "GET " + requestFile0161 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0161, requestHost0161, requestPort0161, requestHeader0161, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0161 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1253
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [161] <- Index 161
		if(replayMode)
		{
			long proxyDataRecordId =1610512967275L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [162] <- WEB ADMIN Index 162 ---
		log();
		log("# title: Financial Wellness");
		String requestProt0162 = "https";
		String requestHost0162 = "financialwellness.morganstanley.com";
		int    requestPort0162 = 443;
		String requestFile0162 = "/wws/finwell2/finwell.html/null";
		String requestHeader0162 = "GET " + requestFile0162 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0162, requestHost0162, requestPort0162, requestHeader0162, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0162 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 3580
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [162] <- Index 162
		if(replayMode)
		{
			long proxyDataRecordId =1610512967339L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [163] <- WEB ADMIN Index 163 ---
		log();
		log("# title: 404 Not Found");
		String requestProt0163 = "https";
		String requestHost0163 = "financialwellness.morganstanley.com";
		int    requestPort0163 = 443;
		String requestFile0163 = "/common-ui/fonts/Karla.ttf";
		String requestHeader0163 = "GET " + requestFile0163 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/styles.14a37be819ceb9d3ce86.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0163, requestHost0163, requestPort0163, requestHeader0163, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0163 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = [verification disabled], content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 196
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, null, null, null, null);		// Test [163] <- Index 163
		if(replayMode)
		{
			long proxyDataRecordId =1610512967449L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [164] <- WEB ADMIN Index 164 ---
		String requestProt0164 = "https";
		String requestHost0164 = "financialwellness.morganstanley.com";
		int    requestPort0164 = 443;
		String requestFile0164 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/icomoon.woff";
		String requestHeader0164 = "GET " + requestFile0164 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/styles.14a37be819ceb9d3ce86.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0164, requestHost0164, requestPort0164, requestHeader0164, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0164 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF", header text fragment = [verification disabled], recorded content size = 87508
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF", null, null);		// Test [164] <- Index 164
		if(replayMode)
		{
			long proxyDataRecordId =1610512969940L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [165] <- WEB ADMIN Index 165 ---
		String requestProt0165 = "https";
		String requestHost0165 = "financialwellness.morganstanley.com";
		int    requestPort0165 = 443;
		String requestFile0165 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/karla-regular-webfont.ttf";
		String requestHeader0165 = "GET " + requestFile0165 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/styles.14a37be819ceb9d3ce86.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0165, requestHost0165, requestPort0165, requestHeader0165, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0165 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-TTF", header text fragment = [verification disabled], recorded content size = 17231
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-TTF", null, null);		// Test [165] <- Index 165
		if(replayMode)
		{
			long proxyDataRecordId =1610512969941L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [166] <- WEB ADMIN Index 166 ---
		String requestProt0166 = "https";
		String requestHost0166 = "financialwellness.morganstanley.com";
		int    requestPort0166 = 443;
		String requestFile0166 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/MSGloriolaIIStdLight.woff2";
		String requestHeader0166 = "GET " + requestFile0166 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/styles.14a37be819ceb9d3ce86.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0166, requestHost0166, requestPort0166, requestHeader0166, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0166 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 10172
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [166] <- Index 166
		if(replayMode)
		{
			long proxyDataRecordId =1610512969949L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [167] <- WEB ADMIN Index 167 ---
		String requestProt0167 = "https";
		String requestHost0167 = "financialwellness.morganstanley.com";
		int    requestPort0167 = 443;
		String requestFile0167 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/karla-bold-webfont.ttf";
		String requestHeader0167 = "GET " + requestFile0167 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/styles.14a37be819ceb9d3ce86.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0167, requestHost0167, requestPort0167, requestHeader0167, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0167 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-TTF", header text fragment = [verification disabled], recorded content size = 17958
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-TTF", null, null);		// Test [167] <- Index 167
		if(replayMode)
		{
			long proxyDataRecordId =1610512969950L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [168] <- WEB ADMIN Index 168 ---
		String requestProt0168 = "https";
		String requestHost0168 = "financialwellness.morganstanley.com";
		int    requestPort0168 = 443;
		String requestFile0168 = "/libraries/81151d59dno2198935acf48464202bd";
		String requestContent0168 = 
				"{\"sensor_data\":\"7a74G7m23Vrp0o5c9125791.66-1,2,-94,-100,Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36,uaend,12147,20030107,en-US,Gecko,3,0,0,0,396262,2965570,1920,1040,1920,1080,1920,969,1920,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,fc:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,7920,0.673865753336,805256482784,0,loc:-1,2,-94,-101,do_en,dm_en,t_en-1,2,-94,-105,-1,2,-94,-102,0,-1,0,1,937,937,0;0,-1,0,1,821,821,0;0,-1,0,1,1230,1230,0;0,-1,0,1,727,727,0;0,-1,0,1,339,339,0;-1,2,-94,-108,-1,2,-94,-110,-1,2,-94,-117,-1,2,-94,-111,0,161,-1,-1,-1;-1,2,-94,-109,0,161,-1,-1,-1,-1,-1,-1,-1,-1,-1;-1,2,-94,-114,-1,2,-94,-103,-1,2,-94,-112,https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll-1,2,-94,-115,1,32,32,161,161,0,322,2153,0,1610512965568,22,17228,0,0,2871,0,0,2155,322,0,27D4FA18E34094C6191A8C7D9089D75F~-1~YAAQzfo7F6refPN2AQAA+qUN+gUfevCgJed+TP6XZhG4ekYmwNa8l6qbbaHTSntOnKh5BJbhxv/U3hUQ+duK44LAMzhA/MT90Nk9G8rF+qmyI/4oUc9KFaw17a/iPY3yfibQIzE7UVmhwoz9tqocM9lmxXLfut6tkTT6F9LpQv0U2Upkc+KKr7nIArOkIHtfoHHCWvfXXH/zmcYHX0Ls4MA+7UzeQVYkBYSsyJvRSiaotWMq9spaCDd5yc1iaid2JsLSt8D33ZUvQw6njChPdpwejVu0ySwmVkxXI30a1+ik1Sig3Zz2seqS+N+FiHtZ5pmGtE8BRx/4lG1urKUR/xatkgdP0NK/W1h5450v~-1~-1~-1,33703,264,-1000614991,30261693,PiZtE,75101,87-1,2,-94,-106,8,1-1,2,-94,-119,135,310,205,230,97,97,91,76,78,76,75,70,14,452,-1,2,-94,-122,0,0,0,0,1,0,0-1,2,-94,-123,-1,2,-94,-124,-1,2,-94,-126,-1,2,-94,-127,00321144241322243122-1,2,-94,-70,-1752250632;-915298718;dis;,7,8;true;true;true;300;true;24;24;true;false;-1-1,2,-94,-80,5579-1,2,-94,-116,8896701-1,2,-94,-118,95567-1,2,-94,-129,33c6f54e72ed2196a148f981eb3a5bd51bb6639069e41454a91411e89e70f64e,1,a712c19fde04cde08d21754c81e951066896404f0eac6cbfd5255e434d879986,,,,0-1,2,-94,-121,;9;23;0\"}";
		byte[] requestContentBinary0168 = requestContent0168.getBytes("UTF-8");
		String requestHeader0168 = "POST " + requestFile0168 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContentBinary0168.length + "\r\n" + 		// Content-Length: 1813
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain;charset=UTF-8\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0168, requestHost0168, requestPort0168, requestHeader0168, requestContentBinary0168, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0168 = null;		// support garbage collector to reduce memory
		requestContent0168 = null;		// support garbage collector to reduce memory
		requestContentBinary0168 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 201, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 17
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {201}, "APPLICATION/JSON", null, null);		// Test [168] <- Index 168
		if(replayMode)
		{
			long proxyDataRecordId =1610512969953L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [169] <- WEB ADMIN Index 169 ---
		String requestProt0169 = "https";
		String requestHost0169 = "morganstanleyandco.tt.omtrdc.net";
		int    requestPort0169 = 443;
		String requestFile0169 = "/m2/morganstanleyandco/mbox/json" +
				"?mbox=target-global-mbox" +
				"&mboxSession=52f2de5bbb7448f59394fd988920e26e" +
				"&mboxPC=" +
				"&mboxPage=a03e2626f3a94904b0906b6b1eb83c02" +
				"&mboxRid=16a7ebe3d6d24c11af4003407316435e" +
				"&mboxVersion=1.7.1" +
				"&mboxCount=1" +
				"&mboxTime=1610494967175" +
				"&mboxHost=financialwellness.morganstanley.com" +
				"&mboxURL=https%3A%2F%2Ffinancialwellness.morganstanley.com%2Fwws%2Ffinwell2%2Ffinwell.html%2Fleadenroll" +
				"&mboxReferrer=https%3A%2F%2Fmso.morganstanleyclientserv.com%2F" +
				"&mboxXDomain=enabled" +
				"&browserHeight=969" +
				"&browserWidth=1920" +
				"&browserTimeOffset=-300" +
				"&screenHeight=1080" +
				"&screenWidth=1920" +
				"&colorDepth=24" +
				"&devicePixelRatio=1" +
				"&screenOrientation=landscape" +
				"&webGLRenderer=Google%20SwiftShader" +
				"&wellnessCat=Retirement" +
				"&legalEntity=" +
				"&age=0" +
				"&income=" +
				"&isAssessmentTaken=false" +
				"&targetUserType=" +
				"&at_property=9e038d44-6a49-1d31-c9e4-de84301a27a7" +
				"&us=" +
				"&mboxMCSDID=2E227040674A0E36-71C164E4F33412E7" +
				"&mboxMCGVID=30588150307500429323193657079021352466" +
				"&mboxAAMB=RKhpRz8krg2tLO6pguXWp5olkAcUniQYPHaMWWgdJ3xzPWQmdj0y" +
				"&mboxMCGLH=7";
		String requestHeader0169 = "GET " + requestFile0169 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: morganstanleyandco.tt.omtrdc.net\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0169, requestHost0169, requestPort0169, requestHeader0169, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0169 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2732
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [169] <- Index 169
		if(replayMode)
		{
			long proxyDataRecordId =1610512970027L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [170] <- WEB ADMIN Index 170 ---
		String requestProt0170 = "https";
		String requestHost0170 = "financialwellness.morganstanley.com";
		int    requestPort0170 = 443;
		String requestFile0170 = "/pub/content/dam/workplacewealth/finbites/images/favicon.ico";
		String requestHeader0170 = "GET " + requestFile0170 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/finwell2/finwell.html/leadenroll\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0170, requestHost0170, requestPort0170, requestHeader0170, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0170 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/X-ICON", header text fragment = [verification disabled], recorded content size = 1787
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/X-ICON", null, null);		// Test [170] <- Index 170
		if(replayMode)
		{
			long proxyDataRecordId =1610512972139L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [171] <- WEB ADMIN Index 171 ---
		String requestProt0171 = "https";
		String requestHost0171 = "znejrwwjfln65dtqb-mswm.siteintercept.qualtrics.com";
		int    requestPort0171 = 443;
		String requestFile0171 = "/WRSiteInterceptEngine/" +
				"?Q_ZID=ZN_eJRwwjFLn65dTqB" +
				"&Q_LOC=https%3A%2F%2Ffinancialwellness.morganstanley.com%2Fwws%2Ffinwell2%2Ffinwell.html%2Fleadenroll" +
				"&t=1610512970200";
		String requestHeader0171 = "GET " + requestFile0171 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: znejrwwjfln65dtqb-mswm.siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0171, requestHost0171, requestPort0171, requestHeader0171, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0171 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 16317
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [171] <- Index 171
		if(replayMode)
		{
			long proxyDataRecordId =1610512972215L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [172] <- WEB ADMIN Index 172 ---
		String requestProt0172 = "https";
		String requestHost0172 = "siteintercept.qualtrics.com";
		int    requestPort0172 = 443;
		String requestFile0172 = "/WRSiteInterceptEngine/Targeting.php" +
				"?Q_ZoneID=ZN_eJRwwjFLn65dTqB" +
				"&Q_CLIENTVERSION=1.41.0" +
				"&Q_CLIENTTYPE=web";
		String requestContent0172 = 
				"Q_LOC=https%3A%2F%2Ffinancialwellness.morganstanley.com%2Fwws%2Ffinwell2%2Ffinwell.html%2Fleadenroll";
		String requestHeader0172 = "POST " + requestFile0172 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0172.getBytes().length + "\r\n" + 		// Content-Length: 100
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0172, requestHost0172, requestPort0172, requestHeader0172, requestContent0172.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0172 = null;		// support garbage collector to reduce memory
		requestContent0172 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1287
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [172] <- Index 172
		if(replayMode)
		{
			long proxyDataRecordId =1610512972311L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [173] <- WEB ADMIN Index 173 ---
		String requestProt0173 = "https";
		String requestHost0173 = "siteintercept.qualtrics.com";
		int    requestPort0173 = 443;
		String requestFile0173 = "/dxjsmodule/CoreModule.js" +
				"?Q_CLIENTVERSION=1.41.0" +
				"&Q_CLIENTTYPE=web";
		String requestHeader0173 = "GET " + requestFile0173 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0173, requestHost0173, requestPort0173, requestHeader0173, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0173 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 27137
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [173] <- Index 173
		if(replayMode)
		{
			long proxyDataRecordId =1610512972394L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [174] <- WEB ADMIN Index 174 ---
		String requestProt0174 = "https";
		String requestHost0174 = "siteintercept.qualtrics.com";
		int    requestPort0174 = 443;
		String requestFile0174 = "/dxjsmodule/14.3bdbf63f1121552ac2ba.chunk.js" +
				"?Q_CLIENTVERSION=1.41.0" +
				"&Q_CLIENTTYPE=web";
		String requestHeader0174 = "GET " + requestFile0174 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0174, requestHost0174, requestPort0174, requestHeader0174, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0174 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 757
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [174] <- Index 174
		if(replayMode)
		{
			long proxyDataRecordId =1610512972494L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [175] <- WEB ADMIN Index 175 ---
		String requestProt0175 = "https";
		String requestHost0175 = "siteintercept.qualtrics.com";
		int    requestPort0175 = 443;
		String requestFile0175 = "/dxjsmodule/1.6c2a7e2d1ddb99db1dfa.chunk.js" +
				"?Q_CLIENTVERSION=1.41.0" +
				"&Q_CLIENTTYPE=web";
		String requestHeader0175 = "GET " + requestFile0175 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0175, requestHost0175, requestPort0175, requestHeader0175, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0175 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5856
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [175] <- Index 175
		if(replayMode)
		{
			long proxyDataRecordId =1610512972495L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #5: click life event tab
		// # -----------------------------



		// --- HTTP REQUEST: Test [177] <- WEB ADMIN Index 177 ---
		String requestProt0177 = "https";
		String requestHost0177 = "mso.morganstanleyclientserv.com";
		int    requestPort0177 = 443;
		String requestFile0177 = "/publiccontent/finwell/lifeevent//lifeeventmaster.json" +
				"?RequestID=6123-4923-9de3-67b0-dc33-ac7c-2257-5fbb" +
				"&SeqID=0024";
		String requestHeader0177 = "GET " + requestFile0177 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-XSRF-TOKEN: XUfcymBdvvRG00RSYGlnjve30UvduWEO/mkczsRNlC6aAFuEaNJdbKl1z+9/CGjuqn1ycGn1MuUvneEt0OzJ8zQ4SmM4b0dRbXk1eEtSV05BbTlzdGN2cGdrSFFHTVgyV29uaUY3Sk8xbkhGNGF2cXlsc2ZGRkNEclh5NHA2b3hiT0VtTmVRWGo3RXkvUWlCSEVRWXlqNWd2OVp0Wjh3bkUwb0syeW5WZWYzRFdkaXdFN3I5SDZMK2hUVXlWclY5WFJudDFTYWxkc3YvY2tNNVRWTGQzNzJxNmdQdlprQytzMFhpMGRVS1pSckRnRnNsY3NKNW81a2xXQVZYUVVwUnRMUmQvaGxKYVkwTHJkeTBDTElNaEZmQ3ppMWZ5YW9uMkRBR2R5SHk1cjU4ZEJ5b3BQZDNqM1ZFenVKbnpXWWFab09kaXZjRDdxRWxVWCtZeGM1VHdHeDFIckRMZ1RhSURIbldIU2UxWnN3PQ==\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0177, requestHost0177, requestPort0177, requestHeader0177, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0177 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1205
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [177] <- Index 177
		if(replayMode)
		{
			long proxyDataRecordId =1610513292664L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [178] <- WEB ADMIN Index 178 ---
		String requestProt0178 = "https";
		String requestHost0178 = "smetrics.morganstanley.com";
		int    requestPort0178 = 443;
		String requestFile0178 = "/b/ss/morganstanleywmprod,morganstanleyglobal/10/JS-2.22.0-LAWA/s15945580379346" +
				"?AQB=1" +
				"&ndh=1" +
				"&pf=1" +
				"&callback=s_c_il[1].doPostbacks" +
				"&et=1" +
				"&t=12%2F0%2F2021%2023%3A48%3A12%202%20300" +
				"&cid." +
				"&msoauth." +
				"&id=b04c7db1-0fe5-43df-80a5-82cc6d0b3a83" +
				"&as=1" +
				"&.msoauth" +
				"&.cid" +
				"&d." +
				"&nsid=0" +
				"&jsonv=1" +
				"&.d" +
				"&mid=30588150307500429323193657079021352466" +
				"&aamlh=7" +
				"&ce=ISO-8859-1" +
				"&fpCookieDomainPeriods=3" +
				"&pageName=financial%20wellness%20%7C%20dashboard" +
				"&g=https%3A%2F%2Fmso.morganstanleyclientserv.com%2Fatrium%2F%23%2Ffinwell%2Fdashboard" +
				"&r=%20" +
				"&cc=USD" +
				"&events=event6" +
				"&c12=https%3A%2F%2Fmso.morganstanleyclientserv.com%2Fatrium%2F%23%2Ffinwell%2Flife-events" +
				"&c20=financial%20wellness" +
				"&v20=financial%20wellness%20%7C%20dashboard%20%7C%20life%20events" +
				"&v21=https%3A%2F%2Fmso.morganstanleyclientserv.com%2Fatrium%2F%23%2Ffinwell%2Flife-events" +
				"&v22=explore%20life%20events" +
				"&v26=logged-in" +
				"&c39=MSO" +
				"&c40=website" +
				"&c41=logged-in" +
				"&c42=b04c7db1-0fe5-43df-80a5-82cc6d0b3a83" +
				"&v44=MSO" +
				"&v45=website" +
				"&v47=b04c7db1-0fe5-43df-80a5-82cc6d0b3a83" +
				"&c50=dashboard" +
				"&c51=life%20events" +
				"&v51=MSO%20%7C%20financial%20wellness%20%7C%20dashboard%20%7C%20life%20events" +
				"&v62=bbb001test" +
				"&v64=prospect" +
				"&v76=financial%20wellness" +
				"&v77=dashboard" +
				"&v78=life%20events" +
				"&v80=financial%20wellness" +
				"&pe=lnk_o" +
				"&pev2=custom%20click%20-%20Direct%20call%20Rule" +
				"&s=1920x1080" +
				"&c=24" +
				"&j=1.6" +
				"&v=N" +
				"&k=Y" +
				"&bw=1920" +
				"&bh=969" +
				"&mcorgid=9355F0CC5405D58C0A4C98A1%40AdobeOrg" +
				"&lrt=53" +
				"&AQE=1";
		String requestHeader0178 = "GET " + requestFile0178 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: smetrics.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0178, requestHost0178, requestPort0178, requestHeader0178, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0178 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5897
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [178] <- Index 178
		if(replayMode)
		{
			long proxyDataRecordId =1610513292722L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [179] <- WEB ADMIN Index 179 ---
		String requestProt0179 = "https";
		String requestHost0179 = "smetrics.morganstanley.com";
		int    requestPort0179 = 443;
		String requestFile0179 = "/b/ss/morganstanleywmprod,morganstanleyglobal/10/JS-2.22.0-LAWA/s11595071375238" +
				"?AQB=1" +
				"&ndh=1" +
				"&pf=1" +
				"&callback=s_c_il[1].doPostbacks" +
				"&et=1" +
				"&t=12%2F0%2F2021%2023%3A48%3A12%202%20300" +
				"&cid." +
				"&msoauth." +
				"&id=b04c7db1-0fe5-43df-80a5-82cc6d0b3a83" +
				"&as=1" +
				"&.msoauth" +
				"&.cid" +
				"&d." +
				"&nsid=0" +
				"&jsonv=1" +
				"&.d" +
				"&mid=30588150307500429323193657079021352466" +
				"&aamlh=7" +
				"&ce=ISO-8859-1" +
				"&fpCookieDomainPeriods=3" +
				"&pageName=financial%20wellness%20%7C%20dashboard%20%7C%20life%20events" +
				"&g=https%3A%2F%2Fmso.morganstanleyclientserv.com%2Fatrium%2F%23%2Ffinwell%2Flife-events" +
				"&r=%20" +
				"&cc=USD" +
				"&ch=financial%20wellness" +
				"&server=MS%20Online" +
				"&aamb=RKhpRz8krg2tLO6pguXWp5olkAcUniQYPHaMWWgdJ3xzPWQmdj0y" +
				"&v1=11PM" +
				"&c2=11PM" +
				"&v2=Tuesday" +
				"&c3=Tuesday" +
				"&v3=weekday" +
				"&c4=weekday" +
				"&v4=New" +
				"&c5=New" +
				"&v5=1" +
				"&c6=1" +
				"&v6=First%20Visit" +
				"&c7=First%20Visit" +
				"&c12=https%3A%2F%2Fmso.morganstanleyclientserv.com%2Fatrium%2F%23%2Ffinwell%2Flife-events" +
				"&c14=financial%20wellness%20%7C%20dashboard" +
				"&c20=financial%20wellness" +
				"&v20=financial%20wellness%20%7C%20dashboard%20%7C%20life%20events" +
				"&v21=https%3A%2F%2Fmso.morganstanleyclientserv.com%2Fatrium%2F%23%2Ffinwell%2Flife-events" +
				"&v26=logged-in" +
				"&c39=MSO" +
				"&c40=website" +
				"&c41=logged-in" +
				"&c42=b04c7db1-0fe5-43df-80a5-82cc6d0b3a83" +
				"&v44=MSO" +
				"&v45=website" +
				"&v47=b04c7db1-0fe5-43df-80a5-82cc6d0b3a83" +
				"&c50=dashboard" +
				"&c51=life%20events" +
				"&v51=MSO%20%7C%20financial%20wellness%20%7C%20dashboard%20%7C%20life%20events" +
				"&v62=bbb001test" +
				"&v64=prospect" +
				"&v76=financial%20wellness" +
				"&v77=dashboard" +
				"&v78=life%20events" +
				"&v80=financial%20wellness" +
				"&s=1920x1080" +
				"&c=24" +
				"&j=1.6" +
				"&v=N" +
				"&k=Y" +
				"&bw=1920" +
				"&bh=969" +
				"&mcorgid=9355F0CC5405D58C0A4C98A1%40AdobeOrg" +
				"&AQE=1";
		String requestHeader0179 = "GET " + requestFile0179 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: smetrics.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0179, requestHost0179, requestPort0179, requestHeader0179, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0179 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5897
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [179] <- Index 179
		if(replayMode)
		{
			long proxyDataRecordId =1610513292832L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #6.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_6(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #6: click on planning tab
		// # ------------------------------



		// --- HTTP REQUEST: Test [181] <- WEB ADMIN Index 181 ---
		String requestProt0181 = "https";
		String requestHost0181 = "smetrics.morganstanley.com";
		int    requestPort0181 = 443;
		String requestFile0181 = "/b/ss/morganstanleywmprod,morganstanleyglobal/10/JS-2.22.0-LAWA/s167758492450" +
				"?AQB=1" +
				"&ndh=1" +
				"&pf=1" +
				"&callback=s_c_il[1].doPostbacks" +
				"&et=1" +
				"&t=12%2F0%2F2021%2023%3A46%3A34%202%20300" +
				"&cid." +
				"&msoauth." +
				"&id=b04c7db1-0fe5-43df-80a5-82cc6d0b3a83" +
				"&as=1" +
				"&.msoauth" +
				"&.cid" +
				"&d." +
				"&nsid=0" +
				"&jsonv=1" +
				"&.d" +
				"&mid=30588150307500429323193657079021352466" +
				"&aamlh=7" +
				"&ce=ISO-8859-1" +
				"&fpCookieDomainPeriods=3" +
				"&pageName=financial%20wellness%20%7C%20dashboard" +
				"&g=https%3A%2F%2Fmso.morganstanleyclientserv.com%2Fatrium%2F%23%2Ffinwell%2Fdashboard" +
				"&r=%20" +
				"&cc=USD" +
				"&events=event6" +
				"&c12=https%3A%2F%2Fmso.morganstanleyclientserv.com%2Fatrium%2F%23%2Ffinwell%2Fdashboard" +
				"&c20=financial%20wellness" +
				"&v20=financial%20wellness%20%7C%20dashboard" +
				"&v21=https%3A%2F%2Fmso.morganstanleyclientserv.com%2Fatrium%2F%23%2Ffinwell%2Fdashboard" +
				"&v22=planning" +
				"&v26=logged-in" +
				"&c39=MSO" +
				"&c40=website" +
				"&c41=logged-in" +
				"&c42=b04c7db1-0fe5-43df-80a5-82cc6d0b3a83" +
				"&v44=MSO" +
				"&v45=website" +
				"&v47=b04c7db1-0fe5-43df-80a5-82cc6d0b3a83" +
				"&c50=dashboard" +
				"&v51=MSO%20%7C%20financial%20wellness%20%7C%20dashboard" +
				"&v76=financial%20wellness" +
				"&v77=dashboard" +
				"&pe=lnk_o" +
				"&pev2=event_clicked" +
				"&s=1920x1080" +
				"&c=24" +
				"&j=1.6" +
				"&v=N" +
				"&k=Y" +
				"&bw=1920" +
				"&bh=969" +
				"&mcorgid=9355F0CC5405D58C0A4C98A1%40AdobeOrg" +
				"&lrt=2147" +
				"&AQE=1";
		String requestHeader0181 = "GET " + requestFile0181 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: smetrics.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0181, requestHost0181, requestPort0181, requestHeader0181, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0181 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5897
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [181] <- Index 181
		if(replayMode)
		{
			long proxyDataRecordId =1610513194464L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [182] <- WEB ADMIN Index 182 ---
		String requestProt0182 = "https";
		String requestHost0182 = "mso.morganstanleyclientserv.com";
		int    requestPort0182 = 443;
		String requestFile0182 = "/atrium/lazy-lazy-retirement-module-ngfactory-31ecd969.js" +
				"?v=1607966054620";
		String requestHeader0182 = "GET " + requestFile0182 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0182, requestHost0182, requestPort0182, requestHeader0182, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("wUwVsrF7/NJpZpnBJYPPWzfQY7EuTITWvLgCXTSm6FaKamwHhKKwLOD2hwehy3YcqIGekxkADnJcd6/MhoDe5U9aOVc0Y2tpcWpFSEJaYWlmT0EyZ2g1TTdDdDIyVjZzU1lwdmFYeTJ2TklEZzN5eHJpelBrUlptRmVXMDZ5YVhMSmwzWFhSVXVWb2o2SnBOTEs4aStaNUdKZWNjTFB4RmZobHN2cEx4NitjRnRqdy9WelVtL2dUZ3NyUW44dDdSckJPQzZXZ0IycTI3ZGV0aStudVVTcDZpbjNZOENQM2NWWEprUU1QUDRUaU5DNGJQbHF2OWhncElxdTh5bUw2ZE9xcElNNXF5a1pGSUUwZDBsVXpOUlMvV2NwbVU5TTJUMWFhd2I2aHY2QWxOMHBKT1dkaUV5anRKTHBLQnVOUmRHeG1GKzNXTm00MllFeWVUZU1uLzJqR3hRRzlhRk81aXpxR1Fpb1BqanJRPQ==", XSRF_TOKEN_198);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0182 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 46895
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [182] <- Index 182
		if(replayMode)
		{
			long proxyDataRecordId =1610513194499L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [183] <- WEB ADMIN Index 183 ---
		String requestProt0183 = "https";
		String requestHost0183 = "mso.morganstanleyclientserv.com";
		int    requestPort0183 = 443;
		String requestFile0183 = "/shell/handler/restproxy/pfp/api/Planning/Get" +
				"?appId=overview" +
				"&RequestID=cc53-3a9d-a38d-e9c1-fbe0-cfec-6669-a08d" +
				"&SeqID=0000";
		String requestHeader0183 = "GET " + requestFile0183 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-XSRF-TOKEN: wUwVsrF7/NJpZpnBJYPPWzfQY7EuTITWvLgCXTSm6FaKamwHhKKwLOD2hwehy3YcqIGekxkADnJcd6/MhoDe5U9aOVc0Y2tpcWpFSEJaYWlmT0EyZ2g1TTdDdDIyVjZzU1lwdmFYeTJ2TklEZzN5eHJpelBrUlptRmVXMDZ5YVhMSmwzWFhSVXVWb2o2SnBOTEs4aStaNUdKZWNjTFB4RmZobHN2cEx4NitjRnRqdy9WelVtL2dUZ3NyUW44dDdSckJPQzZXZ0IycTI3ZGV0aStudVVTcDZpbjNZOENQM2NWWEprUU1QUDRUaU5DNGJQbHF2OWhncElxdTh5bUw2ZE9xcElNNXF5a1pGSUUwZDBsVXpOUlMvV2NwbVU5TTJUMWFhd2I2aHY2QWxOMHBKT1dkaUV5anRKTHBLQnVOUmRHeG1GKzNXTm00MllFeWVUZU1uLzJqR3hRRzlhRk81aXpxR1Fpb1BqanJRPQ==\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0183, requestHost0183, requestPort0183, requestHeader0183, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("wUwVsrF7/NJpZpnBJYPPWzfQY7EuTITWvLgCXTSm6FaKamwHhKKwLOD2hwehy3YcqIGekxkADnJcd6/MhoDe5U9aOVc0Y2tpcWpFSEJaYWlmT0EyZ2g1TTdDdDIyVjZzU1lwdmFYeTJ2TklEZzN5eHJpelBrUlptRmVXMDZ5YVhMSmwzWFhSVXVWb2o2SnBOTEs4aStaNUdKZWNjTFB4RmZobHN2cEx4NitjRnRqdy9WelVtL2dUZ3NyUW44dDdSckJPQzZXZ0IycTI3ZGV0aStudVVTcDZpbjNZOENQM2NWWEprUU1QUDRUaU5DNGJQbHF2OWhncElxdTh5bUw2ZE9xcElNNXF5a1pGSUUwZDBsVXpOUlMvV2NwbVU5TTJUMWFhd2I2aHY2QWxOMHBKT1dkaUV5anRKTHBLQnVOUmRHeG1GKzNXTm00MllFeWVUZU1uLzJqR3hRRzlhRk81aXpxR1Fpb1BqanJRPQ==", XSRF_TOKEN_198);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0183 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2141
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [183] <- Index 183
		if(replayMode)
		{
			long proxyDataRecordId =1610513194771L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		// setup var extractor for 'XSRF_TOKEN_268'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0183_1 = new BoundaryBasedExtractorItem( "XSRF_TOKEN=" , ";",1,false,false,0,false);
		boundaryBasedHeaderExtractorItem0183_1.setSaveLength(0);
		boundaryBasedHeaderExtractorItem0183_1.setSaveOffset(0);
		boundaryBasedHeaderExtractorItem0183_1.setOccurrenceAll(false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0183_1);

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'XSRF_TOKEN_268'
			XSRF_TOKEN_268 = boundaryBasedHeaderExtractorItem0183_1.getResultText();
			log("<<< XSRF_TOKEN_268 = " + XSRF_TOKEN_268);
			loopVarMap.put("XSRF_TOKEN_268", XSRF_TOKEN_268);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && XSRF_TOKEN_268!= null && XSRF_TOKEN_268.trim().length() == 0)
			{
				XSRF_TOKEN_268 = "";
				log("runtime note: the extraction of a new value for the variable 'XSRF_TOKEN_268' ends up with an empty string - a substitute value was set");
				log("<<< XSRF_TOKEN_268 = " + XSRF_TOKEN_268);
				loopVarMap.put("XSRF_TOKEN_268", XSRF_TOKEN_268);
			}
		}
		catch (Exception e) { XSRF_TOKEN_268 = null; log(e); }
		if (XSRF_TOKEN_268 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'XSRF_TOKEN_268' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [184] <- WEB ADMIN Index 184 ---
		String requestProt0184 = "https";
		String requestHost0184 = "starget.morganstanley.com";
		int    requestPort0184 = 443;
		String requestFile0184 = "/rest/v2/batchmbox" +
				"?client=morganstanleyandco" +
				"&sessionId=a1ea-8772-4dd7-3569-ffd4-db39-908e-bf6b" +
				"&RequestID=1482-14f6-bbe7-4ab4-6bde-be7c-1432-3465" +
				"&SeqID=0001";
		String requestHeader0184 = "OPTIONS " + requestFile0184 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: starget.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: */*\r\n" + 
				"Access-Control-Request-Method: POST\r\n" + 
				"Access-Control-Request-Headers: content-type,x-device-footprint,x-xsrf-token\r\n" + 
				"Origin: https://mso.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0184, requestHost0184, requestPort0184, requestHeader0184, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0184 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [184] <- Index 184
		if(replayMode)
		{
			long proxyDataRecordId =1610513194867L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [185] <- WEB ADMIN Index 185 ---
		String requestProt0185 = "https";
		String requestHost0185 = "starget.morganstanley.com";
		int    requestPort0185 = 443;
		String requestFile0185 = "/rest/v2/batchmbox" +
				"?client=morganstanleyandco" +
				"&sessionId=a1ea-8772-4dd7-3569-ffd4-db39-908e-bf6b" +
				"&RequestID=1482-14f6-bbe7-4ab4-6bde-be7c-1432-3465" +
				"&SeqID=0001";
		String requestContent0185 = 
				"{\"client\":\"morganstanleyandco\",\"id\":{\"marketingCloudVisitorId\":\"30588150307500429323193657079021352466\",\"thirdPartyId\":\"b04c7db1-0fe5-43df-80a5-82cc6d0b3a83\",\"customerIds\":[{\"id\":\"b04c7db1-0fe5-43df-80a5-82cc6d0b3a83\",\"integrationCode\":\"msoauth\",\"authenticatedState\":\"authenticated\"}]},\"aamParameters\":{\"blob\":\"RKhpRz8krg2tLO6pguXWp5olkAcUniQYPHaMWWgdJ3xzPWQmdj0y\",\"uuid\":\"30606228517811850363195508881591477034\",\"dcsLocationHint\":7},\"mboxes\":[{\"indexId\":0,\"mbox\":\"mbox_PFPCTAServer\",\"parameters\":{\"at_property\":\"5776c956-c962-6e9e-d932-1f1a0820d8a4\"}}]}";
		String requestHeader0185 = "POST " + requestFile0185 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: starget.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0185.getBytes().length + "\r\n" + 		// Content-Length: 554
				"X-DEVICE-FOOTPRINT: version=3.5.1_4&pm_fpua=mozilla/5.0 (windows nt 10.0; wow64) applewebkit/537.36 (khtml, like gecko) chrome/87.0.4280.88 safari/537.36|5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36|Win32&pm_fpsc=24|1920|1080|1040&pm_fpsw=&pm_fptz=-5&pm_fpln=lang=en-US|syslang=|userlang=&pm_fpjv=0&pm_fpco=1&pm_fpasw=internal-pdf-viewer|mhjfbmdgcfjbbpaeojofohoefgiehjai|internal-nacl-plugin&pm_fpan=Netscape&pm_fpacn=Mozilla&pm_fpol=true&pm_fposp=&pm_fpup=&pm_fpsaw=1920&pm_fpspd=24&pm_fpsbd=&pm_fpsdx=&pm_fpsdy=&pm_fpslx=&pm_fpsly=&pm_fpsfse=&pm_fpsui=&pm_os=Windows&pm_brmjv=87&pm_br=Chrome&pm_inpt=&pm_expt=\r\n" + 
				"Accept: application/json\r\n" + 
				"X-XSRF-TOKEN: wUwVsrF7/NJpZpnBJYPPWzfQY7EuTITWvLgCXTSm6FaKamwHhKKwLOD2hwehy3YcqIGekxkADnJcd6/MhoDe5U9aOVc0Y2tpcWpFSEJaYWlmT0EyZ2g1TTdDdDIyVjZzU1lwdmFYeTJ2TklEZzN5eHJpelBrUlptRmVXMDZ5YVhMSmwzWFhSVXVWb2o2SnBOTEs4aStaNUdKZWNjTFB4RmZobHN2cEx4NitjRnRqdy9WelVtL2dUZ3NyUW44dDdSckJPQzZXZ0IycTI3ZGV0aStudVVTcDZpbjNZOENQM2NWWEprUU1QUDRUaU5DNGJQbHF2OWhncElxdTh5bUw2ZE9xcElNNXF5a1pGSUUwZDBsVXpOUlMvV2NwbVU5TTJUMWFhd2I2aHY2QWxOMHBKT1dkaUV5anRKTHBLQnVOUmRHeG1GKzNXTm00MllFeWVUZU1uLzJqR3hRRzlhRk81aXpxR1Fpb1BqanJRPQ==\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/json\r\n" + 
				"Origin: https://mso.morganstanleyclientserv.com\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0185, requestHost0185, requestPort0185, requestHeader0185, requestContent0185.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("wUwVsrF7/NJpZpnBJYPPWzfQY7EuTITWvLgCXTSm6FaKamwHhKKwLOD2hwehy3YcqIGekxkADnJcd6/MhoDe5U9aOVc0Y2tpcWpFSEJaYWlmT0EyZ2g1TTdDdDIyVjZzU1lwdmFYeTJ2TklEZzN5eHJpelBrUlptRmVXMDZ5YVhMSmwzWFhSVXVWb2o2SnBOTEs4aStaNUdKZWNjTFB4RmZobHN2cEx4NitjRnRqdy9WelVtL2dUZ3NyUW44dDdSckJPQzZXZ0IycTI3ZGV0aStudVVTcDZpbjNZOENQM2NWWEprUU1QUDRUaU5DNGJQbHF2OWhncElxdTh5bUw2ZE9xcElNNXF5a1pGSUUwZDBsVXpOUlMvV2NwbVU5TTJUMWFhd2I2aHY2QWxOMHBKT1dkaUV5anRKTHBLQnVOUmRHeG1GKzNXTm00MllFeWVUZU1uLzJqR3hRRzlhRk81aXpxR1Fpb1BqanJRPQ==", XSRF_TOKEN_198);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0185 = null;		// support garbage collector to reduce memory
		requestContent0185 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 401
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [185] <- Index 185
		if(replayMode)
		{
			long proxyDataRecordId =1610513194895L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [186] <- WEB ADMIN Index 186 ---
		String requestProt0186 = "https";
		String requestHost0186 = "digitalcontent.morganstanleyclientserv.com";
		int    requestPort0186 = 443;
		String requestFile0186 = "/content/experience-fragments/mso_targeted_ads/pfp/pfp-default/master.html";
		String requestHeader0186 = "OPTIONS " + requestFile0186 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: digitalcontent.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: */*\r\n" + 
				"Access-Control-Request-Method: GET\r\n" + 
				"Access-Control-Request-Headers: x-xsrf-token\r\n" + 
				"Origin: https://mso.morganstanleyclientserv.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0186, requestHost0186, requestPort0186, requestHeader0186, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0186 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 6
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [186] <- Index 186
		if(replayMode)
		{
			long proxyDataRecordId =1610513195008L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [187] <- WEB ADMIN Index 187 ---
		log();
		log("# title: PFP DEFAULT");
		String requestProt0187 = "https";
		String requestHost0187 = "digitalcontent.morganstanleyclientserv.com";
		int    requestPort0187 = 443;
		String requestFile0187 = "/content/experience-fragments/mso_targeted_ads/pfp/pfp-default/master.html";
		String requestHeader0187 = "GET " + requestFile0187 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: digitalcontent.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-XSRF-TOKEN: wUwVsrF7/NJpZpnBJYPPWzfQY7EuTITWvLgCXTSm6FaKamwHhKKwLOD2hwehy3YcqIGekxkADnJcd6/MhoDe5U9aOVc0Y2tpcWpFSEJaYWlmT0EyZ2g1TTdDdDIyVjZzU1lwdmFYeTJ2TklEZzN5eHJpelBrUlptRmVXMDZ5YVhMSmwzWFhSVXVWb2o2SnBOTEs4aStaNUdKZWNjTFB4RmZobHN2cEx4NitjRnRqdy9WelVtL2dUZ3NyUW44dDdSckJPQzZXZ0IycTI3ZGV0aStudVVTcDZpbjNZOENQM2NWWEprUU1QUDRUaU5DNGJQbHF2OWhncElxdTh5bUw2ZE9xcElNNXF5a1pGSUUwZDBsVXpOUlMvV2NwbVU5TTJUMWFhd2I2aHY2QWxOMHBKT1dkaUV5anRKTHBLQnVOUmRHeG1GKzNXTm00MllFeWVUZU1uLzJqR3hRRzlhRk81aXpxR1Fpb1BqanJRPQ==\r\n" + 
				"Origin: https://mso.morganstanleyclientserv.com\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0187, requestHost0187, requestPort0187, requestHeader0187, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("wUwVsrF7/NJpZpnBJYPPWzfQY7EuTITWvLgCXTSm6FaKamwHhKKwLOD2hwehy3YcqIGekxkADnJcd6/MhoDe5U9aOVc0Y2tpcWpFSEJaYWlmT0EyZ2g1TTdDdDIyVjZzU1lwdmFYeTJ2TklEZzN5eHJpelBrUlptRmVXMDZ5YVhMSmwzWFhSVXVWb2o2SnBOTEs4aStaNUdKZWNjTFB4RmZobHN2cEx4NitjRnRqdy9WelVtL2dUZ3NyUW44dDdSckJPQzZXZ0IycTI3ZGV0aStudVVTcDZpbjNZOENQM2NWWEprUU1QUDRUaU5DNGJQbHF2OWhncElxdTh5bUw2ZE9xcElNNXF5a1pGSUUwZDBsVXpOUlMvV2NwbVU5TTJUMWFhd2I2aHY2QWxOMHBKT1dkaUV5anRKTHBLQnVOUmRHeG1GKzNXTm00MllFeWVUZU1uLzJqR3hRRzlhRk81aXpxR1Fpb1BqanJRPQ==", XSRF_TOKEN_198);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0187 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1459
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [187] <- Index 187
		if(replayMode)
		{
			long proxyDataRecordId =1610513195085L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [188] <- WEB ADMIN Index 188 ---
		log();
		log("# title: 404 - File or directory not found.");
		String requestProt0188 = "https";
		String requestHost0188 = "mso.morganstanleyclientserv.com";
		int    requestPort0188 = 443;
		String requestFile0188 = "/libs/cq/experience-fragments/components/xfpage/css.min.css";
		String requestHeader0188 = "GET " + requestFile0188 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mso.morganstanleyclientserv.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/atrium/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0188, requestHost0188, requestPort0188, requestHeader0188, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("lLlEv5KZkKgFOuqWFf/gLRs1T1s3ClbYm1GsZkZNzljx80aeuyh8spXJ1w+UiKjXzc90gaxMFhhFypUGPOA2UnZaTTZGL3Y5aytOQU5uR21BSllUaG1hQzB0eE1zQ2U3b3doOTNudWV3K0RaV0JyN2hiTXV5czZmNE9KM1FJbzJaQ0gwQnNQREZXSmczV3FBVkRTRTN6aVRacGlLQTlVWFo3Q2hOSGRxZjRkamsxM0hTUEtHN0lsSDZSU1ZTYzdKbXJ3SklCOXR0d2FoMTJQMFBGR0V1NE5DRW42dFcyakg3Y1lHSXBPNFlRYjRIL1NwRHI1d25nTE42UHFiODE4NE4vNjhQcGhNdngrRTRROE9UdisybFBOZm0vUVlucjEwRWxKYm55SWw4dUllTUhqd2kzcnVGTHFKbGNrUmpZV0M4VHVSMEhwVEIwVkVRdXBXREl2MUE5QUpYQmdWQmlLTk9Nd2VyZGhmd1c4PQ==", XSRF_TOKEN_268);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0188 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = [verification disabled], content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 1245
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, null, null, null, null);		// Test [188] <- Index 188
		if(replayMode)
		{
			long proxyDataRecordId =1610513195325L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #6 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #7.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_7(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #7: Click on each” learn more”
		// # -----------------------------------



		// --- HTTP REQUEST: Test [190] <- WEB ADMIN Index 190 ---
		log();
		log("# title: Financial Wellness");
		String requestProt0190 = "https";
		String requestHost0190 = "financialwellness.morganstanley.com";
		int    requestPort0190 = 443;
		String requestFile0190 = "/wws/program/finwell.html/leadgencta";
		String requestHeader0190 = "GET " + requestFile0190 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Sec-Fetch-Dest: document\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0190, requestHost0190, requestPort0190, requestHeader0190, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0190 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 3584
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [190] <- Index 190
		if(replayMode)
		{
			long proxyDataRecordId =1610513248958L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [191] <- WEB ADMIN Index 191 ---
		String requestProt0191 = "https";
		String requestHost0191 = "financialwellness.morganstanley.com";
		int    requestPort0191 = 443;
		String requestFile0191 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/styles.14a37be819ceb9d3ce86.css";
		String requestHeader0191 = "GET " + requestFile0191 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0191, requestHost0191, requestPort0191, requestHeader0191, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0191 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 70757
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [191] <- Index 191
		if(replayMode)
		{
			long proxyDataRecordId =1610513249603L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [192] <- WEB ADMIN Index 192 ---
		String requestProt0192 = "https";
		String requestHost0192 = "financialwellness.morganstanley.com";
		int    requestPort0192 = 443;
		String requestFile0192 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/polyfills-es2015.2870203b30e6a163935e.js";
		String requestHeader0192 = "GET " + requestFile0192 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0192, requestHost0192, requestPort0192, requestHeader0192, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0192 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 45937
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [192] <- Index 192
		if(replayMode)
		{
			long proxyDataRecordId =1610513249640L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [193] <- WEB ADMIN Index 193 ---
		String requestProt0193 = "https";
		String requestHost0193 = "financialwellness.morganstanley.com";
		int    requestPort0193 = 443;
		String requestFile0193 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/scripts.e454dd0842cd3c67f3c5.js";
		String requestHeader0193 = "GET " + requestFile0193 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0193, requestHost0193, requestPort0193, requestHeader0193, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0193 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 40737
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [193] <- Index 193
		if(replayMode)
		{
			long proxyDataRecordId =1610513249641L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [194] <- WEB ADMIN Index 194 ---
		String requestProt0194 = "https";
		String requestHost0194 = "financialwellness.morganstanley.com";
		int    requestPort0194 = 443;
		String requestFile0194 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/runtime-es2015.506a3b4f3e7ad39ef626.js";
		String requestHeader0194 = "GET " + requestFile0194 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0194, requestHost0194, requestPort0194, requestHeader0194, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0194 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1233
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [194] <- Index 194
		if(replayMode)
		{
			long proxyDataRecordId =1610513249642L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [195] <- WEB ADMIN Index 195 ---
		String requestProt0195 = "https";
		String requestHost0195 = "financialwellness.morganstanley.com";
		int    requestPort0195 = 443;
		String requestFile0195 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/main-es2015.19fc2af3d4cd45846b58.js";
		String requestHeader0195 = "GET " + requestFile0195 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0195, requestHost0195, requestPort0195, requestHeader0195, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0195 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 217662
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [195] <- Index 195
		if(replayMode)
		{
			long proxyDataRecordId =1610513249643L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [196] <- WEB ADMIN Index 196 ---
		String requestProt0196 = "https";
		String requestHost0196 = "financialwellness.morganstanley.com";
		int    requestPort0196 = 443;
		String requestFile0196 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/vendor-es2015.64964b93d7603d935165.js";
		String requestHeader0196 = "GET " + requestFile0196 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0196, requestHost0196, requestPort0196, requestHeader0196, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0196 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1036418
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [196] <- Index 196
		if(replayMode)
		{
			long proxyDataRecordId =1610513249644L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [197] <- WEB ADMIN Index 197 ---
		String requestProt0197 = "https";
		String requestHost0197 = "financialwellness.morganstanley.com";
		int    requestPort0197 = 443;
		String requestFile0197 = "/libraries/81151d59dno2198935acf48464202bd";
		String requestHeader0197 = "GET " + requestFile0197 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0197, requestHost0197, requestPort0197, requestHeader0197, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0197 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 18338
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [197] <- Index 197
		if(replayMode)
		{
			long proxyDataRecordId =1610513249673L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [198] <- WEB ADMIN Index 198 ---
		String requestProt0198 = "https";
		String requestHost0198 = "financialwellness.morganstanley.com";
		int    requestPort0198 = 443;
		String requestFile0198 = "/wws/program/finwell.html/leadgencta";
		String requestHeader0198 = "HEAD " + requestFile0198 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0198, requestHost0198, requestPort0198, requestHeader0198, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0198 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [198] <- Index 198
		if(replayMode)
		{
			long proxyDataRecordId =1610513249858L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [199] <- WEB ADMIN Index 199 ---
		String requestProt0199 = "https";
		String requestHost0199 = "financialwellness.morganstanley.com";
		int    requestPort0199 = 443;
		String requestFile0199 = "/libraries/81151d59dno2198935acf48464202bd";
		String requestContent0199 = 
				"{\"sensor_data\":\"7a74G7m23Vrp0o5c9125791.66-1,2,-94,-100,Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36,uaend,12147,20030107,en-US,Gecko,3,0,0,0,396262,3249840,1920,1040,1920,1080,1920,969,1920,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,fc:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,7920,0.352194028176,805256624918.5,0,loc:-1,2,-94,-101,do_en,dm_en,t_en-1,2,-94,-105,-1,2,-94,-102,-1,2,-94,-108,-1,2,-94,-110,-1,2,-94,-117,-1,2,-94,-111,-1,2,-94,-109,-1,2,-94,-114,-1,2,-94,-103,-1,2,-94,-112,https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta-1,2,-94,-115,1,32,32,0,0,0,0,5,0,1610513249837,-999999,17228,0,0,2871,0,0,11,0,0,27D4FA18E34094C6191A8C7D9089D75F~-1~YAAQrPo7F6D9S/V2AQAAZ/QR+gUoJVzfrBjyHSRctanVQmEGG1kPDx4H6GoWH66RljL7k8z+PSnM5dwRIgsKPKL1syxJZ4Cv0sc7WpKEB9E1OhiRhOWmP7JMHR2emhGz9arXgiBu/3+f6JqGp17MebXWoOoq+fefRMkx41YICSUPDddlSzszjqDiG3FHH6yGAKbpfl+EcU5aFlZABXLpfuRWv3lhjX28Xac7EJTMvsHdi/0orwSJJVYvLNY6zS7Suyr238ts79IxxgEdq8W0NE+1FuXIFjwIPEVGUBi4IzmCvU2I0FPdvchqkYHpeiuxJLcYRLoh1C1X5jTxuPst2s6TNkelZ1oDLe/eaLDe~-1~-1~-1,33433,-1,-1,30261693,PiZtE,89791,59-1,2,-94,-106,0,0-1,2,-94,-119,-1-1,2,-94,-122,0,0,0,0,1,0,0-1,2,-94,-123,-1,2,-94,-124,-1,2,-94,-126,-1,2,-94,-127,8-1,2,-94,-70,-1-1,2,-94,-80,94-1,2,-94,-116,2193642150-1,2,-94,-118,84241-1,2,-94,-129,-1,2,-94,-121,;12;-1;0\"}";
		byte[] requestContentBinary0199 = requestContent0199.getBytes("UTF-8");
		String requestHeader0199 = "POST " + requestFile0199 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContentBinary0199.length + "\r\n" + 		// Content-Length: 1380
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain;charset=UTF-8\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0199, requestHost0199, requestPort0199, requestHeader0199, requestContentBinary0199, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0199 = null;		// support garbage collector to reduce memory
		requestContent0199 = null;		// support garbage collector to reduce memory
		requestContentBinary0199 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 201, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 17
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {201}, "APPLICATION/JSON", null, null);		// Test [199] <- Index 199
		if(replayMode)
		{
			long proxyDataRecordId =1610513249902L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [200] <- WEB ADMIN Index 200 ---
		String requestProt0200 = "https";
		String requestHost0200 = "assets.adobedtm.com";
		int    requestPort0200 = 443;
		String requestFile0200 = "/launch-EN00f9bc705c81457d9fbddafbfe62ac8b.min.js";
		String requestHeader0200 = "GET " + requestFile0200 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: assets.adobedtm.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0200, requestHost0200, requestPort0200, requestHeader0200, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0200 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 71743
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [200] <- Index 200
		if(replayMode)
		{
			long proxyDataRecordId =1610513249970L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [201] <- WEB ADMIN Index 201 ---
		String requestProt0201 = "https";
		String requestHost0201 = "assets.adobedtm.com";
		int    requestPort0201 = 443;
		String requestFile0201 = "/extensions/EP143333dab9bb4582a773c81f3a840074/AppMeasurement.min.js";
		String requestHeader0201 = "GET " + requestFile0201 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: assets.adobedtm.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0201, requestHost0201, requestPort0201, requestHeader0201, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0201 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 12569
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [201] <- Index 201
		if(replayMode)
		{
			long proxyDataRecordId =1610513250208L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [202] <- WEB ADMIN Index 202 ---
		String requestProt0202 = "https";
		String requestHost0202 = "morganstanleyandco.tt.omtrdc.net";
		int    requestPort0202 = 443;
		String requestFile0202 = "/m2/morganstanleyandco/mbox/json" +
				"?mbox=target-global-mbox" +
				"&mboxSession=52f2de5bbb7448f59394fd988920e26e" +
				"&mboxPC=52f2de5bbb7448f59394fd988920e26e.34_0" +
				"&mboxPage=f685d1de0df746e89b8df29451124dcb" +
				"&mboxRid=f9dfcc5fc712484b9c4059011338d24f" +
				"&mboxVersion=1.7.1" +
				"&mboxCount=1" +
				"&mboxTime=1610495250255" +
				"&mboxHost=financialwellness.morganstanley.com" +
				"&mboxURL=https%3A%2F%2Ffinancialwellness.morganstanley.com%2Fwws%2Fprogram%2Ffinwell.html%2Fleadgencta" +
				"&mboxReferrer=https%3A%2F%2Fmso.morganstanleyclientserv.com%2F" +
				"&mboxXDomain=enabled" +
				"&browserHeight=969" +
				"&browserWidth=1920" +
				"&browserTimeOffset=-300" +
				"&screenHeight=1080" +
				"&screenWidth=1920" +
				"&colorDepth=24" +
				"&devicePixelRatio=1" +
				"&screenOrientation=landscape" +
				"&webGLRenderer=Google%20SwiftShader" +
				"&wellnessCat=Retirement" +
				"&legalEntity=%22finwell2genericcorp%22" +
				"&age=0" +
				"&income=" +
				"&isAssessmentTaken=false" +
				"&targetUserType=fw" +
				"&at_property=9e038d44-6a49-1d31-c9e4-de84301a27a7" +
				"&us=" +
				"&mboxMCSDID=67723CD94E3357D3-7F404E7745D044FB" +
				"&mboxMCGVID=30588150307500429323193657079021352466" +
				"&mboxAAMB=RKhpRz8krg2tLO6pguXWp5olkAcUniQYPHaMWWgdJ3xzPWQmdj0y" +
				"&mboxMCGLH=7";
		String requestHeader0202 = "GET " + requestFile0202 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: morganstanleyandco.tt.omtrdc.net\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0202, requestHost0202, requestPort0202, requestHeader0202, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0202 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2718
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [202] <- Index 202
		if(replayMode)
		{
			long proxyDataRecordId =1610513250332L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [203] <- WEB ADMIN Index 203 ---
		String requestProt0203 = "https";
		String requestHost0203 = "financialwellness.morganstanley.com";
		int    requestPort0203 = 443;
		String requestFile0203 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_programdata-results.fw_program_wm.json";
		String requestHeader0203 = "GET " + requestFile0203 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0203, requestHost0203, requestPort0203, requestHeader0203, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0203 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 515
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [203] <- Index 203
		if(replayMode)
		{
			long proxyDataRecordId =1610513250845L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [204] <- WEB ADMIN Index 204 ---
		String requestProt0204 = "https";
		String requestHost0204 = "financialwellness.morganstanley.com";
		int    requestPort0204 = 443;
		String requestFile0204 = "/libraries/81151d59dno2198935acf48464202bd";
		String requestContent0204 = 
				"{\"sensor_data\":\"7a74G7m23Vrp0o5c9125791.66-1,2,-94,-100,Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36,uaend,12147,20030107,en-US,Gecko,3,0,0,0,396262,3249840,1920,1040,1920,1080,1920,969,1920,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,fc:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,7920,0.748430288374,805256624918.5,0,loc:-1,2,-94,-101,do_en,dm_en,t_en-1,2,-94,-105,-1,2,-94,-102,-1,2,-94,-108,-1,2,-94,-110,0,1,186,1356,199;1,1,363,1347,202;2,1,432,1326,203;3,1,608,1160,192;4,1,995,929,122;-1,2,-94,-117,-1,2,-94,-111,0,371,-1,-1,-1;-1,2,-94,-109,0,277,-1,-1,-1,-1,-1,-1,-1,-1,-1;-1,2,-94,-114,-1,2,-94,-103,-1,2,-94,-112,https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta-1,2,-94,-115,1,9667,32,371,277,0,10283,1074,0,1610513249837,77,17228,0,5,2871,0,0,1075,3232,0,27D4FA18E34094C6191A8C7D9089D75F~-1~YAAQrPo7F6f9S/V2AQAAuPkR+gXufJWqaTWs8Yi8v163eX2vBy5t3grr6qx4tN0mKo2XT9zi1Y0KHxdlNU205azp6vQj767SeqCMpY9dvitzchD/KEwZAl4XjDwtvMZLsjBE/fhfAv7Xo3CFt5KRgTi6nGpTc8UTonWdjF7O7w0RETyeGbksVhl5vVEHTGIg3KJ/bIDt1ZC6l4SouUuC9QY3n7n7n+cfu6198uBys6fWj4ButOw2KnFxJB6x2SR8hun/HPP38LHKa6DDNcA7XpUq0A/H3y5oQjb08nwFjhXctrC/cH2tKr45UohY8280Tc1eEf21g9DJ2qE2etj2ktKxsV7RK8KDQY25KTY=~0~-1~-1,32753,580,-617432212,30261693,PiZtE,83214,89-1,2,-94,-106,9,1-1,2,-94,-119,87,271,214,222,96,144,91,87,89,98,86,85,81,499,-1,2,-94,-122,0,0,0,0,1,0,0-1,2,-94,-123,-1,2,-94,-124,-1,2,-94,-126,-1,2,-94,-127,00321144241322243122-1,2,-94,-70,-1752250632;-915298718;dis;,7,8;true;true;true;300;true;24;24;true;false;-1-1,2,-94,-80,5579-1,2,-94,-116,2193642150-1,2,-94,-118,94461-1,2,-94,-129,33c6f54e72ed2196a148f981eb3a5bd51bb6639069e41454a91411e89e70f64e,1,0,,,,0-1,2,-94,-121,;92;18;0\"}";
		byte[] requestContentBinary0204 = requestContent0204.getBytes("UTF-8");
		String requestHeader0204 = "POST " + requestFile0204 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContentBinary0204.length + "\r\n" + 		// Content-Length: 1745
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain;charset=UTF-8\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0204, requestHost0204, requestPort0204, requestHeader0204, requestContentBinary0204, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0204 = null;		// support garbage collector to reduce memory
		requestContent0204 = null;		// support garbage collector to reduce memory
		requestContentBinary0204 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 201, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 17
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {201}, "APPLICATION/JSON", null, null);		// Test [204] <- Index 204
		if(replayMode)
		{
			long proxyDataRecordId =1610513251017L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [205] <- WEB ADMIN Index 205 ---
		String requestProt0205 = "https";
		String requestHost0205 = "financialwellness.morganstanley.com";
		int    requestPort0205 = 443;
		String requestFile0205 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_transformation-results.fw_c_feed_d_wm.json";
		String requestHeader0205 = "GET " + requestFile0205 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0205, requestHost0205, requestPort0205, requestHeader0205, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0205 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 44650
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [205] <- Index 205
		if(replayMode)
		{
			long proxyDataRecordId =1610513251099L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [206] <- WEB ADMIN Index 206 ---
		String requestProt0206 = "https";
		String requestHost0206 = "financialwellness.morganstanley.com";
		int    requestPort0206 = 443;
		String requestFile0206 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_transformation-results.fw_finwell_properties_wm.json";
		String requestHeader0206 = "GET " + requestFile0206 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0206, requestHost0206, requestPort0206, requestHeader0206, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0206 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 894
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [206] <- Index 206
		if(replayMode)
		{
			long proxyDataRecordId =1610513251100L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [207] <- WEB ADMIN Index 207 ---
		String requestProt0207 = "https";
		String requestHost0207 = "financialwellness.morganstanley.com";
		int    requestPort0207 = 443;
		String requestFile0207 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_transformation-results.fw_popup_retake_assmnt_wm.json";
		String requestHeader0207 = "GET " + requestFile0207 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0207, requestHost0207, requestPort0207, requestHeader0207, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0207 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 436
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [207] <- Index 207
		if(replayMode)
		{
			long proxyDataRecordId =1610513251197L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [208] <- WEB ADMIN Index 208 ---
		String requestProt0208 = "https";
		String requestHost0208 = "financialwellness.morganstanley.com";
		int    requestPort0208 = 443;
		String requestFile0208 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_transformation-results.fw_flagged_msg_wm.json";
		String requestHeader0208 = "GET " + requestFile0208 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0208, requestHost0208, requestPort0208, requestHeader0208, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0208 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 403
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [208] <- Index 208
		if(replayMode)
		{
			long proxyDataRecordId =1610513251240L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [209] <- WEB ADMIN Index 209 ---
		String requestProt0209 = "https";
		String requestHost0209 = "financialwellness.morganstanley.com";
		int    requestPort0209 = 443;
		String requestFile0209 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_transformation-results.fw_popup_thrd_party_warn_wm.json";
		String requestHeader0209 = "GET " + requestFile0209 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0209, requestHost0209, requestPort0209, requestHeader0209, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0209 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 524
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [209] <- Index 209
		if(replayMode)
		{
			long proxyDataRecordId =1610513251243L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #7 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #7_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_7_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #7 (fragment 2 of 4)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [210] <- WEB ADMIN Index 210 ---
		String requestProt0210 = "https";
		String requestHost0210 = "financialwellness.morganstanley.com";
		int    requestPort0210 = 443;
		String requestFile0210 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_transformation-results.fw_footer_wm.json";
		String requestHeader0210 = "GET " + requestFile0210 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0210, requestHost0210, requestPort0210, requestHeader0210, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0210 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 610
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [210] <- Index 210
		if(replayMode)
		{
			long proxyDataRecordId =1610513251258L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [211] <- WEB ADMIN Index 211 ---
		String requestProt0211 = "https";
		String requestHost0211 = "financialwellness.morganstanley.com";
		int    requestPort0211 = 443;
		String requestFile0211 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_transformation-results.fw_lead_w_h_wm.json";
		String requestHeader0211 = "GET " + requestFile0211 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0211, requestHost0211, requestPort0211, requestHeader0211, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0211 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1019
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [211] <- Index 211
		if(replayMode)
		{
			long proxyDataRecordId =1610513251259L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [212] <- WEB ADMIN Index 212 ---
		log();
		log("# title: Financial Wellness");
		String requestProt0212 = "https";
		String requestHost0212 = "financialwellness.morganstanley.com";
		int    requestPort0212 = 443;
		String requestFile0212 = "/wws/program/finwell.html/null";
		String requestHeader0212 = "GET " + requestFile0212 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0212, requestHost0212, requestPort0212, requestHeader0212, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0212 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 3580
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [212] <- Index 212
		if(replayMode)
		{
			long proxyDataRecordId =1610513251264L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [213] <- WEB ADMIN Index 213 ---
		log();
		log("# title: 404 Not Found");
		String requestProt0213 = "https";
		String requestHost0213 = "financialwellness.morganstanley.com";
		int    requestPort0213 = 443;
		String requestFile0213 = "/common-ui/fonts/Karla.ttf";
		String requestHeader0213 = "GET " + requestFile0213 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/styles.14a37be819ceb9d3ce86.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0213, requestHost0213, requestPort0213, requestHeader0213, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0213 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = [verification disabled], content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 196
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, null, null, null, null);		// Test [213] <- Index 213
		if(replayMode)
		{
			long proxyDataRecordId =1610513251303L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [214] <- WEB ADMIN Index 214 ---
		String requestProt0214 = "https";
		String requestHost0214 = "smetrics.morganstanley.com";
		int    requestPort0214 = 443;
		String requestFile0214 = "/b/ss/morganstanleywpwealthprod,morganstanleyglobal/1/JS-2.9.0-LAWA/s14685041656042" +
				"?AQB=1" +
				"&ndh=1" +
				"&pf=1" +
				"&t=12%2F0%2F2021%2023%3A47%3A31%202%20300" +
				"&sdid=67723CD94E3357D3-7F404E7745D044FB" +
				"&mid=30588150307500429323193657079021352466" +
				"&aamlh=7" +
				"&ce=UTF-8" +
				"&pageName=financial%20wellness%20%7C%20lead%20form%20%7C%20core" +
				"&g=https%3A%2F%2Ffinancialwellness.morganstanley.com%2Fwws%2Fprogram%2Ffinwell.html%2Fleadgencta" +
				"&r=https%3A%2F%2Fmso.morganstanleyclientserv.com%2F" +
				"&aamb=RKhpRz8krg2tLO6pguXWp5olkAcUniQYPHaMWWgdJ3xzPWQmdj0y" +
				"&v1=11PM" +
				"&c2=D%3Dv1" +
				"&v2=Tuesday" +
				"&c3=D%3Dv2" +
				"&v3=weekday" +
				"&c4=D%3Dv3" +
				"&v4=New" +
				"&c5=D%3Dv4" +
				"&v5=1" +
				"&c6=D%3Dv5" +
				"&v6=First%20Visit" +
				"&c7=D%3Dv6" +
				"&c12=https%3A%2F%2Ffinancialwellness.morganstanley.com%2Fwws%2Fprogram%2Ffinwell.html%2Fleadgencta" +
				"&v14=25" +
				"&v21=https%3A%2F%2Ffinancialwellness.morganstanley.com%2Fwws%2Fprogram%2Ffinwell.html%2Fleadgencta" +
				"&c22=core" +
				"&c31=D%3Dv34" +
				"&c32=Retirement" +
				"&c34=Article" +
				"&c39=financial%20wellness" +
				"&v41=default" +
				"&v44=financial%20wellness" +
				"&v45=desktop" +
				"&v51=financial%20wellness%20%7C%20financial%20wellness" +
				"&v60=default" +
				"&v76=financial%20wellness" +
				"&v77=lead%20form" +
				"&v78=core" +
				"&v93=%22fw%22" +
				"&v111=default" +
				"&s=1920x1080" +
				"&c=24" +
				"&j=1.6" +
				"&v=N" +
				"&k=Y" +
				"&bw=1920" +
				"&bh=969" +
				"&mcorgid=9355F0CC5405D58C0A4C98A1%40AdobeOrg" +
				"&AQE=1";
		String requestHeader0214 = "GET " + requestFile0214 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: smetrics.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0214, requestHost0214, requestPort0214, requestHeader0214, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0214 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [214] <- Index 214
		if(replayMode)
		{
			long proxyDataRecordId =1610513251478L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [215] <- WEB ADMIN Index 215 ---
		String requestProt0215 = "https";
		String requestHost0215 = "financialwellness.morganstanley.com";
		int    requestPort0215 = 443;
		String requestFile0215 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/icomoon.woff";
		String requestHeader0215 = "GET " + requestFile0215 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/styles.14a37be819ceb9d3ce86.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0215, requestHost0215, requestPort0215, requestHeader0215, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0215 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF", header text fragment = [verification disabled], recorded content size = 87508
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF", null, null);		// Test [215] <- Index 215
		if(replayMode)
		{
			long proxyDataRecordId =1610513251491L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [216] <- WEB ADMIN Index 216 ---
		String requestProt0216 = "https";
		String requestHost0216 = "financialwellness.morganstanley.com";
		int    requestPort0216 = 443;
		String requestFile0216 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/karla-regular-webfont.ttf";
		String requestHeader0216 = "GET " + requestFile0216 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/styles.14a37be819ceb9d3ce86.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0216, requestHost0216, requestPort0216, requestHeader0216, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0216 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-TTF", header text fragment = [verification disabled], recorded content size = 17231
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-TTF", null, null);		// Test [216] <- Index 216
		if(replayMode)
		{
			long proxyDataRecordId =1610513251492L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [217] <- WEB ADMIN Index 217 ---
		String requestProt0217 = "https";
		String requestHost0217 = "financialwellness.morganstanley.com";
		int    requestPort0217 = 443;
		String requestFile0217 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/karla-bold-webfont.ttf";
		String requestHeader0217 = "GET " + requestFile0217 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/styles.14a37be819ceb9d3ce86.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0217, requestHost0217, requestPort0217, requestHeader0217, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0217 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-TTF", header text fragment = [verification disabled], recorded content size = 17958
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-TTF", null, null);		// Test [217] <- Index 217
		if(replayMode)
		{
			long proxyDataRecordId =1610513251638L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [218] <- WEB ADMIN Index 218 ---
		String requestProt0218 = "https";
		String requestHost0218 = "financialwellness.morganstanley.com";
		int    requestPort0218 = 443;
		String requestFile0218 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/MSGloriolaIIStdLight.woff2";
		String requestHeader0218 = "GET " + requestFile0218 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/styles.14a37be819ceb9d3ce86.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0218, requestHost0218, requestPort0218, requestHeader0218, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0218 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 10172
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [218] <- Index 218
		if(replayMode)
		{
			long proxyDataRecordId =1610513251639L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [219] <- WEB ADMIN Index 219 ---
		String requestProt0219 = "https";
		String requestHost0219 = "znejrwwjfln65dtqb-mswm.siteintercept.qualtrics.com";
		int    requestPort0219 = 443;
		String requestFile0219 = "/WRSiteInterceptEngine/" +
				"?Q_ZID=ZN_eJRwwjFLn65dTqB" +
				"&Q_LOC=https%3A%2F%2Ffinancialwellness.morganstanley.com%2Fwws%2Fprogram%2Ffinwell.html%2Fleadgencta" +
				"&t=1610513251728";
		String requestHeader0219 = "GET " + requestFile0219 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: znejrwwjfln65dtqb-mswm.siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0219, requestHost0219, requestPort0219, requestHeader0219, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0219 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 16368
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [219] <- Index 219
		if(replayMode)
		{
			long proxyDataRecordId =1610513251802L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [220] <- WEB ADMIN Index 220 ---
		String requestProt0220 = "https";
		String requestHost0220 = "financialwellness.morganstanley.com";
		int    requestPort0220 = 443;
		String requestFile0220 = "/libraries/81151d59dno2198935acf48464202bd";
		String requestContent0220 = 
				"{\"sensor_data\":\"7a74G7m23Vrp0o5c9125791.66-1,2,-94,-100,Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36,uaend,12147,20030107,en-US,Gecko,3,0,0,0,396262,3249840,1920,1040,1920,1080,1920,969,1920,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,fc:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,7920,0.613746608306,805256625502,0,loc:-1,2,-94,-101,do_en,dm_en,t_en-1,2,-94,-105,-1,2,-94,-102,0,-1,0,1,937,937,0;0,-1,0,1,821,821,0;0,-1,0,1,1230,1230,0;0,-1,0,1,727,727,0;0,-1,0,1,339,339,0;-1,2,-94,-108,-1,2,-94,-110,0,1,259,929,121;-1,2,-94,-117,-1,2,-94,-111,-1,2,-94,-109,-1,2,-94,-114,-1,2,-94,-103,-1,2,-94,-112,https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta-1,2,-94,-115,1,1342,32,0,0,0,1310,757,0,1610513251004,77,17228,0,1,2871,0,0,760,3491,0,27D4FA18E34094C6191A8C7D9089D75F~0~YAAQrPo7F6j9S/V2AQAAo/oR+gXVLW/vBm/cIg29SENswdoXTNYwVC9zmSnTJ+XohQh/VPFVNtrzcMO8Ye8UX9lsLkbazyMuv6zlCjhxOYNF6cT+4g1SJRxlrMsAbe/8JVuw7Otg51F+oEfB2SYVzADPfmGp9YOm/sYdFxmJX8U2+masiEIIwlax37z2XznFoPAsWEsJ/kaWAzuWbr4JrfSmbRKOWfirJRYbH3ZbLNA013NwRRent20K8SZ5zUH2oJ5CXGYnFwtIYY0DWWhYqzlbDbYpVDRdgN0T4te08bVtZgnE+1PM/4MAZ1EA1PgnYv61dMQLTBzHBT2yWWterN6UU7FYPyDBf1NW7ug=~-1~||1-PfAYhdRjlu-1-10-1000-2||~-1,35268,580,-617432212,30261693,PiZtE,100623,34-1,2,-94,-106,8,1-1,2,-94,-119,87,271,214,222,96,144,91,87,89,98,86,85,81,499,-1,2,-94,-122,0,0,0,0,1,0,0-1,2,-94,-123,-1,2,-94,-124,0.c676cb9b827b8,0.89204be666ae,0.3caf4f8a16f15,0.63ddb0d9d54f2,0.4923c7bd2bdc1,0.1beac3c50cd33,0.34d32faf3a6bc,0.bb859a7cf238d,0.ca256cae6331f,0.bca52dc4f592;2,2,3,4,4,2,8,15,3,1;0,1,2,1,1,2,10,23,3,1;27D4FA18E34094C6191A8C7D9089D75F,1610513249837,PfAYhdRjlu,27D4FA18E34094C6191A8C7D9089D75F1610513249837PfAYhdRjlu,1,1,0.c676cb9b827b8,27D4FA18E34094C6191A8C7D9089D75F1610513249837PfAYhdRjlu10.c676cb9b827b8,56,30,97,95,154,174,39,166,50,109,110,43,2,22,116,133,14,199,21,226,241,146,174,68,140,34,247,86,81,86,97,197,273,0,1610513251761;-1,2,-94,-126,-1,2,-94,-127,-1,2,-94,-70,-1752250632;-915298718;dis;,7,8;true;true;true;300;true;24;24;true;false;-1-1,2,-94,-80,5579-1,2,-94,-116,2193642150-1,2,-94,-118,126907-1,2,-94,-129,33c6f54e72ed2196a148f981eb3a5bd51bb6639069e41454a91411e89e70f64e,1,a712c19fde04cde08d21754c81e951066896404f0eac6cbfd5255e434d879986,,,,0-1,2,-94,-121,;20;18;0\"}";
		byte[] requestContentBinary0220 = requestContent0220.getBytes("UTF-8");
		String requestHeader0220 = "POST " + requestFile0220 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContentBinary0220.length + "\r\n" + 		// Content-Length: 2325
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain;charset=UTF-8\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0220, requestHost0220, requestPort0220, requestHeader0220, requestContentBinary0220, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0220 = null;		// support garbage collector to reduce memory
		requestContent0220 = null;		// support garbage collector to reduce memory
		requestContentBinary0220 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 201, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 17
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {201}, "APPLICATION/JSON", null, null);		// Test [220] <- Index 220
		if(replayMode)
		{
			long proxyDataRecordId =1610513251812L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [221] <- WEB ADMIN Index 221 ---
		String requestProt0221 = "https";
		String requestHost0221 = "financialwellness.morganstanley.com";
		int    requestPort0221 = 443;
		String requestFile0221 = "/libraries/81151d59dno2198935acf48464202bd";
		String requestContent0221 = 
				"{\"sensor_data\":\"7a74G7m23Vrp0o5c9125791.66-1,2,-94,-100,Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36,uaend,12147,20030107,en-US,Gecko,3,0,0,0,396262,3249840,1920,1040,1920,1080,1920,969,1920,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,fc:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,7920,0.552742663276,805256625502,0,loc:-1,2,-94,-101,do_en,dm_en,t_en-1,2,-94,-105,-1,2,-94,-102,0,-1,0,1,937,937,0;0,-1,0,1,821,821,0;0,-1,0,1,1230,1230,0;0,-1,0,1,727,727,0;0,-1,0,1,339,339,0;-1,2,-94,-108,-1,2,-94,-110,0,1,259,929,121;-1,2,-94,-117,-1,2,-94,-111,-1,2,-94,-109,-1,2,-94,-114,-1,2,-94,-103,-1,2,-94,-112,https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta-1,2,-94,-115,1,1342,32,0,0,0,1310,939,0,1610513251004,77,17228,0,1,2871,0,0,942,3491,0,27D4FA18E34094C6191A8C7D9089D75F~0~YAAQrPo7F6/9S/V2AQAAmv0R+gVGVkqx5dtVsYSxJaFVtKN+4X5HpodWdMJPSu35QiMTEYj4NQ/HoFr0mqRj8wbVHusHu6xvrVaH9Q8mntk1qWZ2ZLuK2zHxmo/6zaGTupYX6qpHOZG3dYFmzJpH0pLj9qeTHFu31JkiRcrSMhCODnTmheQXks+BJHAGtDOruw2HTViwkDisfPoJ/F3rN8TU4499bZG+Ri/n5RHfX/SXjOaADh+dGl4WuK05VVGT6utM2zIujkykXlQzoJ/vOOdmPyMoQGSw8aleg44gJyQKsBRuoWqewsMCOH5Mws2AHJug4uM0Y4KJnxBxLHpjrEzqbUiNNYrjuD1UMOc=~-1~||-1||~-1,34320,580,-617432212,30261693,PiZtE,37215,34-1,2,-94,-106,8,1-1,2,-94,-119,87,271,214,222,96,144,91,87,89,98,86,85,81,499,-1,2,-94,-122,0,0,0,0,1,0,0-1,2,-94,-123,-1,2,-94,-124,-1,2,-94,-126,-1,2,-94,-127,-1,2,-94,-70,-1752250632;-915298718;dis;,7,8;true;true;true;300;true;24;24;true;false;-1-1,2,-94,-80,5579-1,2,-94,-116,2193642150-1,2,-94,-118,93522-1,2,-94,-129,33c6f54e72ed2196a148f981eb3a5bd51bb6639069e41454a91411e89e70f64e,1,a712c19fde04cde08d21754c81e951066896404f0eac6cbfd5255e434d879986,,,,0-1,2,-94,-121,;6;18;0\"}";
		byte[] requestContentBinary0221 = requestContent0221.getBytes("UTF-8");
		String requestHeader0221 = "POST " + requestFile0221 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContentBinary0221.length + "\r\n" + 		// Content-Length: 1763
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain;charset=UTF-8\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0221, requestHost0221, requestPort0221, requestHeader0221, requestContentBinary0221, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0221 = null;		// support garbage collector to reduce memory
		requestContent0221 = null;		// support garbage collector to reduce memory
		requestContentBinary0221 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 201, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 17
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {201}, "APPLICATION/JSON", null, null);		// Test [221] <- Index 221
		if(replayMode)
		{
			long proxyDataRecordId =1610513251964L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [222] <- WEB ADMIN Index 222 ---
		String requestProt0222 = "https";
		String requestHost0222 = "siteintercept.qualtrics.com";
		int    requestPort0222 = 443;
		String requestFile0222 = "/WRSiteInterceptEngine/Targeting.php" +
				"?Q_ZoneID=ZN_eJRwwjFLn65dTqB" +
				"&Q_CLIENTVERSION=1.41.0" +
				"&Q_CLIENTTYPE=web";
		String requestContent0222 = 
				"Q_LOC=https%3A%2F%2Ffinancialwellness.morganstanley.com%2Fwws%2Fprogram%2Ffinwell.html%2Fleadgencta";
		String requestHeader0222 = "POST " + requestFile0222 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0222.getBytes().length + "\r\n" + 		// Content-Length: 99
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0222, requestHost0222, requestPort0222, requestHeader0222, requestContent0222.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0222 = null;		// support garbage collector to reduce memory
		requestContent0222 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1286
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [222] <- Index 222
		if(replayMode)
		{
			long proxyDataRecordId =1610513251984L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [223] <- WEB ADMIN Index 223 ---
		String requestProt0223 = "https";
		String requestHost0223 = "siteintercept.qualtrics.com";
		int    requestPort0223 = 443;
		String requestFile0223 = "/dxjsmodule/CoreModule.js" +
				"?Q_CLIENTVERSION=1.41.0" +
				"&Q_CLIENTTYPE=web";
		String requestHeader0223 = "GET " + requestFile0223 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0223, requestHost0223, requestPort0223, requestHeader0223, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0223 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 27211
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [223] <- Index 223
		if(replayMode)
		{
			long proxyDataRecordId =1610513252103L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [224] <- WEB ADMIN Index 224 ---
		String requestProt0224 = "https";
		String requestHost0224 = "siteintercept.qualtrics.com";
		int    requestPort0224 = 443;
		String requestFile0224 = "/dxjsmodule/14.3bdbf63f1121552ac2ba.chunk.js" +
				"?Q_CLIENTVERSION=1.41.0" +
				"&Q_CLIENTTYPE=web";
		String requestHeader0224 = "GET " + requestFile0224 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0224, requestHost0224, requestPort0224, requestHeader0224, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0224 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 757
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [224] <- Index 224
		if(replayMode)
		{
			long proxyDataRecordId =1610513252209L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [225] <- WEB ADMIN Index 225 ---
		String requestProt0225 = "https";
		String requestHost0225 = "smetrics.morganstanley.com";
		int    requestPort0225 = 443;
		String requestFile0225 = "/b/ss/morganstanleywpwealthprod,morganstanleyglobal/1/JS-2.9.0-LAWA/s16396369242942" +
				"?AQB=1" +
				"&ndh=1" +
				"&pf=1" +
				"&t=12%2F0%2F2021%2023%3A47%3A32%202%20300" +
				"&mid=30588150307500429323193657079021352466" +
				"&aamlh=7" +
				"&ce=UTF-8" +
				"&pageName=financial%20wellness%20%20%20%20%20%20%20" +
				"&g=https%3A%2F%2Ffinancialwellness.morganstanley.com%2Fwws%2Fprogram%2Ffinwell.html%2Fleadgencta" +
				"&aamb=RKhpRz8krg2tLO6pguXWp5olkAcUniQYPHaMWWgdJ3xzPWQmdj0y" +
				"&v1=11PM" +
				"&c2=D%3Dv1" +
				"&v2=Tuesday" +
				"&c3=D%3Dv2" +
				"&v3=weekday" +
				"&c4=D%3Dv3" +
				"&v4=New" +
				"&c5=D%3Dv4" +
				"&v5=1" +
				"&c6=D%3Dv5" +
				"&v6=First%20Visit" +
				"&c7=D%3Dv6" +
				"&v7=financial%20wellness%20%7C%20lead%20form%20%7C%20core" +
				"&c12=https%3A%2F%2Ffinancialwellness.morganstanley.com%2Fwws%2Fprogram%2Ffinwell.html%2Fleadgencta" +
				"&c14=financial%20wellness%20%7C%20lead%20form%20%7C%20core" +
				"&v14=25" +
				"&v21=https%3A%2F%2Ffinancialwellness.morganstanley.com%2Fwws%2Fprogram%2Ffinwell.html%2Fleadgencta" +
				"&v27=100" +
				"&c31=D%3Dv34" +
				"&c32=Retirement" +
				"&c34=Article" +
				"&v34=no%20value" +
				"&c39=financial%20wellness" +
				"&v41=default" +
				"&v44=financial%20wellness" +
				"&v45=desktop" +
				"&v51=financial%20wellness%20%7C%20financial%20wellness" +
				"&v60=default" +
				"&v76=financial%20wellness" +
				"&v93=%22fw%22" +
				"&v111=default" +
				"&s=1920x1080" +
				"&c=24" +
				"&j=1.6" +
				"&v=N" +
				"&k=Y" +
				"&bw=1920" +
				"&bh=969" +
				"&mcorgid=9355F0CC5405D58C0A4C98A1%40AdobeOrg" +
				"&lrt=222" +
				"&AQE=1";
		String requestHeader0225 = "GET " + requestFile0225 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: smetrics.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0225, requestHost0225, requestPort0225, requestHeader0225, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0225 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [225] <- Index 225
		if(replayMode)
		{
			long proxyDataRecordId =1610513252220L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [226] <- WEB ADMIN Index 226 ---
		String requestProt0226 = "https";
		String requestHost0226 = "siteintercept.qualtrics.com";
		int    requestPort0226 = 443;
		String requestFile0226 = "/dxjsmodule/1.6c2a7e2d1ddb99db1dfa.chunk.js" +
				"?Q_CLIENTVERSION=1.41.0" +
				"&Q_CLIENTTYPE=web";
		String requestHeader0226 = "GET " + requestFile0226 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0226, requestHost0226, requestPort0226, requestHeader0226, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0226 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5798
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [226] <- Index 226
		if(replayMode)
		{
			long proxyDataRecordId =1610513252257L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [227] <- WEB ADMIN Index 227 ---
		log();
		log("# title: Financial Wellness");
		String requestProt0227 = "https";
		String requestHost0227 = "financialwellness.morganstanley.com";
		int    requestPort0227 = 443;
		String requestFile0227 = "/wws/program/finwell.html/leadgencta";
		String requestHeader0227 = "GET " + requestFile0227 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Sec-Fetch-Dest: document\r\n" + 
				"Referer: https://mso.morganstanleyclientserv.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0227, requestHost0227, requestPort0227, requestHeader0227, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0227 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 3584
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [227] <- Index 227
		if(replayMode)
		{
			long proxyDataRecordId =1610513255638L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [228] <- WEB ADMIN Index 228 ---
		String requestProt0228 = "https";
		String requestHost0228 = "financialwellness.morganstanley.com";
		int    requestPort0228 = 443;
		String requestFile0228 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/styles.14a37be819ceb9d3ce86.css";
		String requestHeader0228 = "GET " + requestFile0228 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0228, requestHost0228, requestPort0228, requestHeader0228, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0228 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 70757
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [228] <- Index 228
		if(replayMode)
		{
			long proxyDataRecordId =1610513255880L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [229] <- WEB ADMIN Index 229 ---
		String requestProt0229 = "https";
		String requestHost0229 = "financialwellness.morganstanley.com";
		int    requestPort0229 = 443;
		String requestFile0229 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/runtime-es2015.506a3b4f3e7ad39ef626.js";
		String requestHeader0229 = "GET " + requestFile0229 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0229, requestHost0229, requestPort0229, requestHeader0229, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0229 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1233
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [229] <- Index 229
		if(replayMode)
		{
			long proxyDataRecordId =1610513255886L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #7_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #7_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_7_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #7 (fragment 3 of 4)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [230] <- WEB ADMIN Index 230 ---
		String requestProt0230 = "https";
		String requestHost0230 = "financialwellness.morganstanley.com";
		int    requestPort0230 = 443;
		String requestFile0230 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/polyfills-es2015.2870203b30e6a163935e.js";
		String requestHeader0230 = "GET " + requestFile0230 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0230, requestHost0230, requestPort0230, requestHeader0230, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0230 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 45937
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [230] <- Index 230
		if(replayMode)
		{
			long proxyDataRecordId =1610513255887L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [231] <- WEB ADMIN Index 231 ---
		String requestProt0231 = "https";
		String requestHost0231 = "financialwellness.morganstanley.com";
		int    requestPort0231 = 443;
		String requestFile0231 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/scripts.e454dd0842cd3c67f3c5.js";
		String requestHeader0231 = "GET " + requestFile0231 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0231, requestHost0231, requestPort0231, requestHeader0231, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0231 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 40737
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [231] <- Index 231
		if(replayMode)
		{
			long proxyDataRecordId =1610513255904L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [232] <- WEB ADMIN Index 232 ---
		String requestProt0232 = "https";
		String requestHost0232 = "financialwellness.morganstanley.com";
		int    requestPort0232 = 443;
		String requestFile0232 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/vendor-es2015.64964b93d7603d935165.js";
		String requestHeader0232 = "GET " + requestFile0232 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0232, requestHost0232, requestPort0232, requestHeader0232, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0232 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1036418
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [232] <- Index 232
		if(replayMode)
		{
			long proxyDataRecordId =1610513255910L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [233] <- WEB ADMIN Index 233 ---
		String requestProt0233 = "https";
		String requestHost0233 = "financialwellness.morganstanley.com";
		int    requestPort0233 = 443;
		String requestFile0233 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/main-es2015.19fc2af3d4cd45846b58.js";
		String requestHeader0233 = "GET " + requestFile0233 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0233, requestHost0233, requestPort0233, requestHeader0233, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0233 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 217662
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [233] <- Index 233
		if(replayMode)
		{
			long proxyDataRecordId =1610513255916L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [234] <- WEB ADMIN Index 234 ---
		String requestProt0234 = "https";
		String requestHost0234 = "financialwellness.morganstanley.com";
		int    requestPort0234 = 443;
		String requestFile0234 = "/libraries/81151d59dno2198935acf48464202bd";
		String requestHeader0234 = "GET " + requestFile0234 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0234, requestHost0234, requestPort0234, requestHeader0234, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0234 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 18338
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [234] <- Index 234
		if(replayMode)
		{
			long proxyDataRecordId =1610513255932L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [235] <- WEB ADMIN Index 235 ---
		String requestProt0235 = "https";
		String requestHost0235 = "financialwellness.morganstanley.com";
		int    requestPort0235 = 443;
		String requestFile0235 = "/wws/program/finwell.html/leadgencta";
		String requestHeader0235 = "HEAD " + requestFile0235 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0235, requestHost0235, requestPort0235, requestHeader0235, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0235 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [235] <- Index 235
		if(replayMode)
		{
			long proxyDataRecordId =1610513256079L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [236] <- WEB ADMIN Index 236 ---
		String requestProt0236 = "https";
		String requestHost0236 = "assets.adobedtm.com";
		int    requestPort0236 = 443;
		String requestFile0236 = "/launch-EN00f9bc705c81457d9fbddafbfe62ac8b.min.js";
		String requestHeader0236 = "GET " + requestFile0236 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: assets.adobedtm.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0236, requestHost0236, requestPort0236, requestHeader0236, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0236 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 71743
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [236] <- Index 236
		if(replayMode)
		{
			long proxyDataRecordId =1610513256081L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [237] <- WEB ADMIN Index 237 ---
		String requestProt0237 = "https";
		String requestHost0237 = "assets.adobedtm.com";
		int    requestPort0237 = 443;
		String requestFile0237 = "/extensions/EP143333dab9bb4582a773c81f3a840074/AppMeasurement.min.js";
		String requestHeader0237 = "GET " + requestFile0237 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: assets.adobedtm.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0237, requestHost0237, requestPort0237, requestHeader0237, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0237 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 12569
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [237] <- Index 237
		if(replayMode)
		{
			long proxyDataRecordId =1610513256398L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [238] <- WEB ADMIN Index 238 ---
		String requestProt0238 = "https";
		String requestHost0238 = "morganstanleyandco.tt.omtrdc.net";
		int    requestPort0238 = 443;
		String requestFile0238 = "/m2/morganstanleyandco/mbox/json" +
				"?mbox=target-global-mbox" +
				"&mboxSession=52f2de5bbb7448f59394fd988920e26e" +
				"&mboxPC=52f2de5bbb7448f59394fd988920e26e.34_0" +
				"&mboxPage=6bc0d1a904174505ad50a2d826ca4c40" +
				"&mboxRid=bc6967e42d25446dad17b8b2216d9c9a" +
				"&mboxVersion=1.7.1" +
				"&mboxCount=1" +
				"&mboxTime=1610495256430" +
				"&mboxHost=financialwellness.morganstanley.com" +
				"&mboxURL=https%3A%2F%2Ffinancialwellness.morganstanley.com%2Fwws%2Fprogram%2Ffinwell.html%2Fleadgencta" +
				"&mboxReferrer=https%3A%2F%2Fmso.morganstanleyclientserv.com%2F" +
				"&mboxXDomain=enabled" +
				"&browserHeight=969" +
				"&browserWidth=1920" +
				"&browserTimeOffset=-300" +
				"&screenHeight=1080" +
				"&screenWidth=1920" +
				"&colorDepth=24" +
				"&devicePixelRatio=1" +
				"&screenOrientation=landscape" +
				"&webGLRenderer=Google%20SwiftShader" +
				"&wellnessCat=Retirement" +
				"&legalEntity=%22default%22" +
				"&age=0" +
				"&income=" +
				"&isAssessmentTaken=false" +
				"&targetUserType=fw" +
				"&at_property=9e038d44-6a49-1d31-c9e4-de84301a27a7" +
				"&us=" +
				"&mboxMCSDID=113FB06E366E6E8D-18414FD96ED0B807" +
				"&mboxMCGVID=30588150307500429323193657079021352466" +
				"&mboxAAMB=RKhpRz8krg2tLO6pguXWp5olkAcUniQYPHaMWWgdJ3xzPWQmdj0y" +
				"&mboxMCGLH=7";
		String requestHeader0238 = "GET " + requestFile0238 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: morganstanleyandco.tt.omtrdc.net\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0238, requestHost0238, requestPort0238, requestHeader0238, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0238 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2718
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [238] <- Index 238
		if(replayMode)
		{
			long proxyDataRecordId =1610513256461L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [239] <- WEB ADMIN Index 239 ---
		String requestProt0239 = "https";
		String requestHost0239 = "financialwellness.morganstanley.com";
		int    requestPort0239 = 443;
		String requestFile0239 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_programdata-results.fw_program_wm.json";
		String requestHeader0239 = "GET " + requestFile0239 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0239, requestHost0239, requestPort0239, requestHeader0239, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0239 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 515
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [239] <- Index 239
		if(replayMode)
		{
			long proxyDataRecordId =1610513256968L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [240] <- WEB ADMIN Index 240 ---
		String requestProt0240 = "https";
		String requestHost0240 = "financialwellness.morganstanley.com";
		int    requestPort0240 = 443;
		String requestFile0240 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_transformation-results.fw_c_feed_d_wm.json";
		String requestHeader0240 = "GET " + requestFile0240 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0240, requestHost0240, requestPort0240, requestHeader0240, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0240 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 44650
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [240] <- Index 240
		if(replayMode)
		{
			long proxyDataRecordId =1610513257124L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [241] <- WEB ADMIN Index 241 ---
		String requestProt0241 = "https";
		String requestHost0241 = "financialwellness.morganstanley.com";
		int    requestPort0241 = 443;
		String requestFile0241 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_transformation-results.fw_finwell_properties_wm.json";
		String requestHeader0241 = "GET " + requestFile0241 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0241, requestHost0241, requestPort0241, requestHeader0241, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0241 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 894
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [241] <- Index 241
		if(replayMode)
		{
			long proxyDataRecordId =1610513257125L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [242] <- WEB ADMIN Index 242 ---
		String requestProt0242 = "https";
		String requestHost0242 = "financialwellness.morganstanley.com";
		int    requestPort0242 = 443;
		String requestFile0242 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_transformation-results.fw_popup_retake_assmnt_wm.json";
		String requestHeader0242 = "GET " + requestFile0242 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0242, requestHost0242, requestPort0242, requestHeader0242, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0242 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 436
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [242] <- Index 242
		if(replayMode)
		{
			long proxyDataRecordId =1610513257270L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [243] <- WEB ADMIN Index 243 ---
		String requestProt0243 = "https";
		String requestHost0243 = "financialwellness.morganstanley.com";
		int    requestPort0243 = 443;
		String requestFile0243 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_transformation-results.fw_flagged_msg_wm.json";
		String requestHeader0243 = "GET " + requestFile0243 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0243, requestHost0243, requestPort0243, requestHeader0243, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0243 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 403
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [243] <- Index 243
		if(replayMode)
		{
			long proxyDataRecordId =1610513257325L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [244] <- WEB ADMIN Index 244 ---
		String requestProt0244 = "https";
		String requestHost0244 = "financialwellness.morganstanley.com";
		int    requestPort0244 = 443;
		String requestFile0244 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_transformation-results.fw_popup_thrd_party_warn_wm.json";
		String requestHeader0244 = "GET " + requestFile0244 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0244, requestHost0244, requestPort0244, requestHeader0244, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0244 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 524
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [244] <- Index 244
		if(replayMode)
		{
			long proxyDataRecordId =1610513257326L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [245] <- WEB ADMIN Index 245 ---
		String requestProt0245 = "https";
		String requestHost0245 = "financialwellness.morganstanley.com";
		int    requestPort0245 = 443;
		String requestFile0245 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_transformation-results.fw_footer_wm.json";
		String requestHeader0245 = "GET " + requestFile0245 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0245, requestHost0245, requestPort0245, requestHeader0245, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0245 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 610
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [245] <- Index 245
		if(replayMode)
		{
			long proxyDataRecordId =1610513257330L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [246] <- WEB ADMIN Index 246 ---
		String requestProt0246 = "https";
		String requestHost0246 = "financialwellness.morganstanley.com";
		int    requestPort0246 = 443;
		String requestFile0246 = "/pub/content/workplacewealth/finwell/homepage.dynadatafw_transformation-results.fw_lead_w_h_wm.json";
		String requestHeader0246 = "GET " + requestFile0246 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"Accept: application/json, text/plain, */*\r\n" + 
				"Pragma: no-cache\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Expires: Sat, 01 Jan 2000 00:00:00 GMT\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0246, requestHost0246, requestPort0246, requestHeader0246, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0246 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1019
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [246] <- Index 246
		if(replayMode)
		{
			long proxyDataRecordId =1610513257344L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [247] <- WEB ADMIN Index 247 ---
		log();
		log("# title: Financial Wellness");
		String requestProt0247 = "https";
		String requestHost0247 = "financialwellness.morganstanley.com";
		int    requestPort0247 = 443;
		String requestFile0247 = "/wws/program/finwell.html/null";
		String requestHeader0247 = "GET " + requestFile0247 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/wws/program/finwell.html/leadgencta\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0247, requestHost0247, requestPort0247, requestHeader0247, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0247 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 3580
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [247] <- Index 247
		if(replayMode)
		{
			long proxyDataRecordId =1610513257366L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [248] <- WEB ADMIN Index 248 ---
		log();
		log("# title: 404 Not Found");
		String requestProt0248 = "https";
		String requestHost0248 = "financialwellness.morganstanley.com";
		int    requestPort0248 = 443;
		String requestFile0248 = "/common-ui/fonts/Karla.ttf";
		String requestHeader0248 = "GET " + requestFile0248 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/styles.14a37be819ceb9d3ce86.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0248, requestHost0248, requestPort0248, requestHeader0248, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0248 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = [verification disabled], content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 196
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, null, null, null, null);		// Test [248] <- Index 248
		if(replayMode)
		{
			long proxyDataRecordId =1610513257388L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [249] <- WEB ADMIN Index 249 ---
		String requestProt0249 = "https";
		String requestHost0249 = "financialwellness.morganstanley.com";
		int    requestPort0249 = 443;
		String requestFile0249 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/icomoon.woff";
		String requestHeader0249 = "GET " + requestFile0249 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/styles.14a37be819ceb9d3ce86.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0249, requestHost0249, requestPort0249, requestHeader0249, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0249 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF", header text fragment = [verification disabled], recorded content size = 87508
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF", null, null);		// Test [249] <- Index 249
		if(replayMode)
		{
			long proxyDataRecordId =1610513257410L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #7_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #7_3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_7_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #7 (fragment 4 of 4)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [250] <- WEB ADMIN Index 250 ---
		String requestProt0250 = "https";
		String requestHost0250 = "financialwellness.morganstanley.com";
		int    requestPort0250 = 443;
		String requestFile0250 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/karla-regular-webfont.ttf";
		String requestHeader0250 = "GET " + requestFile0250 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/styles.14a37be819ceb9d3ce86.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0250, requestHost0250, requestPort0250, requestHeader0250, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0250 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-TTF", header text fragment = [verification disabled], recorded content size = 17231
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-TTF", null, null);		// Test [250] <- Index 250
		if(replayMode)
		{
			long proxyDataRecordId =1610513257412L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [251] <- WEB ADMIN Index 251 ---
		String requestProt0251 = "https";
		String requestHost0251 = "financialwellness.morganstanley.com";
		int    requestPort0251 = 443;
		String requestFile0251 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/MSGloriolaIIStdLight.woff2";
		String requestHeader0251 = "GET " + requestFile0251 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/styles.14a37be819ceb9d3ce86.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0251, requestHost0251, requestPort0251, requestHeader0251, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0251 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 10172
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [251] <- Index 251
		if(replayMode)
		{
			long proxyDataRecordId =1610513257577L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [252] <- WEB ADMIN Index 252 ---
		String requestProt0252 = "https";
		String requestHost0252 = "financialwellness.morganstanley.com";
		int    requestPort0252 = 443;
		String requestFile0252 = "/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/karla-bold-webfont.ttf";
		String requestHeader0252 = "GET " + requestFile0252 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: financialwellness.morganstanley.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/pub/etc/designs/workplacewealth/finwellApp/src/dist/first-app/styles.14a37be819ceb9d3ce86.css\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0252, requestHost0252, requestPort0252, requestHeader0252, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0252 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-TTF", header text fragment = [verification disabled], recorded content size = 17958
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-TTF", null, null);		// Test [252] <- Index 252
		if(replayMode)
		{
			long proxyDataRecordId =1610513257578L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [253] <- WEB ADMIN Index 253 ---
		String requestProt0253 = "https";
		String requestHost0253 = "znejrwwjfln65dtqb-mswm.siteintercept.qualtrics.com";
		int    requestPort0253 = 443;
		String requestFile0253 = "/WRSiteInterceptEngine/" +
				"?Q_ZID=ZN_eJRwwjFLn65dTqB" +
				"&Q_LOC=https%3A%2F%2Ffinancialwellness.morganstanley.com%2Fwws%2Fprogram%2Ffinwell.html%2Fleadgencta" +
				"&t=1610513257673";
		String requestHeader0253 = "GET " + requestFile0253 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: znejrwwjfln65dtqb-mswm.siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0253, requestHost0253, requestPort0253, requestHeader0253, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0253 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 16353
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [253] <- Index 253
		if(replayMode)
		{
			long proxyDataRecordId =1610513257704L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [254] <- WEB ADMIN Index 254 ---
		String requestProt0254 = "https";
		String requestHost0254 = "siteintercept.qualtrics.com";
		int    requestPort0254 = 443;
		String requestFile0254 = "/WRSiteInterceptEngine/Targeting.php" +
				"?Q_ZoneID=ZN_eJRwwjFLn65dTqB" +
				"&Q_CLIENTVERSION=1.41.0" +
				"&Q_CLIENTTYPE=web";
		String requestContent0254 = 
				"Q_LOC=https%3A%2F%2Ffinancialwellness.morganstanley.com%2Fwws%2Fprogram%2Ffinwell.html%2Fleadgencta";
		String requestHeader0254 = "POST " + requestFile0254 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0254.getBytes().length + "\r\n" + 		// Content-Length: 99
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://financialwellness.morganstanley.com\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0254, requestHost0254, requestPort0254, requestHeader0254, requestContent0254.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0254 = null;		// support garbage collector to reduce memory
		requestContent0254 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1265
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [254] <- Index 254
		if(replayMode)
		{
			long proxyDataRecordId =1610513257777L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [255] <- WEB ADMIN Index 255 ---
		String requestProt0255 = "https";
		String requestHost0255 = "siteintercept.qualtrics.com";
		int    requestPort0255 = 443;
		String requestFile0255 = "/dxjsmodule/CoreModule.js" +
				"?Q_CLIENTVERSION=1.41.0" +
				"&Q_CLIENTTYPE=web";
		String requestHeader0255 = "GET " + requestFile0255 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0255, requestHost0255, requestPort0255, requestHeader0255, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0255 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 27176
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [255] <- Index 255
		if(replayMode)
		{
			long proxyDataRecordId =1610513257850L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [256] <- WEB ADMIN Index 256 ---
		String requestProt0256 = "https";
		String requestHost0256 = "siteintercept.qualtrics.com";
		int    requestPort0256 = 443;
		String requestFile0256 = "/dxjsmodule/14.3bdbf63f1121552ac2ba.chunk.js" +
				"?Q_CLIENTVERSION=1.41.0" +
				"&Q_CLIENTTYPE=web";
		String requestHeader0256 = "GET " + requestFile0256 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0256, requestHost0256, requestPort0256, requestHeader0256, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0256 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 758
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [256] <- Index 256
		if(replayMode)
		{
			long proxyDataRecordId =1610513257949L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [257] <- WEB ADMIN Index 257 ---
		String requestProt0257 = "https";
		String requestHost0257 = "siteintercept.qualtrics.com";
		int    requestPort0257 = 443;
		String requestFile0257 = "/dxjsmodule/1.6c2a7e2d1ddb99db1dfa.chunk.js" +
				"?Q_CLIENTVERSION=1.41.0" +
				"&Q_CLIENTTYPE=web";
		String requestHeader0257 = "GET " + requestFile0257 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: siteintercept.qualtrics.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Referer: https://financialwellness.morganstanley.com/\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0257, requestHost0257, requestPort0257, requestHeader0257, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL, threadStep);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData, threadStep);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0257 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5841
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [257] <- Index 257
		if(replayMode)
		{
			long proxyDataRecordId =1610513257950L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #7_3 successful done
		return true;
	}



	boolean synchResponsesParallelRequestsPage_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 1 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_1(loopPluginContext,lastThreadStepInMainThread, innerLoopContext))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_1 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread, InnerLoopContext innerLoopContext) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 2 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_2(loopPluginContext,lastThreadStepInMainThread, innerLoopContext))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_2 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread, InnerLoopContext innerLoopContext) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 3 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_3(loopPluginContext,lastThreadStepInMainThread, innerLoopContext))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_3 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread, InnerLoopContext innerLoopContext) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 4 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_4(loopPluginContext,lastThreadStepInMainThread, innerLoopContext))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_4 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread, InnerLoopContext innerLoopContext) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 5 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_5(loopPluginContext,lastThreadStepInMainThread, innerLoopContext))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_5 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread, InnerLoopContext innerLoopContext) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_6(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 6 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_6(loopPluginContext,lastThreadStepInMainThread, innerLoopContext))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_6 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread, InnerLoopContext innerLoopContext) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_7(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 7 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_7(loopPluginContext,lastThreadStepInMainThread, innerLoopContext))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_7 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread, InnerLoopContext innerLoopContext) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	/**
	 * implement GetRealTimeUserInputFieldsInterface: get the definition and the value of all real-time user input fields.
	 */
	public ArrayList<RealTimeUserInputField> getRealTimeUserInputFields()
	{
		try
		{
			ArrayList<RealTimeUserInputField> realTimeUserInputFieldList = new ArrayList<RealTimeUserInputField>();
			return realTimeUserInputFieldList;
		}
		catch (Exception e)
		{
			log(e);
			return null;
		}
	}



	/**
	 * implement ThreadStepInterface: get the current execution step (current URL call or page break) of a simulated user.
	 */
	public int getExecutionStep()
	{
		return threadStep;
	}



	/**
	 * implement SetThreadStepInterface: set the current execution step (current URL call or page break) of a simulated user.
	 */
	public void setExecutionStep(int threadStep)
	{
		this.threadStep = threadStep;
	}



	/**
	 * implement SSLSessionCacheStatisticInterface: get statistic data about the SSL session cache behavior of a simulated user.
	 */
	public SSLSessionCacheStatistic getSSLSessionCacheStatistic()
	{
		return sslStatistic;
	}



	/**
	 * implement VaryingTestDurationInterface: support to extend or to reduce the planned test duration.
	 */
	public int getPlannedTestDuration()
	{
		return plannedTestDuration;
	}
	
	public void setExtendTestDuration(int deltaSeconds)
	{
		if (plannedTestDuration == 0)
		{
			plannedTestDuration = deltaSeconds;		// the old planned test duration was unlimited but is now limited
			return;
		}
		if (deltaSeconds == 0)
		{
			plannedTestDuration = 0;		// the new planned test duration is now unlimited
			return;
		}
		plannedTestDuration = plannedTestDuration + deltaSeconds;
	}



	/**
	 * implement SuspendResumeInterface: support to suspend and to resume the test execution.
	 */
	public int getPlannedStartupDelay()
	{
		return plannedStartupDelay;
	}
	
	public void setUserResumeStartWaitDelay(int millis)
	{
		userResumeStartWaitDelay = millis;
	}



	/**
	 * implement VaryingLoadInterface: support to decrement the number of simulated users at runtime.
	 */
	public void setDecrementEndOfLoopFlag(boolean decrementEndOfLoopFlag)
	{
		this.decrementEndOfLoopFlag = decrementEndOfLoopFlag;
	}

	public boolean isDecrementEndOfLoopFlag()
	{
		return decrementEndOfLoopFlag;
	}



	/**
	 * internal method: execute the loops for one simulated user as a thread.
	 * controls the thread and displays the (thread-)log if one loop has been completed.
	 */
	public void run()
	{
		// user terminated by inline script, at start of user ?
		if (isTerminateUser())
		{
			System.out.println("# --- thread " + Thread.currentThread().getName() + " aborted --- " + ZoneTime.dateToShortString() + " ---");
			return;
		}
		try
		{
			while (true)
			{
				threadStep = ThreadStepInterface.THREAD_NO_STEP;
				clearLog();
				
				// execute loop
				log("--- loop started --- " + ZoneTime.dateToShortString() + " ---");
				long loopStartTime = System.nanoTime();
				if(replayMode)
				{
					createReplaySnapShot(threadLoopCounter, replaySnapShotsDump);
				}
				boolean loopPassed = this.execute(totalLoopCounter.getAndIncrement());
				if(isNonModularMode())
				{
					performanceData.addUserTransactionMeasuredSamples(transactionHandler.getPendingTransactions());
					ArrayList<UserTransactionContext> nonExecutedTransactions = transactionHandler.getNotExecutedTransactions();

					for (UserTransactionContext nonExecutedTransaction : new ArrayList<>(nonExecutedTransactions))
					{
						if(transactionContextMap.containsKey(nonExecutedTransaction.getTransactionId()+"") && transactionContextMap.get(nonExecutedTransaction.getTransactionId()+"") == null)
						{
							transactionContextMap.remove(nonExecutedTransaction.getTransactionId()+"");
							nonExecutedTransactions.remove(nonExecutedTransaction);
						}
					}

					performanceData.addUserTransactionNotExecutedSamples(nonExecutedTransactions);
				}
				performanceData.addSocktPoolStatistic(socketPool);
				socketPool.closePool();
				performanceData.addSSLCacheStatistic(sslStatistic.getSSLSessionCacheStatisticResult());
				sslStatistic.reset();
				
				// eof of input file or out of values for an unique number ?
				if (abortedByEofInputFile() || abortedByUniqueNumberVar())
					return;		// endOfRun() not called in such a case
				
				// check loop result
				String remainingLoopInfo = "";
				if (checkLoopCount)
					remainingLoopInfo = " [remaining loops = " + (remainingLoops - 1) + "]";
				if (loopPassed)
				{
					performanceData.addPassedLoop();
					log("--- loop passed ---  " + ZoneTime.dateToShortString() + " ---" + remainingLoopInfo);
				}
				else
				{
					performanceData.addFailedLoop();
					log("--- loop failed ---  " + ZoneTime.dateToShortString() + " ---" + remainingLoopInfo);
				}
					if (!loopVarMap.isEmpty())
					{
						log();
						log("+----------------------------------------------------------------+");
						log("Loop Variables Values");
						log("----------------------------------------------------");
						for(Map.Entry<String, String> entry : loopVarMap.entrySet())
						{
							log("|" + entry.getKey() + " = " + entry.getValue()+"|");
							log("");
						}
						log("+----------------------------------------------------------------+");
					}
				threadStep = ThreadStepInterface.THREAD_NO_STEP;
				
				// display thread log to standard output
				if (debugLoops || (debugFailedLoops && (!loopPassed)))
				{
					synchronized (dumpLock)
					{
						dumpLog(System.out);				// full log
					}
				}
				
				// check if max loops reached
				if (checkLoopCount)
				{
					// all done ?
					remainingLoops--;
					if (remainingLoops <= 0)
					{
						endOfRun();
						return;
					}
				}
				
				// check if simulated user must be decremented
				if (decrementEndOfLoopFlag && (getOwnLoadTestUserContext().getDecrementEndOfLoopPointInTime() <= System.currentTimeMillis()))
				{
					return;
				}
				
				// check if max test duration reached
				if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				{
					endOfRun();
					return;
				}
				
				// check if this specific user is terminated earlier than planned by a HTTP content verification or by a plug-in
				if (isTerminateUser())
				{
					endOfRun();
					System.out.println("# --- thread " + Thread.currentThread().getName() + " terminate failed user --- " + ZoneTime.dateToShortString() + " ---");
					return;
				}
				
				// check if load test execution is temporary suspended
				boolean wasSuspended = false;
				while (isSuspend())
				{
					wasSuspended = true;
					try { Thread.currentThread().sleep(20); } catch (InterruptedException ie) {}
					if (abortedByRemote() || abortedByEofInputFile() || abortedByUniqueNumberVar())
					{
						endOfRun();
						return;
					}
					
					// check if max test duration reached during suspend
					if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
					{
						endOfRun();
						return;
					}
				}
				// check if load test execution is resumed
				if (wasSuspended)
				{
					try { sleepRemoteInterruptable(userResumeStartWaitDelay); } catch (InterruptedException ie) {}
				}
				
				// wait 20 milliseconds if loop has failed
				if (!loopPassed)
					try { Thread.currentThread().sleep(loopErrorDelay); } catch (InterruptedException ie) {}
				
				// enable pacing for the loop
				if(pacing > 0)
				{
					long loopElaspedTime = (System.nanoTime() - loopStartTime) / 1000000l;
					long loopPacingValue = Long.valueOf(pacing).longValue() * 1000l;
					if (loopElaspedTime < loopPacingValue)
					{
						threadStep = threadStep - 1;
						log(" - loop pacing: sleeping for "+ (loopPacingValue - loopElaspedTime)+" ms ...");
						Thread.currentThread().sleep(loopPacingValue - loopElaspedTime);
						threadStep++;
					}
				}
				// execute next loop
				threadLoopCounter++;
			}	// end: while (true)
		}
		catch (Throwable tex)
		{
			log("*** INTERNAL ERROR / LOAD TEST ABORTED ***");
			log(tex);
			log();
			synchronized (dumpLock)
			{
				if(replayMode)
				{
					saveReplaySnapShots("ZTReplay.snapshot");
				}
				saveATSTablesData();
				dumpLog(System.out);				// full log
				System.err.println("*** INTERNAL ERROR / LOAD TEST ABORTED ***");
				tex.printStackTrace(System.err);
				System.exit(-2);
			}
		}
		finally
		{
			// remove the reference to this load test instance and the reference to the thread that runs this instance
			try
			{
				if (!decrementEndOfLoopFlag)
				{
					getUserContextTable().getWriteLock().lock();
					getOwnLoadTestUserContext().setLoadTestUserFinallyEnded();
					getUserContextTable().getWriteLock().unlock();
				}
				else
					decrementEndOfLoopFlag = false;
			}
			catch (Throwable texFinal)
			{
				System.err.println("*** INTERNAL FINALLY ERROR / LOAD TEST ABORTED ***");
				texFinal.printStackTrace(System.err);
				System.exit(-2);
			}
		}
	}



	/**
	 * internal method: called when a user has completed the test-run.
	 */
	public void endOfRun()
	{
		clearLog();
		
		if (debugLoops && (getLog().size() > 0))
		{
			synchronized (dumpLock)
			{
				dumpLog(System.out);		// dump log of inline scripts and load test plug-ins which are executed at end of user
			}
		}
	}



	/**
	 * Main program. Starts the test and waits until all have been done.
	 */
	public static void main(String[] args)
	{
		// check command line argument -h or -help
		if ((ParseArgs.hasOption(args, "-h")) || (ParseArgs.hasOption(args, "-help")))
		{
			System.out.println();
			System.out.println("Help - Proxy Sniffer Load Test Program:");
			System.out.println();
			System.out.println("-Userid <user-input-field>               ->> required argument: Userid");
			System.out.println("-Password <user-input-field>             ->> required argument: Password");
			System.out.println();
			System.out.println("-u <number>              ->> required argument: number of concurrent users");
			System.out.println("-d <seconds>             ->> required argument: planned test duration in seconds (default: 30, 0 = unlimited)");
			System.out.println("-t <seconds>             ->> required argument: request timeout per url in seconds");
			System.out.println();
			System.out.println("-tconnect <seconds>      ->> TCP/IP socket connect timeout in seconds (default: use value of -t <seconds>)");
			System.out.println();
			System.out.println("-sdelay <milliseconds>   ->> startup delay time between concurrent users in milliseconds (default: 200)");
			System.out.println("-mtpu <number>           ->> maximum number of parallel threads per user (default: " + MAX_PARALLEL_THREADS_PER_USER + ")");
			System.out.println("-maxloops <number>       ->> maximum number of loops per user (default: 0 = unlimited)");
			System.out.println("-pacing <seconds>        ->> sets a minimum time for all in the loop executed page breaks and url calls which must be elapsed before the next loop starts (default: 0 = no pacing)");
			System.out.println("-downlink <kbps>         ->> maximum downlink network bandwidth per user in kilobits per second (default: 0 = unlimited)");
			System.out.println("-uplink <kbps>           ->> maximum uplink network bandwidth per user in kilobits per second (default: 0 = unlimited)");
			System.out.println("-multihomed <filename>   ->> use serveral client ip addresses - file format: <addr1>, <addr2>, ... (all on the same line)");
			System.out.println("-sampling <seconds>      ->> statistic sampling interval in seconds (default: 15)");
			System.out.println("-percpage <percent>      ->> additional sampling rate per web page call in percent (default: 100)");
			System.out.println("-percurl <percent>       ->> additional sampling rate per url call in percent (default: 0)");
			System.out.println("-percurlopt <level>      ->> extended sampling level per url call, see application reference manual (default: 0 = disabled)");
			System.out.println("-maxerrsnap <number>     ->> maximum number of error snapshots per url (default: 0 = unlimited)");
			System.out.println("-maxerrmem <megabytes>   ->> maximum size of memory in megabytes which can be used for error snapshots (default: 20, -1 = unlimited)");
			System.out.println("-nosdelayCluster         ->> apply startup delay time between concurrent users per exec agent, but not per cluster job (default: apply per cluster job)");
			System.out.println("-setuseragent \"<text>\"   ->> replace the recorded value of the HTTP request header field User-Agent with a new value");
			System.out.println("-collect <host>[:<port>] ->> collect additional data from external measuring agents (data collectors)");
			System.out.println("-res <filename>          ->> overrides the default name of the binary output file");
			System.out.println("-nores                   ->> disables to create the binary output file");
			System.out.println();
			System.out.println("-ssl <version>           ->> set SSL version: possible options are \"all\" (default), \"v3\", \"tls\", \"tls11\", \"tls12\" or \"tls13\"");
			System.out.println("-sslcache <seconds>      ->> timeout of user-related SSL session cache (default: 300, 0 = cache disabled)");
			System.out.println("-sslrandom <type>        ->> set the type of the random generator used for SSL handshakes: possible options are \"fast\", \"iaik\" (default) or \"java\"");
			System.out.println("-sslcmode                ->> apply SSL/HTTPS compatibility workarounds for deficient SSL servers");
			System.out.println("-noECC                   ->> disable support of elliptic curve cryptography (ECC)");
			System.out.println("-nosni                   ->> disable support of server name indication (SNI)");
			System.out.println("-snicritical             ->> set the TLS SNI extension as critical (default: non-critical)");
			System.out.println("-tlssessiontickets       ->> set the TLS to use Session Tickets (non-critical)");
			System.out.println("-iaikLast                ->> adds the IAIK security provider at the last position (instead of default: IAIK at first position)");
			System.out.println();
			System.out.println("-dnssrv <IP-1>[,IP-N])   ->> use specific DNS server(s) to resolve DNS host names (default: use OS to resolve host names)");
			System.out.println("-dnshosts <filename>     ->> use specific DNS hosts file (default: use OS to resolve host names)");
			System.out.println("-dnstranslation <filename> ->> use a DNS translation file that converts DNS names. It might be needed to disable TLS SNI if this option is used");
			System.out.println("-dnsenattl               ->> enable consideration of DNS TTL by using the received TTL-values from the DNS Server(s) (default: TTL disabled)");
			System.out.println("-dnsfixttl <seconds>     ->> enable DNS TTL by using a fixed TTL-value of seconds for all DNS resolves");
			System.out.println("-dnsperloop              ->> perform new DNS resolves for each executed loop. All resolves are stable within the same loop (no consideration of DNS TTL within a loop)");
			System.out.println("-dnsstatistic            ->> collect statistical data about DNS resolutions. Note: use this option only if not any other, more specific DNS option is enabled");
			System.out.println("-dnsdebug                ->> debug DNS resolves and the DNS cache");
			System.out.println("-enableIPv6 <networkinterface-name>  ->> enable only IPv6 support for recording, also can provide the IPv6 network interface of the load generator");
			System.out.println("-enableIPv6v4 <networkinterface-name> ->> enable both IPv6 and IPv4 (first will try with IPv6 ,if fails will try with IPv4 support for recording),also can provide the IPv6 network interface of the load generator");
			System.out.println();
			System.out.println("-dfl                     ->> debug execution steps of all failed loops to standard output");
			System.out.println("-dl                      ->> debug execution steps of all loops to standard output");
			System.out.println("-dh                      ->> debug HTTP protocol headers to standard output, includes the -dl option");
			System.out.println("-dc                      ->> debug HTTP content data to standard output, includes the -dl option");
			System.out.println("-dhc                     ->> debug HTTP protocol headers and HTTP content data to standard output, includes the -dl option");
			System.out.println("-dC                      ->> debug cookies to standard output, includes the -dl option");
			System.out.println("-dK                      ->> debug keep-alive (socket pool) to standard output, includes the -dl option");
			System.out.println("-dssl                    ->> debug SSL handshake (https) to standard output, includes the -dl and the -dK option");
			System.out.println();
			System.out.println("-tz <timezone>           ->> set time zone (see Application Reference Manual: supported time zones)");
			System.out.println("-dgs a|c                 ->> set number format (decimal group separator) a = '  c = ,");
			System.out.println("-browserlang <text>      ->> set the browser language for the test");
			System.out.println("-enablebrowcache         ->> set the browser cache mode on");
			System.out.println("-checknewpageversion     ->> set the conditional GET mode on");
			System.out.println("-cachehtml               ->> set the cache html resources flag");
			System.out.println("-newvuperloop            ->> simulate new VU per loop");
			System.out.println("-replay                  ->> Indicates the replay mode");
			System.out.println("-annotation <text>       ->> adds an annotation for this test run");
			System.out.println();
			System.out.println("-execAgentHost <ip address or dns name>      ->> set the ip address or the dns name of the exec agent from which the license is used (default: 127.0.0.1)");
			System.out.println("-execAgentPort <port>                        ->> set the tcp/ip port of the exec agent (default: 7993)");
			System.out.println("-execAgentProtocol <plain | http | https>    ->> set the protocol of the exec agent (default: plain)");
			System.out.println("-execAgentUsername <string>                  ->> set the auth. username for the exec agent (default: [no username])");
			System.out.println("-execAgentPassword <string>                  ->> set the auth. password for the exec agent (default: [no password])");
			System.out.println();
			System.out.println("-h                       ->> display this help text");
			System.out.println("-help                    ->> display this help text");
			System.out.println();
			System.exit(-1);
		}
		
		System.out.println("+----------------------------------------------------------------+");
		System.out.println("| Welcome to the ZebraTester Load Test Program.                  |");
		System.out.println("| Additional help available with program argument \"-help\"        |");
		System.out.println("| Procedure Copyright by Apica. |");
		System.out.println("| All rights reserved.             |");
		System.out.println("+----------------------------------------------------------------+");
		
		
		if (commonNextProxyConfig != null)
		{
			System.out.println();
			System.out.println("*** Warning: Loadtest over HTTP(S) Proxy ***");
		}
		
		// check command line argument -tz <timezone>
		String timeZoneString = ParseArgs.getString(args, "-tz");
		if (timeZoneString != null)
			defaultTimeZone = timeZoneString; // set time zone?
		ZoneTime.setDefaultTimeZone(defaultTimeZone);
		
		// check command line argument -noECC
		sslECC = (!ParseArgs.hasOption(args, "-noECC"));       // disable ssl ecc ?
		
		// initialize ssl/https support
		SSLInit.execute(!ParseArgs.hasOption(args, "-iaikLast"), true);
		if (sslECC)
			SSLInit.enableECC();
		
		// check command line argument -nosni
		if (ParseArgs.hasOption(args, "-nosni"))            // disable ssl sni ?
			sslSNI = false;
		
		// check command line argument -snicritical
		if (ParseArgs.hasOption(args, "-snicritical"))      // set ssl sni as critical tls extension ?
			sslSNICirical = true;
		
		// check command line argument -tlssessiontickets
		if (ParseArgs.hasOption(args, "-tlssessiontickets"))      // set tls extension session tickets?
			useTlsSessionTickets = true;
		
		// set default character set for response content tests
		setCharEncoding(prxCharEncoding);
		
		// check command line argument -dgs a|c
		String dgs = ParseArgs.getString(args, "-dgs");
		if (dgs != null)
		{
			if (dgs.equalsIgnoreCase("a"))
				defaultNumberGroupingSeparator = '\'';
			if (dgs.equalsIgnoreCase("c"))
				defaultNumberGroupingSeparator = ',';
		}
		Lib.setDefaultNumberGroupingSeparator(defaultNumberGroupingSeparator);
		
		// check command line argument -browserlang <text>
		browserLanguage = ParseArgs.getString(args, "-browserlang");
		
		// check command line argument -enablebrowcache
		if (ParseArgs.hasOption(args, "-enablebrowcache"))
		{
			enableBrowserCache = true;
			browserCacheStatistic = new BrowserCacheStatistic();
		}
		
		// check command line argument -checknewpageversion
		if (ParseArgs.hasOption(args, "-checknewpageversion"))
		{
			conditionalGet = true;
		}
		
		// check command line argument -replay
		if (ParseArgs.hasOption(args, "-replay"))
		{
			replayMode = true;
		}
		
		// check command line argument -annotation <text>
		String testRunAnnotation = ParseArgs.getString(args, "-annotation");
		if (testRunAnnotation != null)
		{
			if (testRunAnnotation.startsWith("\"") && testRunAnnotation.endsWith("\""))
				testRunAnnotation = testRunAnnotation.substring(1, testRunAnnotation.length() - 1);
		}
		
		// check command line argument -ssl
		String newSslProtocolVersion = ParseArgs.getString(args, "-ssl");
		if (newSslProtocolVersion != null)
		{
			if (newSslProtocolVersion.equalsIgnoreCase("v2"))
				sslProtocolVersion = "v2";
			if (newSslProtocolVersion.equalsIgnoreCase("v3"))
				sslProtocolVersion = "v3";
			if (newSslProtocolVersion.equalsIgnoreCase("tls"))
				sslProtocolVersion = "tls";
			if (newSslProtocolVersion.equalsIgnoreCase("tls11"))
				sslProtocolVersion = "tls11";
			if (newSslProtocolVersion.equalsIgnoreCase("tls12"))
				sslProtocolVersion = "tls12";
			if (newSslProtocolVersion.equalsIgnoreCase("tls13"))
				sslProtocolVersion = "tls13";
		}
		
		// check command line argument -sslcache <seconds>
		Integer newSslSessionCacheTimeout = ParseArgs.getInteger(args, "-sslcache");
		if (newSslSessionCacheTimeout != null)
			sslSessionCacheTimeout = newSslSessionCacheTimeout.intValue();
		
		// check command line argument -sslrandom
		String sslHandshakeRandomGeneratorTypeStr = ParseArgs.getString(args, "-sslrandom");
		if (sslHandshakeRandomGeneratorTypeStr != null)
		{
			if (sslHandshakeRandomGeneratorTypeStr.equalsIgnoreCase("java"))
				sslHandshakeRandomGeneratorType = HttpSocketPool.SSL_HANDSHAKE_RANDOM_GENERATOR_TYPE_JAVA_DEFAULT;
			if (sslHandshakeRandomGeneratorTypeStr.equalsIgnoreCase("iaik"))
				sslHandshakeRandomGeneratorType = HttpSocketPool.SSL_HANDSHAKE_RANDOM_GENERATOR_TYPE_IAIK_DEFAULT;
			if (sslHandshakeRandomGeneratorTypeStr.equalsIgnoreCase("fast"))
				sslHandshakeRandomGeneratorType = HttpSocketPool.SSL_HANDSHAKE_RANDOM_GENERATOR_TYPE_FAST;
		}
		
		// check command line argument -sslcmode
		sslcmode = ParseArgs.hasOption(args, "-sslcmode");  // enable ssl/https compatibility workarounds?
		
		// check command line argument -dfl
		debugFailedLoops = ParseArgs.hasOption(args, "-dfl"); // debug failed loops?
		
		// check command line argument -dl
		debugLoops = ParseArgs.hasOption(args, "-dl");      // debug loops?
		
		// check command line argument -dh
		debugHttp = ParseArgs.hasOption(args, "-dh");       // debug http?
		if (debugHttp)
			debugLoops = true;
		
		// check command line argument -dc
		debugContent = ParseArgs.hasOption(args, "-dc");    // debug content?
		if (debugContent)
			debugLoops = true;
		
		// check command line argument -dhc
		if (ParseArgs.hasOption(args, "-dhc"))				// debug http and content
		{
			debugLoops = true;
			debugHttp = true;
			debugContent = true;
		}
		
		// check command line argument -dC
		debugCookies = ParseArgs.hasOption(args, "-dC");    // debug cookies?
		if (debugCookies)
			debugLoops = true;
		
		// check command line argument -dK
		debugKeepAlive = ParseArgs.hasOption(args, "-dK");  // debug keep.alive (socket pool)?
		if (debugKeepAlive)
			debugLoops = true;
		
		// check command line argument -dssl
		debugSsl = ParseArgs.hasOption(args, "-dssl");      // debug keep.alive (socket pool)?
		if (debugSsl)
		{
			debugLoops = true;
			debugKeepAlive = true;
		}
		
		// get startup delay
		Integer newStartupDelay = ParseArgs.getInteger(args, "-sdelay");
		if (newStartupDelay != null)
			plannedStartupDelay = newStartupDelay.intValue();
		
		// get max. parallel threads per user - note: only valid if CONTAINS_PARALLEL_EXECUTED_URLS = true
		Integer newMaxParallelThreadsPerUser = ParseArgs.getInteger(args, "-mtpu");
		if (newMaxParallelThreadsPerUser != null)
		{
			if (newMaxParallelThreadsPerUser.intValue() > 0)
				maxParallelThreadsPerUser = newMaxParallelThreadsPerUser.intValue();
		}
		// get maximum number of loops per user
		maxPlannedLoops = 0;  // maximum loops per user, 0 = unlimited
		Integer newLoops = ParseArgs.getInteger(args, "-maxloops");
		if (newLoops != null)
			maxPlannedLoops = newLoops.intValue();
		
		// pacing of loops per user
		Integer pacingObj = ParseArgs.getInteger(args, "-pacing");
		if (pacingObj != null)
			pacing = pacingObj.intValue();
		
		// get maximum downlink network bandwidth per user (default = unlimited)
		Integer newDownlinkBandwidth = ParseArgs.getInteger(args, "-downlink");
		if (newDownlinkBandwidth != null)
			downlinkBandwidth = newDownlinkBandwidth.intValue();
		
		// get maximum uplink network bandwidth per user (default = unlimited)
		Integer newUplinkBandwidth = ParseArgs.getInteger(args, "-uplink");
		if (newUplinkBandwidth != null)
			uplinkBandwidth = newUplinkBandwidth.intValue();
		
		// get statistic sampling interval
		int samplingInterval = 15;  // statistic sampling interval in seconds
		Integer newSamplingInterval = ParseArgs.getInteger(args, "-sampling");
		if (newSamplingInterval != null)
			samplingInterval = newSamplingInterval.intValue();
		
		// get additional sampling rate per web page call
		int percentilePageSampling = 100;  // additional sampling rate per web page call in percent
		Integer newPercentilePageSampling = ParseArgs.getInteger(args, "-percpage");
		if (newPercentilePageSampling != null)
			percentilePageSampling = newPercentilePageSampling.intValue();
		
		// get additional sampling rate per url call
		int percentileUrlSampling = 0;  // additional sampling rate per url call in percent
		Integer newPercentileUrlSampling = ParseArgs.getInteger(args, "-percurl");
		if (newPercentileUrlSampling != null)
			percentileUrlSampling = newPercentileUrlSampling.intValue();
		
		// get extended sampling level per url call
		int percentileUrlSamplingAddOption = 0;  // extended sampling level per url call, 0 = disabled
		Integer newPercentileUrlSamplingAddOption = ParseArgs.getInteger(args, "-percurlopt");
		if (newPercentileUrlSamplingAddOption != null)
			percentileUrlSamplingAddOption = newPercentileUrlSamplingAddOption.intValue();
		
		// get maximum number of error snapshots per URL (0 = unlimited)
		int maxErrorSnapshots = 0;
		Integer newMaxErrorSnapshots = ParseArgs.getInteger(args, "-maxerrsnap");
		if (newMaxErrorSnapshots != null)
			maxErrorSnapshots = newMaxErrorSnapshots.intValue();
		
		// get maximum memory in megabytes which can be used for error snapshots (-1 = unlimited, default = 10)
		long maxErrorSnapshotMemory = 20;
		Long newMaxErrorSnapshotMemory = ParseArgs.getLong(args, "-maxerrmem");
		if (newMaxErrorSnapshotMemory != null)
			maxErrorSnapshotMemory = newMaxErrorSnapshotMemory.longValue();
		
		// single user mode ?
		boolean singleUserMode = ParseArgs.hasOption(args, "-singleuser");
		
		// override value for http user agent field ?
		String setUserAgentStr = ParseArgs.getIgnoreCaseString(args, "-setuseragent");
		if (setUserAgentStr != null)
		{
			USER_AGENT_1 = setUserAgentStr;
		}
		// get required input arguments
		int concurrentUsers = 0;     // number of concurrent users
		plannedRequestTimeout = 0;   // request timeout in seconds
		
		System.out.println();
		
		// parse -Userid argument or ask --> <user-input-field>: proposed value = "FWTest_100058"
		try
		{
			Userid = UserInputField.readFromObjectString(USER_INPUT_FIELD_Userid).readUserInputValue(args);
			if (Userid.startsWith("\"") && Userid.endsWith("\""))
				Userid = Userid.substring(1, Userid.length() - 1);
		}
		catch (IOException ie)
		{
			System.out.println("*** INTERNAL ERROR: invalid user input field object-string declaration for 'Userid' ***");
			ie.printStackTrace();
			System.exit(-2);
		}
		
		// parse -Password argument or ask --> <user-input-field>: proposed value = "Welcome1"
		try
		{
			Password = UserInputField.readFromObjectString(USER_INPUT_FIELD_Password).readUserInputValue(args);
			if (Password.startsWith("\"") && Password.endsWith("\""))
				Password = Password.substring(1, Password.length() - 1);
		}
		catch (IOException ie)
		{
			System.out.println("*** INTERNAL ERROR: invalid user input field object-string declaration for 'Password' ***");
			ie.printStackTrace();
			System.exit(-2);
		}
		
		// parse -u argument or ask --> <number of concurrent users>
		Integer i = ParseArgs.getIntegerOrAsk(args, "-u", "Concurrent Users, <RETURN>=1 : ", new Integer(1));
		if (i == null)
			System.exit(-1);
		else
			concurrentUsers = i.intValue();
		
		// parse -d argument or ask --> <test duration in seconds>
		i = ParseArgs.getIntegerOrAsk(args, "-d", "Test Duration in Seconds, <RETURN>=30 : ", new Integer(30));
		if (i == null)
			System.exit(-1);
		else
			plannedTestDuration = i.intValue();
		
		// parse -t argument or ask --> <request timeout in seconds>
		i = ParseArgs.getIntegerOrAsk(args, "-t", "HTTP Request Timeout per URL in Seconds, <RETURN>=60 : ", new Integer(60));
		if (i == null)
			System.exit(-1);
		else
			plannedRequestTimeout = i.intValue();
		
		// parse optional -tconnect argument (TCP/IP socket connect timeout in seconds)
		i = ParseArgs.getInteger(args, "-tconnect");
		if (i != null)
			plannedConnectTimeout = i.intValue();
		
		String genericFileName = PerformanceData.proposeFileName("finwell_pros_v1ab", concurrentUsers, ParseArgs.getString(args, "-executionPlan"));
		
		// auto-configure binary result file
		if (!ParseArgs.hasOption(args, "-nores"))
		{
			String newResultFile = ParseArgs.getString(args, "-res");
			if (newResultFile == null)
				resultFile = genericFileName + ".prxres";
			else
				resultFile = newResultFile;
			System.out.println("Result File : " + resultFile);
		}
		
		// display common arguments at console output
		System.out.println();
		System.out.println("# concurrent users = " + concurrentUsers);
		System.out.println("# max. parallel threads per user = [serial execution order for all URLs]");
		System.out.print("# planned test duration = ");
		if (plannedTestDuration == 0 || plannedTestDuration == -1)
			System.out.println("unlimited");
		else
			System.out.println("" + plannedTestDuration + " seconds");
		System.out.println("# http request timeout = " + plannedRequestTimeout + " seconds");
		if (plannedConnectTimeout != 0)
			System.out.println("# tcp/ip socket connect timeout = " + plannedConnectTimeout + " seconds");
		System.out.println("# startup delay = " + plannedStartupDelay + " milliseconds");
		System.out.println("# statistic sampling interval = " + samplingInterval + " seconds");
		System.out.println("# additional sampling rate per web page call = " + percentilePageSampling + " %");
		System.out.println("# additional sampling rate per url call = " + percentileUrlSampling + " %");
		System.out.println("# extended sampling per url call = " + PerformanceDataTickExtension.extTypeToString(percentileUrlSamplingAddOption).toLowerCase());
		System.out.print("# max loops per user = ");
		if (maxPlannedLoops == 0)
			System.out.println("unlimited");
		else
			System.out.println("" + maxPlannedLoops + " loops");
		System.out.print("# pacing for loops = ");
		if (pacing == 0)
			System.out.println("no pacing");
		else
			System.out.println("" + pacing + " seconds");
		if (downlinkBandwidth > 0)
			System.out.println("# max downlink bandwidth per user = " + downlinkBandwidth + " kbps");
		if (uplinkBandwidth > 0)
			System.out.println("# max uplink bandwidth per user = " + uplinkBandwidth + " kbps");
		System.out.println("# http protocol version = v" + httpProtocolVersion);
		System.out.println("# ssl protocol version = " + sslProtocolVersion);
		if (sslSessionCacheTimeout != 0)
			System.out.println("# ssl session cache timeout = " + sslSessionCacheTimeout + " seconds");
		else
			System.out.println("# ssl session cache disabled");
		if (resultFile != null)
			System.out.println("# result file = " + resultFile);
		else
			System.out.println("# no result file");
		if (debugFailedLoops)
			System.out.println("# debug failed loops");
		if (debugLoops)
			System.out.println("# debug loops");
		if (debugHttp)
			System.out.println("# debug http protocol headers");
		if (debugContent)
			System.out.println("# debug http content data");
		if (debugCookies)
			System.out.println("# debug cookies");
		if (debugKeepAlive)
			System.out.println("# debug keep-alive (socket pool)");
		if (debugSsl)
			System.out.println("# debug ssl (https)");
		if (enableBrowserCache)
		{
			if (conditionalGet)
			System.out.println("# browser cache - conditional GET is enabled");
		}
		
		
		// ----------------------------
		// *** initialize load test ***
		// ----------------------------
		
		
		// initialize performance data
		// ---------------------------
		final int PAGE_BREAKS = 7;  // number of page breaks in execute()  - modify this value if you add or delete some page breaks
		final int MAX_THREAD_STEPS = 251;  // number of URL requests in execute() - modify this value if you add or delete some requests
		performanceData = new PerformanceData(PAGE_BREAKS, MAX_THREAD_STEPS, concurrentUsers, -1, plannedTestDuration, maxPlannedLoops, httpProtocolVersion, plannedStartupDelay, plannedRequestTimeout, samplingInterval, percentilePageSampling, percentileUrlSampling, percentileUrlSamplingAddOption);
		performanceData.setInfoText("finwell_pros_v1ab");
		performanceData.setExecutorsAnnotation(testRunAnnotation);
		if (commonNextProxyConfig != null)
		{
			performanceData.setProxyInfo(proxyHttpHost, proxyHttpPort, proxyHttpsHost, proxyHttpsPort);
			performanceData.addTestDescription("*** Warning: Load test executed via outbound proxy ***");
		}
		performanceData.setResultFileName(resultFile);
		performanceData.setDumpStream(System.out, "# ");
		performanceData.setMaxErrorSnapshots(maxErrorSnapshots);		// 0 = unlimited
		if (maxErrorSnapshotMemory >= 0)
			performanceData.setMaxErrorSnapshotsMemory(maxErrorSnapshotMemory * 1048576l);		// value in bytes
		
		if (sslECC)
			performanceData.addTestDescription("*** SSL/TLS ECC is enabled ***");
		
		if ((downlinkBandwidth != 0) || (uplinkBandwidth != 0))
		{
			String downlinkBandwidthStr = "unlimited";
			String uplinkBandwidthStr = "unlimited";
			
			if (downlinkBandwidth != 0)
				downlinkBandwidthStr = "" + downlinkBandwidth + " kbps";
			if (uplinkBandwidth != 0)
				uplinkBandwidthStr = "" + uplinkBandwidth + " kbps";
			
			performanceData.addTestDescription("*** Warning: Max. network bandwidth per user limited. downlink = " + downlinkBandwidthStr + ", uplink = " + uplinkBandwidthStr + " ***");
		}
		
		if ((percentileUrlSamplingAddOption != PerformanceDataTickExtension.EXT_TYPE_NOTYPE) && (percentileUrlSampling > 0))
			performanceData.addTestDescription("*** Warning: Option \"" + PerformanceDataTickExtension.extTypeToString(percentileUrlSamplingAddOption).toLowerCase() + "\" enabled for additional sampling rate per URL call ***");
		if (debugFailedLoops)
			performanceData.addTestDescription("*** Warning: Debug failed loops enabled ***");
		if (debugLoops)
			performanceData.addTestDescription("*** Warning: Debug loops enabled ***");
		if (debugHttp)
			performanceData.addTestDescription("*** Warning: Debug HTTP protocol headers enabled ***");
		if (debugContent)
			performanceData.addTestDescription("*** Warning: Debug HTTP content data enabled ***");
		if (debugCookies)
			performanceData.addTestDescription("*** Warning: Debug cookies enabled ***");
		if (debugKeepAlive)
			performanceData.addTestDescription("*** Warning: Debug keep-alive enabled ***");
		if (debugSsl)
			performanceData.addTestDescription("*** Warning: Debug SSL/TLS enabled ***");
		if (!sslProtocolVersion.equalsIgnoreCase("all"))
			performanceData.addTestDescription("*** Warning: SSL/TLS protocol version fixed to " + sslProtocolVersion.toUpperCase() + " ***");
		if (sslSessionCacheTimeout == 0)
			performanceData.addTestDescription("*** Warning: SSL/TLS session cache disabled ***");
		if (singleUserMode)
		{
			String singleUserModeWarning = "*** Warning: Single user mode enabled ***";
			System.out.println(singleUserModeWarning);
			performanceData.addTestDescription(singleUserModeWarning);
		}
		if (setUserAgentStr != null)
		{
			String overrideUserAgentWarning = "*** Warning: User agent set to \"" + setUserAgentStr + "\" ***";
			System.out.println(overrideUserAgentWarning);
			performanceData.addTestDescription(overrideUserAgentWarning);
		}
		performanceData.addUserInputField("Userid", Userid);		// add user input field name and value to performance data
		performanceData.addUserInputField("Password", Password);		// add user input field name and value to performance data
		
		
		// ready to start load test...
		initNull(concurrentUsers);
		performanceData.setUserContextTable(getUserContextTable());
		
		// ... but init first remote interface ...
		initRemote(args);
		
		// ... and init plug-in class loader ...
		try
		{
			if (getPluginClassLoader() == null)
				setPluginClassLoader(new LoadtestPluginClassLoader(getSymmetricEncryptContext(), getEncryptedClasspathList()));
		}
		catch (Throwable pluginClassLoaderThrowable)
		{
			System.out.println("*** ERROR: Unable to load encrypted files ***");
			pluginClassLoaderThrowable.printStackTrace();
			System.exit(-1);
		}
		
		// ... and check multihomed option ...
		initMultihomed(args);
		
		// ... and add dynaTrace session ID to load test result - if available ...
		initDynaTrace();
		
		
		// use test-specific DNS hosts file (optional) ?
		String dnsHostsFile = ParseArgs.getIgnoreCaseString(args, "-dnshosts");
		if (dnsHostsFile != null)
		{
			try
			{
				dnsCache = new DNSCache(getSymmetricEncryptContext(), dnsHostsFile);
			}
			catch (IOException ie)
			{
				System.out.println("*** ERROR: unable to read DNS hosts file " + dnsHostsFile + " ***");
				System.out.println("*** Hint: you have to ZIP " + dnsHostsFile + " together with the compiled class of the load test program ***");
				ie.printStackTrace();
				System.exit(-1);
			}
		}
		
		// use test-specific DNS translation table (optional) ?
		String dnsTranslationTableFile = ParseArgs.getIgnoreCaseString(args, "-dnstranslation");
		if (dnsTranslationTableFile != null)
		{
			try
			{
				DNSTranslationTable dnsTranslationTable = new DNSTranslationTable(getSymmetricEncryptContext(), new File(dnsTranslationTableFile));
				if (dnsCache == null)
					dnsCache = new DNSCache();
				dnsCache.setDNSTranslationTable(dnsTranslationTable);
			}
			catch (IOException ie)
			{
				System.out.println("*** ERROR: unable to read DNS translation table file " + dnsTranslationTableFile + " ***");
				System.out.println("*** Hint: you have to ZIP " + dnsTranslationTableFile + " together with the compiled class of the load test program ***");
				ie.printStackTrace();
				System.exit(-1);
			}
		}
		
		// use test-specific DNS servers (optional) ?
		String dnsSrvStr = ParseArgs.getIgnoreCaseString(args, "-dnssrv");
		if (dnsSrvStr != null)
		{
			ArrayList<String> dnsSrvList = new ArrayList<String>();
			StringTokenizer dnsTok = new StringTokenizer(dnsSrvStr, ",;");
			while (dnsTok.hasMoreTokens())
				dnsSrvList.add(dnsTok.nextToken());
			if (dnsCache == null)
				dnsCache = new DNSCache(dnsSrvList);
			else
				dnsCache.setDnsServers(dnsSrvList);
		}
		
		// enable DNS TTL ?
		if (ParseArgs.hasOption(args, "-dnsenattl"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.enableTTL();
		}
		
		// set fixed DNS TTL ?
		Integer dnsFixTTL = ParseArgs.getInteger(args, "-dnsfixttl");
		{
			if (dnsFixTTL != null)
			{
				if (dnsCache == null)
					dnsCache = new DNSCache();
				dnsCache.setFixedTTL(dnsFixTTL.intValue());
			}
		}
		
		// enable DNS resolves per loop ?
		if (ParseArgs.hasOption(args, "-dnsperloop"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsPerLoop = true;
		}
		
		// enable DNS statistic ?   // note: use this option only if not any other, more specific DNS option is enabled.
		if (ParseArgs.hasOption(args, "-dnsstatistic"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
		}
		
		// debug DNS resolver ?
		if (ParseArgs.hasOption(args, "-dnsdebug"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.setDebugToStdout(true);
		}
		
		// enable IPv6 
		if (ParseArgs.hasIgnoreCaseOption(args, "-enableIPv6"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.setEnableIPv6(true);
			String networkInterfaceName = ParseArgs.getString(args, "-enableIPv6");
			if(null != networkInterfaceName && !networkInterfaceName.startsWith("-"))
				dnsCache.setNetworkInterfaceName(networkInterfaceName);
		}
		
		// enable IPv6 and V4 
		if (ParseArgs.hasIgnoreCaseOption(args, "-enableIPv6v4"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.setEnableIPv6v4(true);
			String networkInterfaceName = ParseArgs.getString(args, "-enableIPv6v4");
			if(null != networkInterfaceName && !networkInterfaceName.startsWith("-"))
				dnsCache.setNetworkInterfaceName(networkInterfaceName);
		}
		
		if (dnsCache != null)
		{
			// update performance data with DNS settings
			performanceData.addDNSCacheStatistic(dnsCache.getCacheStatistic());
			performanceData.addTestDescription("*** Warning: OS-independent DNS access enabled. " + dnsCache.getConfigInfoText() + " ***");
			if (dnsPerLoop)
				performanceData.addTestDescription("*** Warning: DNS option -dnsperloop enabled ***");
			
			// log DNS settings
			System.out.println("# OS-independent DNS access enabled. " + dnsCache.getConfigInfoText());
			if (dnsPerLoop)
				System.out.println("# DNS option -dnsperloop enabled");
		}
		
		// log the initial value of all global vars
		if (debugLoops || debugFailedLoops)
		{
			System.out.println("global var <<< Password = " + Password);
			System.out.println("global var <<< Userid = " + Userid);
			System.out.println();
		}
		
		// calculate sampling offset and virtual user startup offset for cluster jobs (time shift per cluster member)
		int samplingTimeshift = 0;	// value in seconds
		if (!ParseArgs.hasOption(args, "-nosdelayCluster"))
		{
			if ((getClusterTotalMemberCount() > 1) && (getClusterMemberLocalId() > 0))
			{
				samplingTimeshift = Math.round(((float) samplingInterval / (float) getClusterTotalMemberCount()) * (float) getClusterMemberLocalId());
				System.out.println("# samplingTimeshift = " + samplingTimeshift + " seconds");
				
				long startupDelayOffset = (plannedStartupDelay / ((long) getClusterTotalMemberCount())) * ((long) getClusterMemberLocalId());
				System.out.println("# startupDelayTimeshift = " + startupDelayOffset + " milliseconds");
				System.out.println();
				if (startupDelayOffset > 0)
				{
					try { sleepRemoteInterruptable(startupDelayOffset); } catch (InterruptedException ie) {}
				}
			}
		}
		
		
		// Add user defined data point sequences to performance data
		// -----------------------
		initializeDataCollectionSequences();
		
		
		// update performance data
		// -----------------------
		testDurationStart = System.currentTimeMillis();
		performanceData.setStartDate();
		performanceData.addSnapshot(getCpuUsagePercent());
		performanceData.setSnapshotsTimeshift(samplingTimeshift);
		performanceData.setEndDate();
		if(browserCacheStatistic != null)
		{
			performanceData.setBrowserCacheStatistic(browserCacheStatistic);
		}
		
		// initialize global context for plug-ins  
		LoadtestPluginContext globalPluginContext = new LoadtestPluginContext(prxVersion, prxCharEncoding, new finwell_pros_v1ab());
		
		
		// --------------------------
		// *** start of load test ***
		// ---------------------------
		
		
		// special case for execution plans - start test with zero virtual users
		// ---------------------------------------------------------------------
		if (hasExecutionPlan())
		{
			if (concurrentUsers != 0)
			{
				System.out.println("*** Fatal Error: Load test with execution plan must start with zero number of virtual users - Load test program aborted ***");
				System.exit(1);
			}
			try
			{
				getUserContextTable().getWriteLock().lock();
				
				finwell_pros_v1ab simulatedUser = new finwell_pros_v1ab(maxPlannedLoops, plannedRequestTimeout, getUserContextTable().getUserContextList().size());
				
				HttpLoadTestUserContext userContext = new HttpLoadTestUserContext(simulatedUser, null);
				userContext.setLoadTestUserExecutionPlanPlaceholder();
				getUserContextTable().getUserContextList().add(userContext);
				simulatedUser.setOwnLoadTestUserContext(userContext);
			}
			finally
			{
				getUserContextTable().getWriteLock().unlock();
			}
		}
		
		
		// start virtual users as threads (normal case)
		// --------------------------------------------
		usersToBeIncreasedAtStartupOffset.set(concurrentUsers);
		for (int x = 0; x < concurrentUsers; x++)
		{
			if (cancelIncrementDecrementUser || cancelInitialIncrementUser)
			{
				usersToBeIncreasedAtStartupOffset.set(0);
				break;
			}
			
			// start load test thread
			// ----------------------
			Thread t = null;
			try
			{
				getUserContextTable().getWriteLock().lock();
				
				finwell_pros_v1ab simulatedUser = new finwell_pros_v1ab(maxPlannedLoops, plannedRequestTimeout, getUserContextTable().getUserContextList().size());
				t = new Thread(simulatedUser);
				String threadName = "" + getUserContextTable().getUserContextList().size();
				threadName = THREAD_NAME.substring(0, 7 - threadName.length()) + threadName;
				t.setName(threadName);
				if (debugLoops && (simulatedUser.getLog().size() > 0))
				{
					synchronized (dumpLock)
					{
						simulatedUser.dumpLog(threadName + " ", System.out);		// dump log of constructor
					}
				}
				HttpLoadTestUserContext userContext = new HttpLoadTestUserContext(simulatedUser, t);
				getUserContextTable().getUserContextList().add(userContext);
				simulatedUser.setOwnLoadTestUserContext(userContext);
			}
			finally
			{
				getUserContextTable().getWriteLock().unlock();
			}
			t.start();
			usersToBeIncreasedAtStartupOffset.decrementAndGet();
			System.out.println("# --- thread " + t.getName() + " created --- " + ZoneTime.dateToShortString() + " ---");
			
			while (isSuspend())
			{
				try { Thread.currentThread().sleep(100); } catch (InterruptedException ie) { break; }
				if (abortedByRemote() || abortedByEofInputFile() || abortedByUniqueNumberVar())
					break;
				
				// check if max test duration reached during suspend
				if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
					break;
				
				// display and sample temporary performance data all "sampling interval" seconds - also during suspend
				if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
				{
					performanceData.addSnapshot(getCpuUsagePercent());
					performanceData.setEndDate();
				}
			}
			
			if (abortedByRemote() || abortedByEofInputFile() || abortedByUniqueNumberVar())
				break;
			
			if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				break;
			
			// startup delay for next thread
			// -----------------------------
			try
			{
				if (!singleUserMode)   // create concurrent users
				{
					if (plannedStartupDelay <= 3000)
						sleepRemoteInterruptable(plannedStartupDelay);
					else
					{
						long startupDelayStartTime = System.currentTimeMillis();
						while (true)
						{
							if (abortedByRemote() || abortedByEofInputFile() || abortedByUniqueNumberVar())
								break;
							if ((System.currentTimeMillis() - startupDelayStartTime) >= plannedStartupDelay)
								break;
							
							Thread.currentThread().sleep(100);
							
							// display and sample temporary performance data all "sampling interval" seconds
							if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
							{
								performanceData.addSnapshot(getCpuUsagePercent());
								performanceData.setEndDate();
							}
						}
						while (isSuspend())
						{
							try { Thread.currentThread().sleep(100); } catch (InterruptedException ie) { break; }
							if (abortedByRemote() || abortedByEofInputFile() || abortedByUniqueNumberVar())
								break;
							
							// check if max test duration reached during suspend
							if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
								break;
							
							// display and sample temporary performance data all "sampling interval" seconds - also during suspend
							if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
							{
								performanceData.addSnapshot(getCpuUsagePercent());
								performanceData.setEndDate();
							}
						}
						
					}
				}
				else
					t.join();   // single user mode
			}
			catch (InterruptedException ie) { break; }
			if (abortedByRemote() || abortedByEofInputFile() || abortedByUniqueNumberVar())
				break;
			
			
			// display and sample temporary performance data all "sampling interval" seconds
			if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
			{
				performanceData.addSnapshot(getCpuUsagePercent());
				performanceData.setEndDate();
				if (!isRemote())
				{
					synchronized (dumpLock)
					{
						performanceData.dump(false);
					}
				}
			}
		}
		usersToBeIncreasedAtStartupOffset.set(0);	// just in case that a thread is not started for any reason
		
		
		// wait for test-end in a loop
		// ---------------------------
		boolean allDone = false;
		while (!allDone)
		{
			// test aborted ?
			if (abortedByRemote() || abortedByEofInputFile() || abortedByUniqueNumberVar())
			{
				nearRemoteEnd();
				String abort = "";
				if (abortedByRemote())
					abort = "*** test aborted by remote command ***";
				if (abortedByEofInputFile())
				{
					abort = "*** test aborted at eof of input file ***";
					performanceData.addTestDescription(abort);
				}
				if (abortedByUniqueNumberVar())
				{
					abort = "*** test aborted as an unique number is out of values ***";
					performanceData.addTestDescription(abort);
				}
				synchronized (dumpLock)
				{
					addSSLCacheStatistic();
					performanceData.addSnapshot(getCpuUsagePercent());
					performanceData.setEndDate();
					
					if (!isRemote())
						performanceData.dump(false);
					if (resultFile != null)
						try { performanceData.writeObjectToFile(getSymmetricEncryptContext(), resultFile); } catch (IOException ie) { ie.printStackTrace(); }
					
					if(replayMode)
					{
						saveReplaySnapShots("ZTReplay.snapshot");
					}
					
					saveATSTablesData();
					System.out.println();
					System.out.println(abort);
					System.out.println();
					System.out.flush();
					try { Thread.currentThread().sleep(10000); } catch (InterruptedException ie) {}
					System.exit(0);
				}
			}
			
			// display and sample temporary performance data all "sampling interval" seconds
			if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
			{
				performanceData.addSnapshot(getCpuUsagePercent());
				performanceData.setEndDate();
				if (!isRemote())
				{
					synchronized (dumpLock)
					{
						performanceData.dump(false);
					}
				}
			}
			
			// check if test has been done in case of decrement users to zero
			if ((decrementUser) && (plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				decrementUser = false;
			// check if test has been done
			if (!hasExecutionPlan())
				allDone = isTestDone();
			else
			{
				if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				{
					performanceData.addTestDescription("*** Warning: Load test aborted. Execution plan time limit exceeded after " + plannedTestDuration + " seconds ***");
					triggerAbort();
				}
			}
			
			// if not all is done: sleep one second
			if (!allDone)
				try { sleepRemoteInterruptable(1000); } catch (InterruptedException ie) { break; }
		} // end of wait loop
		
		
		// mark near end of test - only if a remote interface has been used
		nearRemoteEnd();
		
		
		
		// final test result - test completed
		// ----------------------------------
		performanceData.addSnapshot(getCpuUsagePercent());
		performanceData.setEndDate();
		if(replayMode)
		{
			saveReplaySnapShots("ZTReplay.snapshot");
		}
		saveATSTablesData();
		
		// save test result
		performanceData.dump(true);
		if (resultFile != null)
			try { performanceData.writeObjectToFile(getSymmetricEncryptContext(), resultFile); } catch (IOException ie) { ie.printStackTrace(); }
		
		// all done
		System.out.flush();
		
		// wait for official end of test - only if a remote interface has been used
		waitRemoteEnd();
		
		System.out.println();
		System.out.println("Result File: " + resultFile);
		
		// now dead
		System.exit(0);
	}


	/**
	 * implement VaryingLoadInterface: support to increment the number of simulated users at runtime.
	 */
	public void setIncrementUser(long startTime)
	{
		incrementUserStartTime = startTime;
		incrementUserFlag = true;
	}

	public boolean isIncrementUser()
	{
		return incrementUserFlag;
	}

	public long getIncrementUserStartTime()
	{
		return incrementUserStartTime;
	}

	public void setIncrementUserStartTime(long startTime)
	{
		incrementUserStartTime = startTime;
	}

	public void clearIncrementUser()
	{
		incrementUserFlag = false;
	}

	public int incrementUsers(int numAddUsers, long startupDelay)
	{
		if (startupDelay < 0)
			startupDelay = plannedStartupDelay;
		return incrementUsersImplementation(numAddUsers, startupDelay, this);
	}

	static int incrementUsersImplementation(int numAddUsers, long startupDelay, HttpLoadTest httpLoadTest)
	{
		long startupDelayOffset = 0;
		if ((getClusterTotalMemberCount() > 1) && (getClusterMemberLocalId() > 0))
			startupDelayOffset = (startupDelay / ((long) getClusterTotalMemberCount())) * ((long) getClusterMemberLocalId());
		
		ArrayList<HttpLoadTestUserContext> addUserContextList = new ArrayList<HttpLoadTestUserContext>(numAddUsers);
		for (int x = 0; x < numAddUsers; x++)
		{
			if (abortedByRemote() || abortedByEofInputFile() || abortedByUniqueNumberVar())
				return x;
			
			// initialize load test thread
			// ---------------------------
			try
			{
				getUserContextTable().getWriteLock().lock();
				
				finwell_pros_v1ab simulatedUser = new finwell_pros_v1ab(maxPlannedLoops, plannedRequestTimeout, getUserContextTable().getUserContextList().size());
				HttpLoadTestUserContext userContext = prepareIncrementUser(simulatedUser, System.currentTimeMillis() + startupDelayOffset + (x * startupDelay));
				addUserContextList.add(userContext);
				simulatedUser.setOwnLoadTestUserContext(userContext);
				if (debugLoops && (simulatedUser.getLog().size() > 0))
				{
					synchronized (dumpLock)
					{
						simulatedUser.dumpLog(userContext.getLoadTestThread().getName() + " ", System.out);		// dump log of constructor
					}
				}
			}
			finally
			{
				getUserContextTable().getWriteLock().unlock();
			}
		}
		
		// start load test threads by a thread
		// -----------------------------------
		HttpLoadTestIncrementUserThread incrementUserThread = new HttpLoadTestIncrementUserThread(httpLoadTest, addUserContextList);
		incrementUserThread.start();
		return numAddUsers;
	}


	/**
	 * Internal method used to load and apply next proxy settings from ZBAProxySettings.properties file.
	 * Settings are applied only if file exists and nextProxyIsActive is set to true in the file.
	 * Note that settings stored with the session, will be ineffective.
	 *
	 * @since V5.5-D
	 */
	private void applyNextProxySettingsFromFileIfExists()
	{
		
		String filename = "ZBAProxySettings.properties";
		BufferedReader bin = null;
		SymmetricEncryptContext decryptContext = getSymmetricEncryptContext();
		File file = new File(filename);
		
		if (file.exists())
		// open input file
		try
		{
			if (decryptContext == null)
			{
				bin = new BufferedReader(new InputStreamReader(new FileInputStream(filename), Charset.forName("UTF-8")));
			}
			else
			{
				// create a reader stream that decrypts the data on the fly
				bin = new BufferedReader(new InputStreamReader(SymmetricEncrypt.getCipherInputStream(new FileInputStream(filename), decryptContext), Charset.forName("UTF-8")));
			}
			
			if (bin != null)
			{
				Properties nextProxyConfigProperties = new Properties();
				nextProxyConfigProperties.load(bin);
				NextProxyConfig nextProxyConfig = new NextProxyConfig();
				nextProxyConfig.setActive(Boolean.valueOf(nextProxyConfigProperties.getProperty("nextProxyIsActive")));
				proxyEnabled = nextProxyConfig.isActive();                             // if false: do not use a proxy server
				
				if (proxyEnabled)
				{
					nextProxyConfig.disableHttpProxyCache(Boolean.valueOf(nextProxyConfigProperties.getProperty("nextProxyHttpCacheDisabled")));
					proxyCacheDisabled = nextProxyConfig.isDisabledHttpProxyCache();
					nextProxyConfig.setHttpHost(nextProxyConfigProperties.getProperty("nextProxyHttpHost"));
					proxyHttpHost = nextProxyConfig.getHttpHost();
					nextProxyConfig.setHttpPort(Integer.valueOf(nextProxyConfigProperties.getProperty("nextProxyHttpPort")));
					proxyHttpPort = nextProxyConfig.getHttpPort();
					nextProxyConfig.setHttpsHost(nextProxyConfigProperties.getProperty("nextProxyHttpsHost"));
					proxyHttpsHost = nextProxyConfig.getHttpsHost();
					nextProxyConfig.setHttpsPort(Integer.valueOf(nextProxyConfigProperties.getProperty("nextProxyHttpsPort")));
					proxyHttpsPort = nextProxyConfig.getHttpsPort();
					nextProxyConfig.setAuthUsername(nextProxyConfigProperties.getProperty("nextProxyAuthUsername"));
					nextProxyConfig.setAuthPassword(nextProxyConfigProperties.getProperty("nextProxyAuthPassword"));
					nextProxyConfig.setNoNextProxy(nextProxyConfigProperties.getProperty("noNextProxy"));
					noProxyFor = nextProxyConfig.getNoNextProxy();
					
					String proxyAuth = "";
					
					if (nextProxyConfig.getAuthUsername() != null)
					{
						proxyAuth = nextProxyConfig.getAuthUsername() + ":";
						if (nextProxyConfig.getAuthPassword() != null)
							proxyAuth = proxyAuth + nextProxyConfig.getAuthPassword();
					}
					
					String  proxyAuthorization = null;
					
					if (proxyAuth.length() > 1)
						proxyAuthorization = Base64Encoder.encode(proxyAuth);		// Base 64 encoded - used for basic authentication only
					
					commonNextProxyConfig = new NextProxyConfig(proxyEnabled, proxyCacheDisabled, proxyHttpHost, proxyHttpPort, proxyHttpsHost, proxyHttpsPort, proxyAuthorization, noProxyFor);
					
					log("*** Warning: Applying proxy configuration from file " + filename + " ***");
				}
				
			}
		}
		catch (Throwable tr)
		{
			log("*** Unable to load proxy configuration from properties file " + filename + " ***");
			tr.printStackTrace();
		}
		finally
		{
			if (bin != null)
			{
				try { bin.close(); } catch (Exception e) {}
			}
		}
		
	}
		
	/**
	 * Internal method used to initialize all data collection sequences for user defined data points.
	 * @since V6.0-A
	 */
	private static void initializeDataCollectionSequences()
	{
		int newSequenceId = performanceData.getDataCollectionSet().getNewSequenceId();
		
		
	}
		

}	// end of class

